<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XiaoFeng</name>
    </assembly>
    <members>
        <member name="T:XiaoFeng.Model.Core.CacheDataAttribute">
            <summary>
            缓存数据属性
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Core.CacheDataAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Core.CacheDataAttribute.#ctor(System.Int32)">
            <summary>
            设置过期时间 单位为秒  0为永久缓存
            </summary>
            <param name="TimeOut">过期时间</param>
        </member>
        <member name="M:XiaoFeng.Model.Core.CacheDataAttribute.#ctor(XiaoFeng.CacheType,System.Int32)">
            <summary>
            设置过期时间 单位为秒  0为永久缓存
            </summary>
            <param name="cacheType">缓存类型</param>
            <param name="TimeOut">过期时间</param>
        </member>
        <member name="P:XiaoFeng.Model.Core.CacheDataAttribute.CacheType">
            <summary>
            是否缓存数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.CacheDataAttribute.TimeOut">
            <summary>
            过期时间 单位为秒 0为永久缓存
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.Core.ColumnAttribute">
            <summary>
            数据库字段属性
            Verstion : 1.0.0
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Core.ColumnAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Core.ColumnAttribute.#ctor(System.String,System.String,System.Int32,System.Object,System.String)">
            <summary>
            设置字段属性值
            </summary>
            <param name="name">字段名</param>
            <param name="dataType">字段类型</param>
            <param name="length">类型长度</param>
            <param name="defaultValue">字段默认值</param>
            <param name="description">字段说明</param>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.DataType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.Length">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.Description">
            <summary>
            字段说明
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.PrimaryKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.IsNullable">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.IsUnique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.AutoIncrement">
            <summary>
            是否是自增长列
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.AutoIncrementStep">
            <summary>
            自增长步数
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.AutoIncrementSeed">
            <summary>
            自增长种子
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.IsIndex">
            <summary>
            是否是索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.ColumnAttribute.Digit">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.Core.EncryptFileAttribute">
            <summary>
            加密文件
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.Core.TableAttribute">
            <summary>
            数据库表属性
            Verstion : 1.1.0
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Core.TableAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Core.TableAttribute.#ctor(System.String,System.String,System.String,XiaoFeng.ModelType,System.String,System.Int32)">
            <summary>
            设置表属性
            </summary>
            <param name="name">表名</param>
            <param name="description">表说明</param>
            <param name="primaryKey">表主键</param>
            <param name="modelType">model类型</param>
            <param name="connName">数据库连接串</param>
            <param name="connIndex">数据库索引</param>
        </member>
        <member name="P:XiaoFeng.Model.Core.TableAttribute.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.TableAttribute.Description">
            <summary>
            表说明
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.TableAttribute.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.TableAttribute.ConnName">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.TableAttribute.ConnIndex">
            <summary>
            连接索引 默认 为0
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Core.TableAttribute.ModelType">
            <summary>
            Model类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.DirtyCollection">
            <summary>
            脏数据操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加集合
            </summary>
            <param name="collection">集合</param>
        </member>
        <member name="P:XiaoFeng.Model.DirtyCollection.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.Add(System.String)">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.Remove(System.String)">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.DirtyCollection.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.DirtyCollection.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.Contains(System.String)">
            <summary>
            是否存在项
            </summary>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.ToArray">
            <summary>
            转换为数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.ToList">
            <summary>
            转换为List
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.DirtyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Model.Entity`1">
            <summary>
            实体类基础类
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.TableType">
            <summary>
            表类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.Config">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="F:XiaoFeng.Model.Entity`1._Fields">
            <summary>
            列
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.Fields">
            <summary>
            列
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.ModelType">
            <summary>
            基础类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.Create">
            <summary>
            当前类型对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Queryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件
            </summary>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Model.Entity`1._Data">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.Data">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="F:XiaoFeng.Model.Entity`1._DataQ">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="F:XiaoFeng.Model.Entity`1.RunSqlCallBack">
            <summary>
            运行SQL事件
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.DataQ">
            <summary>
            数据库操作
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.QueryableX">
            <summary>
            转换为QueryableX 注:用其它Json或Xml组件序列化此实例时,要重写此属性,让其忽略当前属性,如果不忽略则会出现列循环导致内存溢出
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.DataBaseName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.DataBaseNum">
            <summary>
            分库索引 
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.TableName">
            <summary>
            分表名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.Entity`1.TableAttr">
            <summary>
            表属性
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件
            </summary>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Where(System.String)">
            <summary>
            条件
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Insert(System.Boolean)">
            <summary>
            添加
            </summary>
            <param name="isBackAutoID">是否返回自增长ID</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Insert(System.Int64@)">
            <summary>
            添加
            </summary>
            <param name="ID">自增长ID</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Inserts(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加数据
            </summary>
            <param name="models">model集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Update">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Delete">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.FieldFormat(System.String)">
            <summary>
            数据库格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            删除
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Find(System.String)">
            <summary>
            查找
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            查找
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.ToList(System.String)">
            <summary>
            返回列表
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.ToObjectList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.ToObjectList(System.String)">
            <summary>
            返回列表
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.ToObjectList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            设置属性值
            </summary>
            <param name="func">表达式树</param>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0)">
            <summary>
            设置属性值
            </summary>
            <param name="func">表达式树</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.GetPrimaryKey">
            <summary>
            查找主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.GetUniqueKey">
            <summary>
            获取唯一键字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条数
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Count(System.String)">
            <summary>
            条数
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SetSubDataBase(System.String,System.UInt32,System.String)">
            <summary>
            设置分库
            </summary>
            <param name="key">分库数据库连接串</param>
            <param name="num">库索引</param>
            <param name="suffix">分表后缀</param>
            <returns>对象</returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SetSubDataBase(System.UInt32)">
            <summary>
            设置分库
            </summary>
            <param name="num">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SetSubTable(System.String)">
            <summary>
            设置分表名称
            </summary>
            <param name="suffix">后缀</param>
            <returns>对象</returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.CreateSubTable(System.String)">
            <summary>
            创建分表
            </summary>
            <param name="suffix">后缀</param>
            <returns>返回是否创建成功</returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.Sub">
            <summary>
            使用分库分表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SubDataBase">
            <summary>
            使用分库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SubDataBase(System.String,System.Boolean)">
            <summary>
            使用分库
            </summary>
            <param name="key">数据库连接串</param>
            <param name="isGlobal">是否全局使用</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SubDataBase(System.UInt32,System.Boolean)">
            <summary>
            使用分库
            </summary>
            <param name="num">库索引</param>
            <param name="isGlobal">是否全局使用</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SubDataBase(System.String,System.UInt32,System.String,System.Boolean)">
            <summary>
            使用分库
            </summary>
            <param name="key">分库数据库连接串</param>
            <param name="num">库索引</param>
            <param name="suffix">分表后缀</param>
            <param name="isGlobal">是否全局使用</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SubTable">
            <summary>
            使用分表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SubTable(System.String,System.Boolean)">
            <summary>
            使用分表
            </summary>
            <param name="suffix">分表后缀</param>
            <param name="isGlobal">是否全局使用</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.Entity`1.SetDataX">
            <summary>
            设置DataHelperX
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.EntityView`1">
            <summary>
            视图基础类
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Model.EntityView`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.EntityView`1.ViewContent">
            <summary>
            视图内容
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.Entity`2">
            <summary>
            模型
            </summary>
            <typeparam name="T">类型</typeparam>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:XiaoFeng.Model.Entity`2.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.Entity`2.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.Entity">
            <summary>
            实体基础类
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.IEntity`1">
            <summary>
            接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.SetSubDataBase(System.String,System.UInt32,System.String)">
            <summary>
            设置分库
            </summary>
            <param name="key">分库数据库连接串</param>
            <param name="num">库索引</param>
            <param name="suffix">分表后缀</param>
            <returns>对象</returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.SetSubDataBase(System.UInt32)">
            <summary>
            设置分库
            </summary>
            <param name="num">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.SetSubTable(System.String)">
            <summary>
            设置分表名称
            </summary>
            <param name="suffix">后缀</param>
            <returns>对象</returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            删除
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件
            </summary>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            查找
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.ToObjectList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.ToObjectList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            返回列表
            </summary>
            <param name="func">条件</param>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Inserts(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加数据
            </summary>
            <param name="models">model集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条数
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Model.IEntity">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.IEntity.DataBaseName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.IEntity.DataBaseNum">
            <summary>
            分库索引 
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.IEntity.TableType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.Insert(System.Boolean)">
            <summary>
            添加
            </summary>
            <param name="isBackAutoID">是否返回自增长ID</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.Update">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.Delete">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.Delete(System.String)">
            <summary>
            删除
            </summary>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Model.IEntity.Fields">
            <summary>
            列
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.ToObjectList(System.String)">
            <summary>
            返回列表
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.GetPrimaryKey">
            <summary>
            查找主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.GetUniqueKey">
            <summary>
            获取唯一键字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Model.IEntity.Count(System.String)">
            <summary>
            条数
            </summary>
            <param name="whereString">条件</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Model.MakeModel">
            <summary>
            生成Model类操作类
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2018/08/24 08:47:12
            Update Time : 2018/08/24 09:11:53
            2020-11-24
            更新生成模型匹配度
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.MakeModel.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.DataHelper">
            <summary>
            数据库操作对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.SavePath">
            <summary>
            保存目录
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.ModelType">
            <summary>
            是否生成表类
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.Namespace">
            <summary>
            命令空间
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.ModelTemplate">
            <summary>
            类模板
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.ColumnTemplate">
            <summary>
            类属性模板
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.MakeModel.CreateModel(System.String,System.String,System.String,System.Int32)">
            <summary>
            生成类
            </summary>
            <param name="savePath">保存目录</param>
            <param name="tableName">表名或视图名</param>
            <param name="connName">数据库连接名</param>
            <param name="connIndex">数据库索引</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Model.MakeModel.TableModel">
            <summary>
            Model类
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.TableModel.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.MakeModel.TableModel.ModelType">
            <summary>
            是否是表
            </summary>
        </member>
        <member name="M:XiaoFeng.Model.MakeModel.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.PrototypeHelper">
            <summary>
            扩展Model
            </summary>
        </member>
        <member name="T:XiaoFeng.Model.SubDataBaseTable">
            <summary>
            分库分表模型
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.SubDataBaseTable.Key">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.SubDataBaseTable.Num">
            <summary>
            数据库索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Model.SubDataBaseTable.Suffix">
            <summary>
            分表后缀
            </summary>
        </member>
        <member name="T:XiaoFeng.FieldIgnoreAttribute">
            <summary>
            忽略字段属性
            </summary>
        </member>
        <member name="M:XiaoFeng.FieldIgnoreAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.PrototypeHelper">
            <summary>
            自定义属性扩展
            Verstion : 1.1.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/11/15 09:41:58
            Update Time : 2018/04/09 16:01:29
            </summary>
            <summary>
            扩展属性方法操作类
            Version : 1.1.9
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            Description:
            v 1.1.4
            1.扩展 ToEntity 更新转换实体时 默认为null 而不是实例化
            v 1.1.5 2018-07-12
            1.扩展 获取对象基础类型
            2.增加数据行转对象方法
            v 1.1.6 2018-08-20
            1.把MD5扩展方法移到加密文件夹中
            v 1.1.7 2018-09-05
            1.优化ToCast方法
            2.优化 数字 溢出 返回 -2的问题
            v 1.1.8 2019-02-28
            1.增加获取当前类型的所有基类
            v 1.1.9 2020-05-13
            1.优化Enum转换
            2.增加Enum 复合枚举转换
            </summary>
            <summary>
            加密解密扩展属性方法操作类
            Version : 1.0.0
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            Description:
            </summary>
            <summary>
            数据库扩展类
            Version : 1.1.6
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
            <summary>
            附加属性方法操作类 日期操作
            Version : 1.0.0
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
            <summary>
            枚举扩展
            </summary>
            <summary>
            扩展拼接Lambda表达式树
            </summary>
            <summary>
            扩展JSON对象
            </summary>
            <summary>
            程序集扩展类
            </summary>
            <summary>
            判断字符串是否为某种格式
            Verstion : 1.0.1
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/11/16 14:19:03
            Update Time : 2018/04/11 11:43:18
            </summary>
            <summary>
            字符串扩展方法
            </summary>
            <summary>
            扩展XML方法
            </summary>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetTableAttribute``1(``0,System.Boolean)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="t">对象</param>
            <param name="inherit">是否向父类查找</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetViewAttribute``1(``0,System.Boolean)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="t">对象</param>
            <param name="inherit">是否向父类查找</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetColumnAttribute``1(``0)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="t">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetCustomAttributeValue``1(System.Type,System.Func{``0,System.Object},System.String)">
            <summary>
            获取自定义属性值
            </summary>
            <typeparam name="T">自定义属性类型</typeparam>
            <param name="t">类型</param>
            <param name="func">Lambda表达式</param>
            <param name="name">类型方法或属性</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T">自定义属性类型</typeparam>
            <param name="t">自定义属性类型</param>
            <param name="inherit">是否往父类找</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetCustomAttributeValue``1(System.Reflection.MemberInfo,System.Func{``0,System.Object})">
            <summary>
            获取自定义属性值
            </summary>
            <typeparam name="T">自定义属性类型</typeparam>
            <param name="m">属性对象</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T">自定义属性类型</typeparam>
            <param name="m">属性对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDescription(System.Type)">
            <summary>
            获取指定属性或事件的描述
            </summary>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDescription(System.Enum)">
            <summary>
            获取枚举Description
            </summary>
            <param name="_">枚举</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDefaultValue(System.Reflection.MemberInfo)">
            <summary>
            获取指定属性的DefaultValue
            </summary>
            <param name="m">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDefaultValue(System.Type)">
            <summary>
            获取指定属性的DefaultValue
            </summary>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDefaultValue(System.Enum)">
            <summary>
            获取枚举DefaultValue
            </summary>
            <param name="_">枚举</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取指定属性或事件的描述
            </summary>
            <param name="m">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDisplayName(System.Type)">
            <summary>
            获取指定属性或事件的描述
            </summary>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            获取指定属性或事件的描述
            </summary>
            <param name="m">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetElementXType(System.Type)">
            <summary>
            获取元素类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HasFieldIgnore(System.Reflection.MemberInfo)">
            <summary>
            是否包括字段忽略属性
            </summary>
            <param name="member">成员元数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetValueType(System.Type)">
            <summary>
            获取对象基础类型
            </summary>
            <param name="_">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToList``1(System.Data.DataRow[])">
            <summary>
            数据行转对象列表
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="_">数据行</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToList``1(System.Data.DataTable)">
            <summary>
            数据表转换对象列表
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="_">数据表</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToEntity``1(System.Data.DataTable)">
            <summary>
            数据表转换对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="_">数据表</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToEntity``1(System.Data.DataRow)">
            <summary>
            数据行转换对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="_">数据行</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Join(System.String[],System.String,System.Int32,System.Int32)">
            <summary>
            数组转换成字符串
            </summary>
            <param name="values">数组对象</param>
            <param name="separator">连接字符串中间的字符</param>
            <param name="startIndex">开始位置</param>
            <param name="count">个数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            数组转换成字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="values">数组对象</param>
            <param name="separator">连接字符串中间的字符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DictionaryToObject``1(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            键值对转换成对象
            </summary>
            <typeparam name="T">对象 可以是class 也可以是struct</typeparam>
            <param name="d">键值对</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ObjectToDictionary``1(``0)">
            <summary>
            对象转键值对
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="_">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToEnum``1(System.Object,System.Boolean)">
            <summary>
            转换成Enum类型
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="o">常量，整型，无符号整型,长整型，无符号长整型，短整型，无符号短整型，字节</param>
            <param name="ignoreCase">True 忽略大小写 False考虑大小写</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToEnum(System.Object,System.Type,System.Boolean)">
            <summary>
            转换成Enum类型
            </summary>
            <param name="o">常量，整型，无符号整型,长整型，无符号长整型，短整型，无符号短整型，字节</param>
            <param name="type">类型</param>
            <param name="ignoreCase">True 忽略大小写 False考虑大小写</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SetAttributeValue``1(System.Xml.XmlElement,System.String,``0)">
            <summary>
            设置节点属性值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="elm">节点</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SetAttributeValue``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            设置节点属性值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="elm">节点</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SelectSingleNode(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            根据xpath获取节点
            </summary>
            <param name="node">结点</param>
            <param name="xpath">xpath</param>
            <param name="attrName">属性名</param>
            <param name="attrValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SelectSingleNode(System.Xml.XmlElement,System.String,System.String,System.String)">
            <summary>
            根据xpath获取节点
            </summary>
            <param name="element">结点</param>
            <param name="xpath">xpath</param>
            <param name="attrName">属性名</param>
            <param name="attrValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <param name="action">委托事件</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32},System.Int32,System.Int32)">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="action">委托事件</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(``0[],System.Int32,System.Int32,System.Action{System.Int32,``0[]})">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <param name="action">委托事件</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(``0[],System.Action{System.Int32,``0[]},System.Int32,System.Int32)">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="action">委托事件</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <param name="func">委托事件</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,System.Boolean},System.Int32,System.Int32)">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="func">委托事件</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(``0[],System.Int32,System.Int32,System.Func{System.Int32,``0[],System.Boolean})">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <param name="func">委托事件</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.For``1(``0[],System.Func{System.Int32,``0[],System.Boolean},System.Int32,System.Int32)">
            <summary>
            循环遍历数据 For
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">对象</param>
            <param name="func">委托事件</param>
            <param name="start">数组开始</param>
            <param name="end">数组结束</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            循环遍历数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">类型对象</param>
            <param name="action">无返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            循环遍历数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">类型对象</param>
            <param name="action">无返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            循环遍历数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">类型对象</param>
            <param name="func">有返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            循环遍历数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">类型对象</param>
            <param name="func">有返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            循环遍历数据
            </summary>
            <param name="enumerable">对象</param>
            <param name="action">无返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.IEnumerable,System.Action{``0,System.Int32})">
            <summary>
            循环遍历数据
            </summary>
            <param name="enumerable">对象</param>
            <param name="action">无返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.IEnumerable,System.Func{``0,System.Boolean})">
            <summary>
            循环遍历数据
            </summary>
            <param name="enumerable">对象</param>
            <param name="func">有返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Each``1(System.Collections.IEnumerable,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            循环遍历数据
            </summary>
            <param name="enumerable">对象</param>
            <param name="func">有返回值Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            值是否在键值对中
            </summary>
            <typeparam name="TKey">类型</typeparam>
            <typeparam name="TValue">类型</typeparam>
            <param name="_">对象</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Value``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取Dictionary值 Value
            </summary>
            <typeparam name="TKey">Key 类型</typeparam>
            <typeparam name="TValue">Value 类型</typeparam>
            <param name="_">Dictionary对象</param>
            <param name="key">Key 值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetKey``2(System.Collections.Generic.IDictionary{``0,``1},``1,``0)">
            <summary>
            获取Dictionary值 Key
            </summary>
            <typeparam name="TKey">Key 类型</typeparam>
            <typeparam name="TValue">Value 类型</typeparam>
            <param name="_">Dictionary对象</param>
            <param name="value">Value</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetKey``1(System.Collections.Generic.IDictionary{``0,``0},``0)">
            <summary>
            获取Dictionary值 Key
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">Dictionary对象</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.FindByValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            获取Dictionary值 KeyValuePair
            </summary>
            <typeparam name="TKey">Key 类型</typeparam>
            <typeparam name="TValue">Value 类型</typeparam>
            <param name="_">Dictionary对象</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToQuery``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            IDictionary 转换成参数写法
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="_">IDictionary对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToUpperFirst(System.String)">
            <summary>
            转换首字母大小
            </summary>
            <param name="_">字符串对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToRegexEscape(System.String)">
            <summary>
            通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。 这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。
            </summary>
            <param name="_">包含要转换的文本的输入字符串</param>
            <returns>由转换为转义形式的元字符组成的字符串</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToRegexUnescape(System.String)">
            <summary>
            转换输入字符串中的任何转义字符
            </summary>
            <param name="_">包含要转换的文本的输入字符串</param>
            <returns>包含任何转换为非转义形式的转义字符的字符串</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            字符串匹配模式
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">格式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNotMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            字符串不匹配
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">格式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetPatterns(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            提取符合模式的数据
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            提取符合模式的数据
            </summary>
            <param name="_">字串</param>
            <param name="pattern">模式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetMatchs(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            提取符合模式的数据
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            提取符合模式的数据
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配项。
            </summary>
            <param name="_">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项</param>
            <returns>一个包含有关匹配的信息的对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项
            </summary>
            <param name="_">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项</param>
            <returns>搜索操作找到的 System.Text.RegularExpressions.Match 对象的集合。 如果未找到匹配项，则此方法将返回一个空集合对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetQuery(System.String,System.String)">
            <summary>
            获取参数值 正则
            </summary>
            <param name="_">网址或参数集</param>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetParam(System.String,System.String)">
            <summary>
            获取参数值 参数组
            </summary>
            <param name="_">网址或参数集</param>
            <param name="key">Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetQuerys(System.String)">
            <summary>
            获取参数键值对
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetParams(System.String)">
            <summary>
            获取参数键值对
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ReplacePattern(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            替换模式
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="replaceMent">替换值</param>
            <param name="options">模式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ReplacePattern(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            替换模式
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="m">方法操作过程中每当找到正则表达式匹配时都调用的方法</param>
            <param name="options">模式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.RemovePattern(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            移除模式
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="options">模式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SplitPattern(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            拆分字符串为数组
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="options">模式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SplitPattern(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            拆分字符串为数组
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">模式</param>
            <param name="options">模式选项</param>
            <param name="matchTimeOut">超时间隔，或 System.Text.RegularExpressions.Regex.InfiniteMatchTimeout 指示该方法不应超时</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.getValue(System.Object)">
            <summary>
            格式化数据[显示用]
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetValue(System.Object)">
            <summary>
            格式化数据[数据库用]
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetSqlValue(System.Object)">
            <summary>
            格式化数据[数据库用]
            </summary>
            <param name="_">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToEncode(System.String,System.String,System.String)">
            <summary>
            字符从一个编码转换成另一种编码
            </summary>
            <param name="_">字符串</param>
            <param name="from">编码</param>
            <param name="to">目标编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToEncode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            字符从一个编码转换成另一种编码
            </summary>
            <param name="_">字符串</param>
            <param name="from">编码</param>
            <param name="to">目标编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.format(System.String,System.Object[])">
            <summary>
            实现String.Format的扩展
            </summary>
            <param name="_">字符串</param>
            <param name="args">参数集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.format(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            实现String.Format的扩展
            </summary>
            <param name="_">字符串 自定义变量转换 {key}或${key}</param>
            <param name="d">Dictionary集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实现String.Format的扩展
            </summary>
            <param name="_">字符串 自定义变量转换 {key}或${key}</param>
            <param name="d">Dictionary集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToInt16(System.String,System.Int16)">
            <summary>
            字符串转换成Int16
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToUInt16(System.String,System.UInt16)">
            <summary>
            字符串转换成UInt16
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToInt32(System.String,System.Int32)">
            <summary>
            字符串转换成Int32
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToUInt32(System.String,System.UInt32)">
            <summary>
            字符串转换成UInt32
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToInt64(System.String,System.Int64)">
            <summary>
            字符串转换成Int64
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToUInt64(System.String,System.UInt64)">
            <summary>
            字符串转换成UInt64
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDouble(System.String,System.Double)">
            <summary>
            字符串转换成Double
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            字符串转换成Decimal
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToFloat(System.String,System.Single)">
            <summary>
            字符串转换成float
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToLong(System.String,System.Int64)">
            <summary>
            字符串转换成long
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToByte(System.String,System.Byte)">
            <summary>
            字符串转换成Byte
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToSByte(System.String,System.SByte)">
            <summary>
            字符串转换成SByte
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToGUID(System.String,System.Guid)">
            <summary>
            字符串转换成Guid
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToGuid(System.String,System.Guid)">
            <summary>
            字符串转换成Guid
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBoolean(System.String,System.Boolean)">
            <summary>
            字符串转换成Boolean
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            字符串转换成DateTime
            </summary>
            <param name="_">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToCast``1(System.Object,``0)">
            <summary>
            类型相互转换
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">原对象</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetValue(System.Object,System.Type)">
            <summary>
            类型相互转换
            </summary>
            <param name="o">对象</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetValue(System.Object,System.Type,System.Boolean@)">
            <summary>
            类型相互转换
            </summary>
            <param name="o">对象</param>
            <param name="targetType">类型</param>
            <param name="isGeneric">是否是泛类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToList``1(System.Collections.IEnumerable)">
            <summary>
            将集合数据复制到List中
            </summary>
            <typeparam name="T">基础值类型</typeparam>
            <param name="enumerable">集合数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToArray``1(System.Collections.IEnumerable)">
            <summary>
            将集合数据复制到数组中
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="enumerable">集合数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToArray``2(``0[],System.Converter{``0,``1})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="TInput">原数组类型</typeparam>
            <typeparam name="TOutput">新数组类型</typeparam>
            <param name="array">原数组</param>
            <param name="converter">转换方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToArray``2(``0[])">
            <summary>
            原数组
            </summary>
            <typeparam name="TInput">原数组类型</typeparam>
            <typeparam name="TOutput">新数组类型</typeparam>
            <param name="array">原数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBase64String(System.Byte[])">
            <summary>
            字节转base64字符串
            </summary>
            <param name="_">字节</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节转base64字符串
            </summary>
            <param name="_">字节</param>
            <param name="start">开始位置</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            字节转base64字符串
            </summary>
            <param name="_">字节</param>
            <param name="options">是否在其输出中插入换行符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            字节转base64字符串
            </summary>
            <param name="_">字节</param>
            <param name="start">开始位置</param>
            <param name="length">长度</param>
            <param name="options">是否在其输出中插入换行符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBase64String(System.String,System.String)">
            <summary>
            字符串转base64
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            字符串转base64
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.FromBase64String(System.String,System.String)">
            <summary>
            base64字符串转字符串
            </summary>
            <param name="_">Base64字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            base64字符串转字符串
            </summary>
            <param name="_">Base64字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.FromBase64StringToBytes(System.String)">
            <summary>
            Base64字符串转Byte[]
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetEncoding(System.Byte[])">
            <summary>
            获取字节编码
            </summary>
            <param name="_">字节</param>
            <returns>字节编码</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转字节
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetBytes(System.String,System.String)">
            <summary>
            字符串转字节
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetSBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转字节
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetSBytes(System.String,System.String)">
            <summary>
            字符串转字节
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            字节转字符串
            </summary>
            <param name="_">字节</param>
            <param name="encoding">编码</param>
            <param name="index">开始位置</param>
            <param name="count">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetString(System.Byte[],System.String,System.Int32,System.Int32)">
            <summary>
            字节转字符串
            </summary>
            <param name="_">字节</param>
            <param name="encoding">编码</param>
            <param name="index">开始位置</param>
            <param name="count">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.InnerText(System.String)">
            <summary>
            获取HTML文本内容
            </summary>
            <param name="_">HTML内容</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SubString(System.String,System.Int32,System.String)">
            <summary>
            截取字符串 一个汉字为两个字符
            </summary>
            <param name="_">字符串</param>
            <param name="length">长度</param>
            <param name="endString">结束串 如...</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HexToString(System.String,System.Text.Encoding)">
            <summary>
            16进制转字符串
            </summary>
            <param name="_">16进制字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.StringToHex(System.String,System.Text.Encoding)">
            <summary>
            字符串转16进制
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ByteToHexString(System.Byte[],System.Boolean)">
            <summary>
            字节数组转16进制字符串
            </summary>
            <param name="bytes">字节</param>
            <param name="isSpace">是否有空格隔开 默认为有空格</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ByteToHexString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            字节数组转16进制字符串
            </summary>
            <param name="bytes">字节数组</param>
            <param name="start">开始位置</param>
            <param name="length">长度</param>
            <param name="isSpace">是否有空格隔开 默认为有空格</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HexStringToBytes(System.String)">
            <summary>
            16进制字符串转字节数组
            </summary>
            <param name="hexString">16进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Copy``1(``0)">
            <summary>
            复制对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.CopyTo``2(``0,``1)">
            <summary>
            复制数据到对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Is(System.Type,System.Type)">
            <summary>
            当前类型是否是某个类型
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">基础类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Is``1(System.Type)">
            <summary>
            当前类型是否是某个类型
            </summary>
            <typeparam name="T">基础类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.As(System.Type,System.Type)">
            <summary>
            当前类型是否可以作为某个类型
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">基础类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.As``1(System.Type)">
            <summary>
            当前类型是否可以作为某个类型
            </summary>
            <typeparam name="T">基础类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetBaseTypes(System.Type)">
            <summary>
            获取当前类型的所有基类
            </summary>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetBaseTypeNames(System.Type)">
            <summary>
            获取当前类型的所有基类的名称
            </summary>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetBaseType(System.Type)">
            <summary>
            获取当前类型的基础类型
            </summary>
            <param name="t">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IpToCode(System.String)">
            <summary>
            IP转换编码
            </summary>
            <param name="_">IP串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.CodeToIp(System.UInt64)">
            <summary>
            编码转IP串
            </summary>
            <param name="_">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Substring(System.String,System.String,System.String,System.Int32)">
            <summary>从字符串中检索子字符串，在指定头部字符串之后，指定尾部字符串之前</summary>
            <remarks>常用于截取xml某一个元素等操作</remarks>
            <param name="str">目标字符串</param>
            <param name="after">头部字符串，在它之后</param>
            <param name="before">尾部字符串，在它之前</param>
            <param name="startIndex">搜索的开始位置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.EqualsIgnoreCase``1(``0,``0[])">
            <summary>
            不区分大小写的比较
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="val">原值</param>
            <param name="other">其它值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.OrderBy(System.String)">
            <summary>
            字符串正排
            </summary>
            <param name="_">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.OrderByDescending(System.String)">
            <summary>
            字符串倒排
            </summary>
            <param name="_">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetUri(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取当前Uri
            </summary>
            <param name="http">请求</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Multivariate``1(``0,``0[])">
            <summary>
            多元符表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">数据</param>
            <param name="vs">其它数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Multivariate``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            多元符表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">数组</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Multivariate``1(``0[],``0)">
            <summary>
            多元符表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">数组</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.UrlEncode(System.String)">
            <summary>
            Url编码
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Url编码
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="_">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HtmlEncode(System.String)">
            <summary>
            Html编码
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HtmlDecode(System.String)">
            <summary>
            Html解码
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.JavaScriptStringEncode(System.String)">
            <summary>
            Javascript编码
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.JavaScriptStringEncode(System.String,System.Boolean)">
            <summary>
            Javascript编码
            </summary>
            <param name="_">字符串</param>
            <param name="addDoubleQuotes">是否包含双引号</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsValueType(System.Type)">
            <summary>
            是否是值类型
            </summary>
            <param name="_">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IfEmpty``1(``0,``0)">
            <summary>
            返回不为空的对象值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">对象</param>
            <param name="defaultValue">默认值</param>
            <returns>不为空的对象值</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IfEmpty``1(``0,System.Func{``0})">
            <summary>
            返回不为空的对象值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">对象</param>
            <param name="func">委托</param>
            <returns>不为空的对象值</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IfEmptyValue``1(``0,``0)">
            <summary>
            设置对象值,如果为空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">对象</param>
            <param name="value">值</param>
            <returns>对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IfEmptyValue``1(``0,System.Func{``0})">
            <summary>
            设置对象值,如果为空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">对象</param>
            <param name="func">委托</param>
            <returns>对象</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Empty``1(``0)">
            <summary>
            初始化对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="_">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Write(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            赋值数组
            </summary>
            <param name="data">目标</param>
            <param name="destStart">目标起始位置</param>
            <param name="source">源</param>
            <param name="sourceStart">源开始</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Write(System.Byte[],System.Byte[])">
            <summary>
            赋值数组
            </summary>
            <param name="data">目标</param>
            <param name="source">源</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.AESEncrypt(System.String,System.String)">
            <summary>AES加密</summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.AESDecrypt(System.String,System.String)">
            <summary>AES解密</summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.AESEncrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <summary>AES加密</summary>
            <param name="_">字符串</param>
            <param name="key">密钥</param>
            <param name="iv">偏移量</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingModel">填充类型</param>
            <param name="outputMode">输出模式</param>
            <returns>密文</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.AESDecrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <summary>AES解密</summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <param name="iv">偏移量</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingModel">填充类型</param>
            <param name="outputMode">输出模式</param>
            <returns>明文</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DESEncrypt(System.String,System.String)">
            <summary>DES加密</summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DESDecrypt(System.String,System.String)">
            <summary>DES解密</summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DESEncrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <summary>DES加密</summary>
            <param name="_">字符串</param>
            <param name="key">密钥</param>
            <param name="iv">偏移量</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingModel">填充类型</param>
            <param name="outputMode">输出模式</param>
            <returns>密文</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DESDecrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <summary>DES解密</summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <param name="iv">偏移量</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingModel">填充类型</param>
            <param name="outputMode">输出模式</param>
            <returns>明文</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DES3Encrypt(System.String,System.String)">
            <summary>DES3加密</summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DES3Decrypt(System.String,System.String)">
            <summary>3DES解密</summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DES3Encrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <summary>DES3加密</summary>
            <param name="_">字符串</param>
            <param name="key">密钥</param>
            <param name="iv">偏移量</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingModel">填充类型</param>
            <param name="outputMode">输出模式</param>
            <returns>密文</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DES3Decrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <summary>DES3解密</summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <param name="iv">偏移量</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingModel">填充类型</param>
            <param name="outputMode">输出模式</param>
            <returns>明文</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.RC4Encrypt(System.String,System.String)">
            <summary>
            RC4加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.RC4Decrypt(System.String,System.String)">
            <summary>
            RC4解密
            </summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ELFEncrypt(System.String,System.String)">
            <summary>
            ELF加密
            </summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ELFDecrypt(System.String,System.String)">
            <summary>
            ELF解密
            </summary>
            <param name="_">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SHAEncrypt(System.String,XiaoFeng.Cryptography.SHAType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            SHA加密
            </summary>
            <param name="_">原文</param>
            <param name="type">加密类型</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.MD5(System.String,System.Int32,System.Boolean)">
            <summary>
            字符串md5加密
            </summary>
            <param name="_">字符串</param>
            <param name="length">长度 16或32</param>
            <param name="ignoreCase">大写小写 true为小写 false 为大写</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SHA1Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            SHA1加密
            </summary>
            <param name="_">明文</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SHA256Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            SHA256加密
            </summary>
            <param name="_">明文</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SHA384Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            SHA384加密
            </summary>
            <param name="_">明文</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SHA512Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            SHA512加密
            </summary>
            <param name="_">明文</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACEncrypt(System.String,System.String,XiaoFeng.Cryptography.HMACType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMAC加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="type">加密类型</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACSHA1Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACRIPEMD160Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACRIPEMD160加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACSHA256Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACSHA1加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACSHA384Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACSHA384加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACSHA512Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACSHA512加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACMD5Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.HMACMACTripleDESEncrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="_">明文</param>
            <param name="key">密钥</param>
            <param name="mode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="_">明文</param>
            <param name="publicKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.RSADecrypt(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="_">密文</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToString(System.Byte[],XiaoFeng.Cryptography.OutputMode)">
            <summary>
            转字符串
            </summary>
            <param name="data">数字</param>
            <param name="outputMode">输出类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.CreateModel(XiaoFeng.Data.IDbHelper,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            生成当前数据库数据库表Model
            </summary>
            <param name="data">数据对象</param>
            <param name="path">保存路径</param>
            <param name="tableName">表名</param>
            <param name="namespace">命名空间</param>
            <param name="connName">数据库连接名</param>
            <param name="connIndex">数据库索引</param>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetParameterCommandText(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            获取存储过程带参数的SQL语句
            </summary>
            <param name="cmd">命令</param>
            <param name="isNull">参数是否是?号</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDataHelper(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            转换为数据库对象
            </summary>
            <param name="config">数据库配置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToRedisConfig(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            转换到Redis配置连接串
            </summary>
            <param name="config">配置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.CreateTable(XiaoFeng.Data.ConnectionConfig,System.Type,System.String,System.String,System.Int32)">
            <summary>
            模型生成表
            </summary>
            <param name="config">数据库配置</param>
            <param name="modelType">模型类型</param>
            <param name="tableName">表名</param>
            <param name="connName">数据库配置key</param>
            <param name="index">数据库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.CreateTable``1(XiaoFeng.Data.ConnectionConfig,System.String,System.String,System.Int32)">
            <summary>
            模型生成表
            </summary>
            <typeparam name="T">模型类型</typeparam>
            <param name="config">数据库配置</param>
            <param name="tableName">表名</param>
            <param name="connName">数据库配置key</param>
            <param name="index">数据库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToTimeStamp(System.DateTime,System.DateTime)">
            <summary>
            时间转时间戳(秒)
            </summary>
            <param name="_">时间</param>
            <param name="startDateTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToTimeStamp(System.DateTime)">
            <summary>
            时间转时间戳(秒)
            </summary>
            <param name="_">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToTimeStamps(System.DateTime,System.DateTime)">
            <summary>
            时间转时间戳(毫秒)
            </summary>
            <param name="_">时间</param>
            <param name="startDateTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToTimeStamps(System.DateTime)">
            <summary>
            时间转时间戳(毫秒)
            </summary>
            <param name="_">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDateTime(System.Int32,System.DateTime)">
            <summary>
            时间戳转时间(秒)
            </summary>
            <param name="_">时间戳</param>
            <param name="startDateTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDateTime(System.Int32)">
            <summary>
            时间戳转时间(秒)
            </summary>
            <param name="_">时间戳</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDateTime(System.Int64,System.DateTime)">
            <summary>
            时间戳转时间(毫秒)
            </summary>
            <param name="_">时间戳</param>
            <param name="startDateTime">起始时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToDateTime(System.Int64)">
            <summary>
            时间戳转时间(毫秒)
            </summary>
            <param name="_">时间戳</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.DateDiff(System.DateTime,System.DateTime,XiaoFeng.DateDiffType)">
            <summary>
            时间差防SQL中DateDiff
            </summary>
            <param name="nowTime">结束时间</param>
            <param name="subtractTime">开始时间</param>
            <param name="diffType">时间差类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetValue(System.Enum,XiaoFeng.EnumValueType)">
            <summary>
            获取枚举值
            </summary>
            <param name="e">枚举</param>
            <param name="valueType">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            扩展与条件表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">当前表达式树</param>
            <param name="second">与的表达式树</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType,System.String,System.Object)">
            <summary>
            扩展与条件表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="propertyName">属性名</param>
            <param name="expressionType">表达式类型</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Reflection.MethodInfo,System.String,System.Object[])">
            <summary>
            扩展与条件表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="propertyName">属性名</param>
            <param name="method">方法</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            扩展或条件表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">当前表达式树</param>
            <param name="second">或的表达式树</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Reflection.MethodInfo,System.String,System.Object[])">
            <summary>
            扩展与条件表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="propertyName">属性名</param>
            <param name="method">表达式类型</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Contains``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object)">
            <summary>
            扩展包含表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.NotContains``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object)">
            <summary>
            扩展包含表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Method``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Reflection.MethodInfo,System.String,System.Object)">
            <summary>
            扩展方法表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="method">方法</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.NotMethod``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Reflection.MethodInfo,System.String,System.Object)">
            <summary>
            扩展非方法表达式树
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="first">对象</param>
            <param name="method">方法</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SetValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            设置对象属性值
            </summary>
            <typeparam name="T">类型</typeparam>
            <typeparam name="TProperty">值类型</typeparam>
            <param name="t">对象</param>
            <param name="prop">属性表达式</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            替换表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="searchEx">搜索表达式</param>
            <param name="replaceEx">替换表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.To``3(System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            转换表达式参数
            </summary>
            <typeparam name="NewParam">新参数</typeparam>
            <typeparam name="OldParam">老参数</typeparam>
            <typeparam name="TResult">结果</typeparam>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.CompileGetValueExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            获取编译数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="expression">表达式</param>
            <param name="paramName">参数名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToJson(System.Object,XiaoFeng.Json.JsonSerializerSetting)">
            <summary>
            对象转JSON串
            </summary>
            <param name="o">对象</param>
            <param name="formatting">Json格式设置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToJson(System.Object,System.Boolean)">
            <summary>
            对象转JSON串
            </summary>
            <param name="o">对象</param>
            <param name="indented">是否格式化</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.JsonToObject``1(System.String)">
            <summary>
            JSON串转对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="_">JSON串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.JsonToObject(System.String,System.Type)">
            <summary>
            JSON串转对象
            </summary>
            <param name="_">JSON串</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.JsonToObject(System.String)">
            <summary>
            JSON串转对象
            </summary>
            <param name="_">JSON串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            是否是系统程序集
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetChildrenClass(System.Type)">
            <summary>
            获取当前类的所有子类
            </summary>
            <param name="baseType">基类</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsIndexer(System.Reflection.PropertyInfo)">
            <summary>
            判断属性是否是索引 this[]
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetPropertiesAndFields(System.Type,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            获取类型属性及字段
            </summary>
            <param name="type">类型</param>
            <param name="func">委托</param>
            <returns>类型的属性及字段</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.GetPropertiesAndFields(System.Type,System.Action{System.Reflection.MemberInfo})">
            <summary>
            获取类型属性及字段
            </summary>
            <param name="type">类型</param>
            <param name="action">委托</param>
            <returns>类型的属性及字段</returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsBasePath(System.String)">
            <summary>
            是否是物理路径
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsChinese(System.String)">
            <summary>
            是否是汉字格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsLetter(System.String)">
            <summary>
            是否是字母格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsSite(System.String)">
            <summary>
            是否是网址格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsFTP(System.String)">
            <summary>
            是否是FTP格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsGUID(System.String)">
            <summary>
            是否是GUID
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsEmail(System.String)">
            <summary>
            是否是Email
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNumberic(System.String)">
            <summary>
            是否是数字
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsFloat(System.String)">
            <summary>
            是否是浮点
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsTel(System.String)">
            <summary>
            是否是固话
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsPhone(System.String,System.String)">
            <summary>
            是否是手机
            </summary>
            <param name="_">字符串</param>
            <param name="pattern">手机格式正则</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsDate(System.String)">
            <summary>
            是否是日期
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsTime(System.String)">
            <summary>
            是否是时间
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsDateTime(System.String)">
            <summary>
            是否是日期时间
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsDateOrTime(System.String)">
            <summary>
            是否是日期时间 日期或日期+时间格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsIP(System.String)">
            <summary>
            是否是IP格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsBoolean(System.String)">
            <summary>
            是否是bool格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNullOrEmpty(System.Guid)">
            <summary>
            Guid是否为空
            </summary>
            <param name="_">guid</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNotNullOrEmpty(System.Guid)">
            <summary>
            Guid是否不为空
            </summary>
            <param name="_">guid</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNullOrEmpty``1(``0)">
            <summary>
            指定字符串是否为 null 或 System.String.Empty 字符串
            </summary>
            <param name="_">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNotNullOrEmpty``1(``0)">
            <summary>
            指定字符串是否不为 null 或 非System.String.Empty 字符串
            </summary>
            <param name="_">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNullOrEmpty(System.String)">
            <summary>
            指定字符串是否为 null 或 System.String.Empty 字符串
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNotNullOrEmpty(System.String)">
            <summary>
            指定字符串是否不为 null 或 非System.String.Empty 字符串
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            指定字符串是否为 null、空还是仅由空白字符组成
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            指定字符串是否为不为 null、空还是仅由非空白字符组成
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsIdentityCard(System.String)">
            <summary>
            是否是身份证号
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ReplaceSQL(System.String)">
            <summary>
            防止SQL注入.
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsQuery(System.String)">
            <summary>
            是否是参数
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsJson(System.String)">
            <summary>
            是否是Json
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsXml(System.String)">
            <summary>
            是否是Xml
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsIndexer(System.String)">
            <summary>
            是否是属性索引器
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsBankCardNo(System.String)">
            <summary>
            是否是银行卡号
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IndexOfX(System.String,System.String)">
            <summary>
            扩展String IndexOf
            </summary>
            <param name="_">字符串</param>
            <param name="value">子字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.LastIndexOfX(System.String,System.String)">
            <summary>
            扩展String LastIndexOf
            </summary>
            <param name="_">字符串</param>
            <param name="value">子字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SubstringX(System.String,System.Int32,System.Int32)">
            <summary>
            扩展String Substring
            </summary>
            <param name="_">字符串</param>
            <param name="start">开始位置</param>
            <param name="length">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.SubstringX(System.String,System.Int32)">
            <summary>
            扩展String Substring
            </summary>
            <param name="_">字符串</param>
            <param name="start">开始位置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ReplaceX(System.String,System.String,System.String)">
            <summary>
            扩展String Replace
            </summary>
            <param name="_">字符串</param>
            <param name="oldValue">子字符串</param>
            <param name="newValue">替换后子符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.IsClosure(System.String)">
            <summary>
            字符串是否闭合
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.ToXml``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            对象转XML
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="t">对象</param>
            <param name="encode">编码</param>
            <param name="removeNamespaces">是否移除命名空间</param>
            <param name="removeXmlDeclaration">是否移除XML声明</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.EntityToXml``1(``0,System.Text.Encoding,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            对象转XML
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="t">对象</param>
            <param name="encoding">编码</param>
            <param name="OmitXmlDeclaration">是否忽略XML声明</param>
            <param name="OmitEmptyNode">是否忽略空节点</param>
            <param name="OmitNamespace">是否忽略命名空间</param>
            <param name="OmitComment">是否忽略注释</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.XmlToObject``1(System.String,System.String)">
            <summary>
            XML转对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="xml">XML数据</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.XmlToObject(System.String,System.Type)">
            <summary>
            XML转对象
            </summary>
            <param name="xml">XML数据</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.XmlToEntity``1(System.String)">
            <summary>
            XML转对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xml">XML数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.PrototypeHelper.XmlToEntity(System.String,System.Type)">
            <summary>
            XML转对象
            </summary>
            <param name="xml">XML数据</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Attributes.ViewAttribute">
            <summary>
            数据库视图模型
            </summary>
        </member>
        <member name="M:XiaoFeng.Attributes.ViewAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Attributes.ViewAttribute.#ctor(System.String,System.String)">
            <summary>
            设置属性
            </summary>
            <param name="name">名称</param>
            <param name="definition">内容</param>
        </member>
        <member name="P:XiaoFeng.Attributes.ViewAttribute.Name">
            <summary>
            视图名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Attributes.ViewAttribute.Definition">
            <summary>
            视图内容
            </summary>
        </member>
        <member name="T:XiaoFeng.Cache.BaseCache">
            <summary>
            缓存 基类
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.BaseCache.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.BaseCache.Config">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="F:XiaoFeng.Cache.BaseCache.CacheKey">
            <summary>
            缓存KEY
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.BaseCache.GetValue``1(``0,System.Boolean@)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">值</param>
            <param name="isValue">是否是值类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.BaseCache.GetValue``1(``0)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.BaseCache.SetValue(System.String,System.String)">
            <summary>
            设置值
            </summary>
            <param name="value">值</param>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.CacheFactory">
            <summary>
            缓存工厂
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheFactory.Create(XiaoFeng.CacheType)">
            <summary>
            创建实例
            </summary>
            <param name="cacheType">缓存类型</param>
            <returns>缓存实例</returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheFactory.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.CacheHelper">
            <summary>
            缓存操作类
            Version : V 1.1
            Create Date : 2016-12-24
            Author : Jacky
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.#cctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheHelper.Config">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="F:XiaoFeng.Cache.CacheHelper._Cache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheHelper.Cache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheHelper.DataList">
            <summary>
            缓存列表
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Get(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <returns>指定的缓存项</returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Get``1(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">用于引用该对象的缓存键</param>
            <returns>指定的缓存项</returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Set(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <param name="value">要插入缓存中的对象</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Set(System.String,System.Object,System.Int64)">
            <summary>
            设置数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <param name="value">要插入缓存中的对象</param>
            <param name="timeout">超时时长 单位毫秒</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <param name="value">要插入缓存中的对象</param>
            <param name="timeout">最后一次访问所插入对象时与该对象到期时之间的时间间隔。 如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并被从缓存中移除。如果使用可调到期，则 absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Set(System.String,System.Object,System.String)">
            <summary>
            设置数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <param name="value">要插入缓存中的对象</param>
            <param name="path">文件路径或目录</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Set(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <param name="value">要插入缓存中的对象</param>
            <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间。 要避免可能的本地时间问题（例如从标准时间改为夏时制），请使用 System.DateTime.UtcNow，而不是 System.DateTime.Now 作为此参数值。 如果使用绝对到期，则 slidingExpiration 参数必须为 System.Web.Caching.Cache.NoSlidingExpiration。</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔。 如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并被从缓存中移除。如果使用可调到期，则 absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Set(System.String,System.Object,System.DateTime)">
            <summary>
            设置数据缓存
            </summary>
            <param name="key">用于引用该对象的缓存键</param>
            <param name="value">要插入缓存中的对象</param>
            <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间。 要避免可能的本地时间问题（例如从标准时间改为夏时制），请使用 System.DateTime.UtcNow，而不是 System.DateTime.Now 作为此参数值。 如果使用绝对到期，则 slidingExpiration 参数必须为 System.Web.Caching.Cache.NoSlidingExpiration。</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Remove(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
            <param name="key">要移除的缓存项的 System.String 标识符。</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheHelper.Clear">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:XiaoFeng.Cache.CacheData">
            <summary>
            缓存数据操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.#ctor(System.String,System.Object)">
            <summary>
            设置缓存数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.#ctor(System.String,System.Object,System.Int64)">
            <summary>
            设置缓存数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheTime">超时时间 单位为毫秒</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheData.Key">
            <summary>
            缓存Key值
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheData.Data">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Set(System.String,System.Object,System.Int64)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheTime">过期时间 单位为毫秒</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Set(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Contains(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Get(System.String)">
            <summary>
            获取缓存值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Get``1(System.String)">
            <summary>
            获取缓存值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XiaoFeng.Cache.CacheData.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:XiaoFeng.Cache.CacheModel">
            <summary>
            缓存数据模型
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheModel.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.ExpireTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.ExpiresIn">
            <summary>
            缓存时长
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.IsSliding">
            <summary>
            是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.Path">
            <summary>
            关联文件
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.ObjectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheModel.Value">
            <summary>
            缓存值
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.CacheModel.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.CacheModel.Parse(System.String)">
            <summary>
            转换类型
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.FileCache">
            <summary>
            文件缓存
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Clear">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Set(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Set(System.String,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Set(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Set(System.String,System.Object,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.Set(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.FileCache.GetKey(System.String)">
            <summary>
            获取key
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.ICacheManager">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Get(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Get``1(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Set(System.String,System.Object,System.Int64)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheTime">过期时间 单位为毫秒</param>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Set(System.String,System.Object)">
            <summary>
            设置缓存数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Contains(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XiaoFeng.Cache.ICacheManager.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:XiaoFeng.Cache.IMemoryCacheX">
            <summary>
            接口说明
            Version : 1.0.0
            CrateTime : 2020-12-18 上午 12:57:54
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.IMemoryCacheX.Set(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.IMemoryCacheX.Set(System.String,System.Object,System.String)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="path">缓存文件</param>
        </member>
        <member name="M:XiaoFeng.Cache.IMemoryCacheX.Set(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.MemoryCacheManage">
            <summary>
            内存缓存
            Version : 1.0.0
            CrateTime : 2020-12-17 下午 10:30:53
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.Cache.MemoryCacheManage.Data">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="F:XiaoFeng.Cache.MemoryCacheManage.Providers">
            <summary>
            监控目录
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Contains(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Clear">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.GetCacheKeys">
            <summary>
            获取所有缓存键
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Set(System.String,System.Object,System.String,System.TimeSpan,System.Boolean)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="path">缓存文件</param>
            <param name="expiresIn">缓存时长 单位为秒</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Set(System.String,System.Object,System.String)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="path">缓存文件</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Set(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Set(System.String,System.Object,System.Int64)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="cacheTime">缓存时长 单位为秒</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheManage.Set(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.FileProvider">
            <summary>
            文件监控
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.FileProvider.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.FileProvider.Provider">
            <summary>
            监控目录
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.FileProvider.ChangeToken">
            <summary>
            文件列表
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.FileProvider.Add(System.String,System.IDisposable)">
            <summary>
            添加监控
            </summary>
            <param name="key">key</param>
            <param name="disposable">监控文件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.FileProvider.Remove(System.String)">
            <summary>
            移除监控文件
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.CacheValue">
            <summary>
            缓存值
            </summary>
        </member>
        <member name="F:XiaoFeng.Cache.CacheValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheValue.ExpireTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheValue.Peroid">
            <summary>
            缓存间隔
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheValue.IsSliding">
            <summary>
            是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.CacheValue.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="T:XiaoFeng.Cache.MemoryCacheHelper">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:XiaoFeng.Cache.MemoryCacheHelper.Cache">
            <summary>
            缓存操作
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Contains(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Set(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Set(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Set(System.String,System.Object,System.Int64)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="cacheTime">缓存时长 单位为秒</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Set(System.String,System.Object,System.String,System.TimeSpan,System.Boolean)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="path">缓存文件</param>
            <param name="expiresIn">缓存时长 单位为秒</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Set(System.String,System.Object,System.String)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="path">缓存文件</param>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.Clear">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.RemoveCacheRegex(System.String)">
            <summary>
            删除匹配到的缓存
            </summary>
            <param name="pattern">正则匹配</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.SearchCacheRegex(System.String)">
            <summary>
            搜索 匹配到的缓存
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cache.MemoryCacheHelper.GetCacheKeys">
            <summary>
            获取所有缓存键
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cache.RedisCache">
            <summary>
            Redis缓存操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Cache.RedisCache.Redis">
            <summary>
            Redis
            </summary>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Clear">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Set(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Set(System.String,System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Set(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Set(System.String,System.Object,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cache.RedisCache.Set(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:XiaoFeng.Collections.ConnectionPool">
            <summary>
            数据库连接池
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.#ctor(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            设置连接
            </summary>
            <param name="factory">驱动工厂</param>
            <param name="connectionString">连接串</param>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置连接
            </summary>
            <param name="config">连接配置</param>
        </member>
        <member name="P:XiaoFeng.Collections.ConnectionPool.ConnectionString">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ConnectionPool.Factory">
            <summary>
            驱动工厂
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.OnCreate">
            <summary>
            创建实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.Get">
            <summary>
            借资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.OnGet(XiaoFeng.Collections.PoolItem{System.Data.Common.DbConnection})">
            <summary>
            是否可用
            </summary>
            <param name="value">资源对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.OnPut(XiaoFeng.Collections.PoolItem{System.Data.Common.DbConnection})">
            <summary>
            是否可用
            </summary>
            <param name="value">资源对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.Execute``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            借一个连接去执行
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.Execute``1(System.Func{System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory,``0})">
            <summary>
            借一个连接去执行
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.OnDispose(System.Data.Common.DbConnection)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Collections.ConnectionPool.Close(System.Data.Common.DbConnection)">
            <summary>
            关闭资源
            </summary>
            <param name="obj">资源</param>
        </member>
        <member name="T:XiaoFeng.Collections.IPool`1">
            <summary>
            对象池接口
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.Max">
            <summary>
            对象池最大
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.Min">
            <summary>
            对象池最小
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.IdleTime">
            <summary>
            空闲多长时间关闭资源 单位为秒 0为不清除
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.TimeOut">
            <summary>
            多长时间检查一次 单位为秒 0为不定时检查
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.TotalCount">
            <summary>
            总请求数
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.FreeCount">
            <summary>
            空闲数
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.BusyCount">
            <summary>
            工作数
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.IPool`1.Job">
            <summary>
            定时作业
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.IPool`1.Get">
            <summary>借出</summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.IPool`1.Put(XiaoFeng.Collections.PoolItem{`0})">
            <summary>
            归还
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="M:XiaoFeng.Collections.IPool`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.IPool`1.OnDispose(`0)">
            <summary>
            释放对象
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="M:XiaoFeng.Collections.IPool`1.Close(`0)">
            <summary>
            关闭资源
            </summary>
            <param name="obj">资源</param>
        </member>
        <member name="T:XiaoFeng.Collections.ObjectPool`1">
            <summary>
            资源池 支持空闲释放
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.Max">
            <summary>
            最大数量 0为不限
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.Min">
            <summary>
            最小数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.IdleTime">
            <summary>
            空闲多长时间关闭资源 单位为秒 0为不清除
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.TimeOut">
            <summary>
            多长时间检查一次 单位为秒 0为不定时检查
            </summary>
        </member>
        <member name="F:XiaoFeng.Collections.ObjectPool`1.FreeItems">
            <summary>
            空闲池
            </summary>
        </member>
        <member name="F:XiaoFeng.Collections.ObjectPool`1.BusyItems">
            <summary>
            工作池
            </summary>
        </member>
        <member name="F:XiaoFeng.Collections.ObjectPool`1._TotalCount">
            <summary>
            总请求数
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.TotalCount">
            <summary>
            总请求数
            </summary>
        </member>
        <member name="F:XiaoFeng.Collections.ObjectPool`1._FreeCount">
            <summary>
            空闲数
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.FreeCount">
            <summary>
            空闲数
            </summary>
        </member>
        <member name="F:XiaoFeng.Collections.ObjectPool`1._BusyCount">
            <summary>
            工作数
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.BusyCount">
            <summary>
            工作数
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.OnGet(XiaoFeng.Collections.PoolItem{`0})">
            <summary>借出时是否可用</summary>
            <param name="value">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.OnPut(XiaoFeng.Collections.PoolItem{`0})">
            <summary>归还时是否可用</summary>
            <param name="value">对象</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Collections.ObjectPool`1.Job">
            <summary>
            定时作业
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.OnCreate">
            <summary>
            创建对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.Clear">
            <summary>
            清空对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.OnDispose(`0)">
            <summary>
            释放对象
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.Get">
            <summary>
            借出资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.Put(XiaoFeng.Collections.PoolItem{`0})">
            <summary>
            归还资源
            </summary>
            <param name="value">资源</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.Close(`0)">
            <summary>
            关闭资源
            </summary>
            <param name="obj">资源</param>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.Work(XiaoFeng.Threading.IJob)">
            <summary>
            定时清理过期连接
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Collections.ObjectPool`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:XiaoFeng.Collections.PoolItem`1">
            <summary>
            连接池子类
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.PoolItem`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.PoolItem`1.#ctor(`0)">
            <summary>
            设置值
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="P:XiaoFeng.Collections.PoolItem`1.ID">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.PoolItem`1.Value">
            <summary>
            对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.PoolItem`1.LastTime">
            <summary>
            最后使用时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.PoolItem`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.PoolItem`1.IsWork">
            <summary>
            是否能用
            </summary>
        </member>
        <member name="T:XiaoFeng.Collections.SocketPool">
            <summary>
            Socket连接池
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.AddressFamily">
            <summary>
            寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.SocketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.ProtocolType">
            <summary>
            支持协议
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.SendTimeout">
            <summary>
            发送超时
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.ReceiveTimeout">
            <summary>
            接收超时
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.MemorySize">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.Host">
            <summary>
            通讯地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Collections.SocketPool.Port">
            <summary>
            通讯端口
            </summary>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.OnCreate">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.Get">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.OnGet(XiaoFeng.Collections.PoolItem{System.Net.Sockets.Socket})">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.OnPut(XiaoFeng.Collections.PoolItem{System.Net.Sockets.Socket})">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.Close(System.Net.Sockets.Socket)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Collections.SocketPool.Execute(System.Action{System.Net.Sockets.NetworkStream},System.Action{System.Byte[]})">
            <summary>
            执行
            </summary>
            <param name="action"></param>
            <param name="callback"></param>
        </member>
        <member name="T:XiaoFeng.Common">
            <summary>
            功能操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Common.Encrypt(System.Object)">
            <summary>
            加密函数
            </summary>
            <param name="s">加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密函数
            </summary>
            <param name="s">加密字符串</param>
            <param name="Key">密钥</param>
            <param name="IV">向量</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密函数
            </summary>
            <param name="s">解密字符串</param>
            <param name="Key">密钥</param>
            <param name="IV">向量</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.Escape(System.String)">
            <summary>
            加密函数[对应javascript里面的escape]
            </summary>
            <param name="s">要加密的字符串</param>
            <returns>返回加过密的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Common.GetFormBodyString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取Body 字符串
            </summary>
            <param name="body">Body流</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.GetFormBodyString(System.Text.Encoding)">
            <summary>
            获取Body 字符串
            </summary>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.GetFormBodyString(System.IO.Stream)">
            <summary>
            获取Body 字符串
            </summary>
            <param name="body">Body流</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.GetFormBodyByte(System.IO.Stream)">
            <summary>
            获取Body流
            </summary>
            <param name="body">Body流</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Common.FormBody">
            <summary>
            获取Body流
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Disposable">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:XiaoFeng.Disposable.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Disposable.Dispose(System.Boolean)">
            <summary>
            释放托管
            </summary>
            <param name="disposing">状态</param>
        </member>
        <member name="M:XiaoFeng.Disposable.Dispose">
            <summary>
             添加此代码以正确实现可处置模式
            </summary>
        </member>
        <member name="M:XiaoFeng.Disposable.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.DisposableHelper">
            <summary>
            销毁助手扩展方法
            </summary>
        </member>
        <member name="M:XiaoFeng.DisposableHelper.TryDispose(System.Object)">
            <summary>尝试销毁对象，如果有<see cref="T:System.IDisposable"/>则调用</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Function">
            <summary>
            功能操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Function.Encrypt(System.Object)">
            <summary>
            加密函数
            </summary>
            <param name="s">加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Function.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密函数
            </summary>
            <param name="s">加密字符串</param>
            <param name="Key">密钥</param>
            <param name="IV">向量</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Function.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密函数
            </summary>
            <param name="s">解密字符串</param>
            <param name="Key">密钥</param>
            <param name="IV">向量</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Function.Escape(System.String)">
            <summary>
            加密函数[对应javascript里面的escape]
            </summary>
            <param name="s">要加密的字符串</param>
            <returns>返回加过密的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Function.GetIP4Address">
            <summary>
            获得IP4地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.IdentityCard">
            <summary>
            通过身份证号提取身份证信息
            </summary>
        </member>
        <member name="M:XiaoFeng.IdentityCard.#ctor(System.String)">
            <summary>
            身份证号
            </summary>
            <param name="cardNo"></param>
        </member>
        <member name="M:XiaoFeng.IdentityCard.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCard.Create">
            <summary>
            静态实例
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCard.CardNO">
            <summary>
            身份证号
            </summary>
        </member>
        <member name="F:XiaoFeng.IdentityCard.Errors">
            <summary>
            错误提示信息
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCard.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="M:XiaoFeng.IdentityCard.IsCardNumber(System.String)">
            <summary>
            验证是否是身份证号 success则验证通过
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IdentityCard.CreateCehckCode(System.String)">
            <summary>
            生成校验码
            </summary>
            <param name="CardCode">身份证号</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IdentityCard.GetCardData(System.String)">
            <summary>
            获取身份证信息
            </summary>
            <param name="cardNo">身份证号</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IdentityCard.CreateIdentityCardNumber(XiaoFeng.IdentityCardData)">
            <summary>
            生成身份证号
            </summary>
            <param name="data">输入数据</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.IdentityCardData">
            <summary>
            身份证数据
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.CardNO">
            <summary>
            身份证号
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.ProvinceID">
            <summary>
            省份ID
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.CityID">
            <summary>
            市ID
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.CountyAreaID">
            <summary>
            县区ID
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.Year">
            <summary>
            出生年份
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.Month">
            <summary>
            出生月份
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.Day">
            <summary>
            出生日
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.Date">
            <summary>
            出生日期
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:XiaoFeng.IdentityCardData.CheckCode">
            <summary>
            校验码
            </summary>
        </member>
        <member name="T:XiaoFeng.IEntityBase">
            <summary>
            最基础基类接口
            </summary>
        </member>
        <member name="E:XiaoFeng.IEntityBase.OnValueChange">
            <summary>
            委托事件
            </summary>
        </member>
        <member name="M:XiaoFeng.IEntityBase.RemoveAllValues(System.String)">
            <summary>
            移除值
            </summary>
            <param name="key">key值</param>
        </member>
        <member name="M:XiaoFeng.IEntityBase.SetAllValues(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
        </member>
        <member name="P:XiaoFeng.IEntityBase.Item(System.String)">
            <summary>
            通过字段名获取相应的值
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.IEntityBase.AllKeys">
            <summary>
            对象所有属性名集合
            </summary>
        </member>
        <member name="M:XiaoFeng.IEntityBase.GetDirty">
            <summary>
            获取脏数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IEntityBase.AddDirty(System.String)">
            <summary>
            添加脏数据
            </summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:XiaoFeng.IEntityBase.AddDirty(System.String,System.Object,System.Object)">
            <summary>
            添加脏数据
            </summary>
            <param name="fieldName">字段名</param>
            <param name="oldValue">老值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:XiaoFeng.IEntityBase.SetDirty(XiaoFeng.Model.DirtyCollection)">
            <summary>
            设置脏数据
            </summary>
            <param name="dirty">脏数据</param>
        </member>
        <member name="M:XiaoFeng.IEntityBase.ClearDirty(System.String)">
            <summary>
            清理脏数据 字段名为空则清空所有脏数据
            </summary>
        </member>
        <member name="M:XiaoFeng.IEntityBase.ContainsDirty(System.String)">
            <summary>
            是否存在于脏数据中
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.IPScaner">
            <summary>
            IP操作类
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.dataPath">
            <summary>
            数据库地址
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.ip">
            <summary>
            Host
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.country">
            <summary>
            所在城市
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.local">
            <summary>
            所在街道
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.firstStartIp">
            <summary>
            开始IP段
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.lastStartIp">
            <summary>
            结束IP段
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.objfs">
            <summary>
            数据流
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.startIp">
            <summary>
            开始IP段
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.endIp">
            <summary>
            结束IP段
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.countryFlag">
            <summary>
            城市标识
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.endIpOff">
            <summary>
            结束标识
            </summary>
        </member>
        <member name="F:XiaoFeng.IPScaner.errMsg">
            <summary>
            出错信息
            </summary>
        </member>
        <member name="M:XiaoFeng.IPScaner.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.IPScaner.#ctor(System.String,System.String)">
            <summary>
            有参构造器
            </summary>
            <param name="dataPath">数据库地址</param>
            <param name="ip">ip</param>
        </member>
        <member name="P:XiaoFeng.IPScaner.DataPath">
            <summary>
            数据库地址
            </summary>
        </member>
        <member name="P:XiaoFeng.IPScaner.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:XiaoFeng.IPScaner.Country">
            <summary>
            所在城市
            </summary>
        </member>
        <member name="P:XiaoFeng.IPScaner.Local">
            <summary>
            所在地区
            </summary>
        </member>
        <member name="P:XiaoFeng.IPScaner.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:XiaoFeng.IPScaner.ErrMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:XiaoFeng.IPScaner.QQwry">
            <summary>
            搜索匹配数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.IpToInt(System.String)">
            <summary>
            IP地址转换成Int数据
            </summary>
            <param name="ip">ip地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.IntToIP(System.Int64)">
            <summary>
            int转换成IP
            </summary>
            <param name="ip_Int">IP数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.GetStartIp(System.Int64)">
            <summary>
            获取起始IP范围
            </summary>
            <param name="recNO"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.GetEndIp">
            <summary>
            获取结束IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.GetCountry">
            <summary>
            获取国家/区域偏移量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.GetFlagStr(System.Int64)">
            <summary>
            获取国家/区域字符串
            </summary>
            <param name="offSet"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.GetStr">
            <summary>
            GetStr
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.IPLocation">
            <summary>
            获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.IPLocation(System.String)">
            <summary>
            获取IP地址
            </summary>
            <param name="ip">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IPScaner.IPLocation(System.String,System.String)">
            <summary>
            获取IP地址
            </summary>
            <param name="dataPath">数据库地址</param>
            <param name="ip">ip地址</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.OrderNumber">
            <summary>
            订单号生成类
            </summary>
        </member>
        <member name="M:XiaoFeng.OrderNumber.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.OrderNumber.OrderNumberLock">
            <summary>
            订单号共享锁
            </summary>
        </member>
        <member name="F:XiaoFeng.OrderNumber.Counter">
            <summary>
            订单号累加器
            </summary>
        </member>
        <member name="F:XiaoFeng.OrderNumber.OldTimer">
            <summary>
            原来秒数
            </summary>
        </member>
        <member name="F:XiaoFeng.OrderNumber.OldTime">
            <summary>
            老时间
            </summary>
        </member>
        <member name="F:XiaoFeng.OrderNumber.MaxCounter">
            <summary>
            订单号最大并发数
            </summary>
        </member>
        <member name="M:XiaoFeng.OrderNumber.GetTimeStamp">
            <summary>
            获取订单号
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.OrderNumber.GetDateTime(System.String)">
            <summary>
            获取订单号
            </summary>
            <param name="format">时间格式 如yyyyMMdd</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.PinYinUtil">
            <summary>
            汉字转拼音操作类
            </summary>
        </member>
        <member name="F:XiaoFeng.PinYinUtil.pinyinValues">
            <SUMMARY>
            包含字符 ASC 码的整形数组。
            </SUMMARY>
        </member>
        <member name="F:XiaoFeng.PinYinUtil.PinyinNames">
            <SUMMARY>
            包含汉字拼音的字符串数组。
            </SUMMARY>
        </member>
        <member name="M:XiaoFeng.PinYinUtil.CHSToPinyin(System.String,System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:XiaoFeng.PinYinUtil.CHSToPinyin(System.String,System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:XiaoFeng.PinYinUtil.CHSToPinyin(System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:XiaoFeng.PinYinUtil.CHSToPinyin(System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:XiaoFeng.PinYinUtil.GetFirstLetter(System.String)">
            <summary>
            提取首字母。兼容中英文
            </summary>
            <param name="chsStr">单个汉字或字母</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.PinYinUtil.CHSPhraseSpecial">
            <summary>
            设置或获取包含列外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="T:XiaoFeng.ResponseMessage`1">
            <summary>
            输出消息
            Version : 1.0
            Create Date : 2016-12-23
            Author : jacky
            Site : www.zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.#ctor(XiaoFeng.ResponseState,System.String,`0)">
            <summary>
            设置信息
            </summary>
            <param name="state">状态</param>
            <param name="message">信息</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.#ctor(XiaoFeng.ResponseState,`0,System.Int32,System.Object)">
            <summary>
            设置信息
            </summary>
            <param name="state">状态</param>
            <param name="data">数据</param>
            <param name="counts">条数</param>
            <param name="other">其它数据</param>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Data">
            <summary>
            数据 如果是DataTable 一定要有TableName值
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Other">
            <summary>
            备用数据字段
            </summary>
        </member>
        <member name="F:XiaoFeng.ResponseMessage`1._code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Counts">
            <summary>
            条数
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:XiaoFeng.ResponseMessage`1.Encoding">
            <summary>
            输出编码
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.ToJSON">
            <summary>
            输出JSON
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.ToXML">
            <summary>
            输出XML
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Success(XiaoFeng.WriteType)">
            <summary>
            输出成功
            </summary>
            <param name="writeType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Success(`0,XiaoFeng.WriteType)">
            <summary>
            输出成功
            </summary>
            <param name="data">数据</param>
            <param name="writeType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Error(XiaoFeng.WriteType)">
            <summary>
            输出错误
            </summary>
            <param name="writeType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Error(System.String,XiaoFeng.WriteType)">
            <summary>
            输出错误
            </summary>
            <param name="message">错误信息</param>
            <param name="writeType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Warning(XiaoFeng.WriteType)">
            <summary>
            输出警告
            </summary>
            <param name="WriteType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Warning(System.String,XiaoFeng.WriteType)">
            <summary>
            输出警告
            </summary>
            <param name="message">警告信息</param>
            <param name="writeType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Write(`0,XiaoFeng.WriteType)">
            <summary>
            输出信息
            </summary>
            <param name="data">数据</param>
            <param name="writeType">输出类型</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.Write(XiaoFeng.WriteType)">
            <summary>
            输出信息
            </summary>
            <param name="writeType">输出类型 默认 JSON ,XML,String</param>
        </member>
        <member name="M:XiaoFeng.ResponseMessage`1.GetData(XiaoFeng.WriteType)">
            <summary>
            返回序列化数据
            </summary>
            <param name="writeType">输出类型 默认 JSON ,XML,String</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.ResponseMessage">
            <summary>
            输出消息
            Version : 1.0
            Create Date : 2016-12-23
            Author : jacky
            Site : www.zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.ResponseMessage.#ctor(XiaoFeng.ResponseState,System.String,System.String)">
            <summary>
            构造器
            </summary>
            <param name="state">状态</param>
            <param name="message">消息</param>
            <param name="data">数据</param>
        </member>
        <member name="T:XiaoFeng.UserSession">
            <summary>
            会话对象
            </summary>
        </member>
        <member name="P:XiaoFeng.UserSession.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:XiaoFeng.UserSession.TokenName">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="P:XiaoFeng.UserSession.Id">
            <summary>
            获取用户会话ID
            </summary>
        </member>
        <member name="T:XiaoFeng.WeakReference`1">
            <summary>
            弱引用
            </summary>
            <typeparam name="T">目标引用对象类型</typeparam>
        </member>
        <member name="M:XiaoFeng.WeakReference`1.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:XiaoFeng.WeakReference`1.#ctor(`0)">
            <summary>
            实例化
            </summary>
            <param name="target">目标引用对象</param>
        </member>
        <member name="M:XiaoFeng.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="target">目标引用对象</param>
            <param name="trackResurrection"></param>
        </member>
        <member name="P:XiaoFeng.WeakReference`1.Target">
            <summary>
            目标引用对象
            </summary>
        </member>
        <member name="M:XiaoFeng.WeakReference`1.op_Implicit(XiaoFeng.WeakReference{`0})~`0">
            <summary>
            类型转换
            </summary>
            <param name="obj">弱引用对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.WeakReference`1.op_Implicit(`0)~XiaoFeng.WeakReference{`0}">
            <summary>
            类型转换
            </summary>
            <param name="target">目标引用对象</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.XVersion">
            <summary>
            表示程序集的版本号
            </summary>
        </member>
        <member name="M:XiaoFeng.XVersion.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.XVersion.#ctor(System.String)">
            <summary>
            设置版本号
            </summary>
            <param name="version">版本号</param>
        </member>
        <member name="M:XiaoFeng.XVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            设置版本号
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="build">内部版本号</param>
        </member>
        <member name="M:XiaoFeng.XVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置版本号
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">次版本号</param>
            <param name="build">内部版本号</param>
            <param name="revision">修订号</param>
        </member>
        <member name="F:XiaoFeng.XVersion.Rule">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:XiaoFeng.XVersion.Major">
            <summary>
            主版本号
            </summary>
        </member>
        <member name="P:XiaoFeng.XVersion.Minor">
            <summary>
            次版本号
            </summary>
        </member>
        <member name="P:XiaoFeng.XVersion.Build">
            <summary>
            内部版本号
            </summary>
        </member>
        <member name="P:XiaoFeng.XVersion.Revision">
            <summary>
            修订号
            </summary>
        </member>
        <member name="M:XiaoFeng.XVersion.Parse(System.String)">
            <summary>
            转换版本号
            </summary>
            <param name="v">版本号</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.TryParse(System.String,XiaoFeng.XVersion@)">
            <summary>
            强制转换
            </summary>
            <param name="_">版本</param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.CompareTo(System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.CompareTo(XiaoFeng.XVersion)">
            <summary>
            比较
            </summary>
            <param name="other">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.Equals(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            相等
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.GetHashCode(XiaoFeng.XVersion)">
            <summary>
            获取 HashCode
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_Equality(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            相等
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_Inequality(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            不相等
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_GreaterThan(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            大于
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_GreaterThanOrEqual(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            大于等于
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_LessThanOrEqual(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            小于等于
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_LessThan(XiaoFeng.XVersion,XiaoFeng.XVersion)">
            <summary>
            小于
            </summary>
            <param name="v1">第一个对象</param>
            <param name="v2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.op_Explicit(XiaoFeng.XVersion)~System.String">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.XVersion.op_Implicit(System.String)~XiaoFeng.XVersion">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.XVersion.ToString">
            <summary>
            重写转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.Equals(System.Object)">
            <summary>
            重写相等
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.GetHashCode">
            <summary>
            获取 HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XVersion.Equals(XiaoFeng.XVersion)">
            <summary>
            相等
            </summary>
            <param name="other">对象</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Config.CacheConfig">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.CacheConfig.CacheKey">
            <summary>
            缓存Key
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.CacheConfig.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.CacheConfig.CachePath">
            <summary>
            缓存路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.CacheConfig.ConnectionConfig">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.ConfigFileAttribute">
            <summary>
            配置文件属性
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigFileAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigFileAttribute.#ctor(System.String)">
            <summary>
            设置配置文件名
            </summary>
            <param name="fileName">配置文件名</param>
        </member>
        <member name="M:XiaoFeng.Config.ConfigFileAttribute.#ctor(System.String,System.Int32)">
            <summary>
            设置配置
            </summary>
            <param name="fileName">配置文件名</param>
            <param name="timeOut">超时时间 0为永久 单位为秒</param>
        </member>
        <member name="M:XiaoFeng.Config.ConfigFileAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            设置配置
            </summary>
            <param name="fileName">配置文件名</param>
            <param name="timeOut">超时时间 0为永久 单位为秒</param>
            <param name="cacheKey">缓存Key</param>
        </member>
        <member name="M:XiaoFeng.Config.ConfigFileAttribute.#ctor(System.String,System.Int32,System.String,XiaoFeng.ConfigFormat)">
            <summary>
            设置配置
            </summary>
            <param name="fileName">文件名</param>
            <param name="timeOut">超时时间 0为永久 单位为秒</param>
            <param name="cacheKey">缓存Key</param>
            <param name="format">配置格式 默认为Json</param>
        </member>
        <member name="F:XiaoFeng.Config.ConfigFileAttribute._fileName">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ConfigFileAttribute.FileName">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ConfigFileAttribute.TimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ConfigFileAttribute.CacheKey">
            <summary>
            缓存Key
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ConfigFileAttribute.Format">
            <summary>
            配置格式
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.ConfigSet`1">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.#ctor(System.String)">
            <summary>
            设置配置文件名
            </summary>
            <param name="fileName">配置文件名</param>
        </member>
        <member name="P:XiaoFeng.Config.ConfigSet`1.ConfigFileAttribute">
            <summary>
            配置文件属性
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ConfigSet`1.EncryptFile">
            <summary>
            是否加密文件
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ConfigSet`1.Current">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.Get">
            <summary>
            读取最新的配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.GetEntity(System.Func{`0,System.Boolean})">
            <summary>
            获取配置
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.GetEntities(System.Func{`0,System.Boolean})">
            <summary>
            获取数据列表
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.ReadContent">
            <summary>
            读取内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.Get(System.Boolean)">
            <summary>
            读取数据
            </summary>
            <param name="reload">是否强制从文件中读取 默认否</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.Save(System.Boolean,System.Boolean)">
            <summary>
            保存内容
            </summary>
            <param name="indented">是否格式化</param>
            <param name="comment">是否带注释说明</param>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.OpenFile(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="path">文件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSet`1.GetPrimaryKey">
            <summary>
            获取主键
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Config.ConfigSets`1">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSets`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSets`1.#ctor(System.String)">
            <summary>
            设置路径
            </summary>
            <param name="fileName">路径</param>
        </member>
        <member name="P:XiaoFeng.Config.ConfigSets`1.List">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSets`1.GetEntity(System.Func{`0,System.Boolean})">
            <summary>
            获取配置
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSets`1.GetEntities(System.Func{`0,System.Boolean})">
            <summary>
            获取数据列表
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSets`1.Get(System.Boolean)">
            <summary>
            获取数据
            </summary>
            <param name="reLoad">强制重新加载</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.ConfigSets`1.Save(System.Boolean,System.Boolean)">
            <summary>
            保存
            </summary>
            <param name="indented">是否格式化</param>
            <param name="comment">是否带注释说明</param>
        </member>
        <member name="T:XiaoFeng.Config.ContentTypeMapping">
            <summary>
            文件MIME
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ContentTypeMapping.Mimes">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.Mime">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Mime.Ext">
            <summary>
            后缀名
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Mime.Value">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.DataBase">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.#ctor(System.String)">
            <summary>
            设置配置文件名
            </summary>
            <param name="fileName">配置文件名</param>
        </member>
        <member name="P:XiaoFeng.Config.DataBase.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.DataBase.Item(System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Get(System.String)">
            <summary>
            获取数据库配置
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.First(System.String)">
            <summary>
            第一个数据库配置
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Get(System.Boolean)">
            <summary>
            获取数据
            </summary>
            <param name="reload">是否强制从文件中读取 默认否</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.ReadContent">
            <summary>
            读取配置文件内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Save(System.Boolean,System.Boolean)">
            <summary>
            保存配置文件
            </summary>
            <param name="indented">是否格式化</param>
            <param name="comment">是否带注释说明</param>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Set(System.String,System.Int32,XiaoFeng.Data.ConnectionConfig)">
            <summary>
            更新配置
            <para>Set("key", 1, null)则为删除此节点</para>
            <para>Set("key", 1, config)则为更新此节点 不存在则添加当前节点</para>
            </summary>
            <param name="key">key</param>
            <param name="index">索引 -1是删除当前节点</param>
            <param name="config">配置 如果为null则为删除此节点</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Add(System.String,XiaoFeng.Data.ConnectionConfig[])">
            <summary>
            添加配置节点
            </summary>
            <param name="key">key</param>
            <param name="configs">配置数据</param>
        </member>
        <member name="M:XiaoFeng.Config.DataBase.Remove(System.String,System.Int32)">
            <summary>
            移除节点
            </summary>
            <param name="key">key</param>
            <param name="index">索引 -1是删除当前key下所有节点 默认为-1</param>
        </member>
        <member name="T:XiaoFeng.Config.IConfigSet`1">
            <summary>
            系统配置接口
            </summary>
            <typeparam name="TConfig">结构</typeparam>
        </member>
        <member name="M:XiaoFeng.Config.IConfigSet`1.Get(System.Boolean)">
            <summary>
            读取数据
            </summary>
            <param name="reload">是否强制从文件中读取 默认否</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Config.IConfigSet">
            <summary>
            配置接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IConfigSet.ConfigFileAttribute">
            <summary>
            配置文件属性
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.IConfigSet.ReadContent">
            <summary>
            读取内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.IConfigSet.Save(System.Boolean,System.Boolean)">
            <summary>
            保存内容
            </summary>
            <param name="indented">是否格式化</param>
            <param name="comment">是否带注释说明</param>
        </member>
        <member name="T:XiaoFeng.Config.ISetting">
            <summary>
            XiaoFeng配置接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.Debug">
            <summary>
            是否启用调试
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.Error">
            <summary>
            错误信息是否展示到页面 2抛出异常 1展示 0转向
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.MaxWorkerThreads">
            <summary>
            最大线程数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.DataEncrypt">
            <summary>
            是否启用数据加密
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.DataKey">
            <summary>
            加密数据key
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.ServerLogging">
            <summary>
            是否开启IIS请求日志
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.IsIntercept">
            <summary>
            是否拦截
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.ISetting.SQLInjection">
            <summary>
            SQL注入串
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.IUpload">
            <summary>
            上传配置接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.IsOpen">
            <summary>
            是否开启上传
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.IsCheckTrojan">
            <summary>
            是否检测文件木马
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.TrojanFeature">
            <summary>
            木马特征
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.MaxLength">
            <summary>
            最大允许上传大小 单位为B 默认为10M
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.FileNameFormat">
            <summary>
            生成文件名格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.UploadPath">
            <summary>
            上传目录
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.Default">
            <summary>
            默认上传类型配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.Data">
            <summary>
            上传类型配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.IsDomain">
            <summary>
            上传路径是否带域名
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.IUpload.Domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.IUpload.GetDomainPath(System.String)">
            <summary>
            获取带域名路径
            </summary>
            <param name="basePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.IUpload.GetNotDomainPath(System.String)">
            <summary>
            获取不带域名路径
            </summary>
            <param name="domainPath">带域名路径</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Config.LoggerConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.LoggerConfig.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.OpenLog">
            <summary>
            开启日志
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.StorageDays">
            <summary>
            日志存储天数
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.Path">
            <summary>
            日志存储路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.FileLength">
            <summary>
            单文件最大内容长度 单位字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Config.LoggerConfig._MaxThreads">
            <summary>
            最大线程数
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.MaxThreads">
            <summary>
            最大线程数
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.ConsoleFlags">
            <summary>
            输出控制台标识
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.StorageType">
            <summary>
            存储类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.ConnectionConfig">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.InsertSql">
            <summary>
            插入SQL 数据标识 日志类型 {LogType} 日志消息 {Message} 日志错误ID {ErrorID}
            错误堆栈 {StackTrace} 堆栈跟踪 {Tracking} 错误源 {DataSource} 类名 {ClassName} 方法名 {FunctionName} 访问地址 {RequestUrl} 日志时间 {AddTime}
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.Fields">
            <summary>
            记录信息字段 不填是记录所有 
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.LoggerConfig.MessageType">
            <summary>
            消息类型展示
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.Setting">
            <summary>
            XiaoFeng总配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.Setting.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.Setting.#ctor(System.String)">
            <summary>
            设置配置文件名
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:XiaoFeng.Config.Setting.Debug">
            <summary>
            是否启用调试
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.Error">
            <summary>
            错误信息是否展示到页面 2抛出异常 1展示 0转向
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.MaxWorkerThreads">
            <summary>
            最大线程数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.IdleSeconds">
            <summary>
            消费日志空闲时长
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.DataEncrypt">
            <summary>
            是否启用数据加密
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.DataKey">
            <summary>
            加密数据key
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.ServerLogging">
            <summary>
            是否开启请求日志
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.IsIntercept">
            <summary>
            是否拦截
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Setting.SQLInjection">
            <summary>
            SQL注入串
            </summary>
        </member>
        <member name="T:XiaoFeng.Config.Upload">
            <summary>
            上传配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.Upload.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.Upload.#ctor(System.String)">
            <summary>
            设置配置文件路径
            </summary>
            <param name="dataPath">配置文件路径</param>
        </member>
        <member name="P:XiaoFeng.Config.Upload.IsOpen">
            <summary>
            是否开启上传
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.IsCheckTrojan">
            <summary>
            是否检测文件木马
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.TrojanFeature">
            <summary>
            木马特征
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.MaxLength">
            <summary>
            最大允许上传大小 单位为B 默认为10M
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.FileNameFormat">
            <summary>
            生成文件名格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.UploadPath">
            <summary>
            上传目录
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.Default">
            <summary>
            默认上传类型配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.Data">
            <summary>
            上传类型配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.ImageCompressEnable">
            <summary>
            是否启用图片压缩
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.ImageCompressLength">
            <summary>
            图片压缩最长边限制
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.ImageCompressQuality">
            <summary>
            图片压缩质量
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.IsDomain">
            <summary>
            上传路径是否带域名
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.Upload.Domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="M:XiaoFeng.Config.Upload.GetDomainPath(System.String)">
            <summary>
            获取带域名路径
            </summary>
            <param name="basePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Config.Upload.GetNotDomainPath(System.String)">
            <summary>
            获取不带域名路径
            </summary>
            <param name="domainPath">带域名路径</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Config.UploadData">
            <summary>
            上传类型配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.UploadData.Path">
            <summary>
            存放文件夹名
            </summary>
        </member>
        <member name="P:XiaoFeng.Config.UploadData.Ext">
            <summary>
            后缀名 多个用逗号隔开
            </summary>
        </member>
        <member name="T:XiaoFeng.ContentTypes">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="M:XiaoFeng.ContentTypes.#cctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.ContentTypes.Get(System.String)">
            <summary>
            获取后缀名Mime数组
            </summary>
            <param name="ext">后缀名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ContentTypes.get(System.String)">
            <summary>
            获取后缀名Mime
            </summary>
            <param name="ext">后缀名</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.ContentTypes.Data">
            <summary>
            内容类型字典
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.AESEncryption">
            <summary>
            AES加密算法
            Version : 1.0.0
            CrateTime : 2020-12-22 下午 11:31:16
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.AESEncryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.BaseCrypto">
            <summary>
            加密基类
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Cryptography.BaseCrypto.Key">
            <summary>
            默认key
            </summary>
        </member>
        <member name="P:XiaoFeng.Cryptography.BaseCrypto.VectorKey">
            <summary>
            默认向量
            </summary>
        </member>
        <member name="P:XiaoFeng.Cryptography.BaseCrypto.Encoding">
            <summary>
            默认编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Cryptography.BaseCrypto.OutputMode">
            <summary>
            默认输出编码
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.GetBytes(System.String)">
            <summary>
            获取字节
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.GetString(System.Byte[])">
            <summary>
            获取字符串
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.GetKey(System.String,System.String)">
            <summary>
            获取key
            </summary>
            <param name="key">密钥</param>
            <param name="defaultKey">默认密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.GetKey(System.Byte[])">
            <summary>
            获取key
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.GetVector(System.String,System.String)">
            <summary>
            获取偏移量
            </summary>
            <param name="iv">偏移量</param>
            <param name="defaultIV">默认偏移量</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.GetVector(System.Byte[])">
            <summary>
            获取偏移量
            </summary>
            <param name="iv">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.OutputString(System.Byte[],XiaoFeng.Cryptography.OutputMode)">
            <summary>
            输出数据
            </summary>
            <param name="bytes">字节</param>
            <param name="mode">输出模式</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.InputBytes(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            输入数据
            </summary>
            <param name="data">数据</param>
            <param name="mode">输入模式</param>
            <returns>返回字节</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            密码方法
            </summary>
            <param name="data">原数据</param>
            <param name="slatKey">密钥</param>
            <param name="vector">向量</param>
            <param name="type">密码类型</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingMode">填充类型</param>
            <returns>密码</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Encrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Encrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Decrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Decrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Decrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Decrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseCrypto.Decrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="T:XiaoFeng.Cryptography.BaseSymmetricAlgorithm">
            <summary>
            基础类
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseSymmetricAlgorithm.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseSymmetricAlgorithm.#ctor(XiaoFeng.Cryptography.SymmetricAlgorithmType)">
            <summary>
            设置加密类型
            </summary>
            <param name="algorithmType">加密类型</param>
        </member>
        <member name="P:XiaoFeng.Cryptography.BaseSymmetricAlgorithm.AlgorithmType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseSymmetricAlgorithm.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.SymmetricAlgorithmType,XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">数据</param>
            <param name="slatKey">key</param>
            <param name="vector">向量</param>
            <param name="algorithmType">加密类型</param>
            <param name="type">加密解密类型</param>
            <param name="cipherMode">密码模式</param>
            <param name="paddingMode">填充类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.BaseSymmetricAlgorithm.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="T:XiaoFeng.Cryptography.DES3Encryption">
            <summary>
            DES3加密算法
            Version : 1.0.0
            CrateTime : 2020-12-23 上午 12:52:18
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.DES3Encryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.DESEncryption">
            <summary>
            DES加密算法
            Version : 1.0.0
            CrateTime : 2020-12-23 上午 12:42:36
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.DESEncryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.ELFEncryption">
            <summary>
            ELF加密算法
            Version : 1.0.0
            CrateTime : 2020-12-23 上午 12:55:29
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.ELFEncryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.ELFEncryption.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.ELFEncryption._Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ELFEncryption._Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data">字符串</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cryptography.CryptographyType">
            <summary>
            密码类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.CryptographyType.Encrypt">
            <summary>
            加密
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.CryptographyType.Decrypt">
            <summary>
            解密
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.HMACType">
            <summary>
            HMAC类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.RIPEMD160">
            <summary>
            RIPEMD160
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.HMACType.MACTripleDES">
            <summary>
            MACTripleDES
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.SHAType">
            <summary>
            SHA类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SHAType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SHAType.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SHAType.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SHAType.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SHAType.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.OutputMode">
            <summary>
            输出编码
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.OutputMode.Base64">
            <summary>
            Base64编码
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.OutputMode.Hex">
            <summary>
            Hex编码
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.SymmetricAlgorithmType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SymmetricAlgorithmType.AES">
            <summary>
            AES
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SymmetricAlgorithmType.DES">
            <summary>
            DES
            </summary>
        </member>
        <member name="F:XiaoFeng.Cryptography.SymmetricAlgorithmType.DES3">
            <summary>
            3DES
            </summary>
        </member>
        <member name="T:XiaoFeng.Cryptography.HMACEncryption">
            <summary>
            HMAC加密
            Version : 1.0.0
            CrateTime : 2020-12-23 下午 09:06:44
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encode(System.Byte[],System.Byte[],XiaoFeng.Cryptography.HMACType)">
            <summary>
            加密
            </summary>
            <param name="data">明文</param>
            <param name="slatKey">密钥</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encode(System.IO.Stream,XiaoFeng.Cryptography.HMACType)">
            <summary>
            加密
            </summary>
            <param name="inputStream">数据流</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.Byte[],System.String,XiaoFeng.Cryptography.HMACType)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="slatKey">密钥</param>
            <param name="type">加密类型</param>
            <returns>加密后的字节</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.Byte[],System.String,XiaoFeng.Cryptography.HMACType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文字节</param>
            <param name="slatKey">密钥</param>
            <param name="type">加密类型</param>
            <param name="outputMode">输出类型</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.String,System.String,XiaoFeng.Cryptography.HMACType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="slatKey">密钥</param>
            <param name="type">加密类型</param>
            <param name="outputMode">输出类型</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.HMACEncryption.Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="T:XiaoFeng.Cryptography.ICrypto">
            <summary>
            加密解密接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICrypto.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="data">明文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICrypto.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="data">密文</param>
            <param name="key">密钥</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cryptography.ICryptography">
            <summary>
            加密通用接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="slatKey">密钥</param>
            <param name="vectorKey">偏移量</param>
            <param name="outputMode">输出模式</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="slatKey">密钥</param>
            <param name="outputMode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="outputMode">输出模式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Decrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            解密方法
            </summary>
            <param name="data">密文</param>
            <param name="slatKey">密钥</param>
            <param name="vectorKey">偏移量</param>
            <param name="outputMode">输入模式</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Decrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            解密方法
            </summary>
            <param name="data">密文</param>
            <param name="slatKey">密钥</param>
            <param name="outputMode">输入模式</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Decrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            解密方法
            </summary>
            <param name="data">密文</param>
            <param name="outputMode">输入模式</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Encrypt(System.Byte[],System.String,System.String)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文字节</param>
            <param name="slatKey">密钥</param>
            <param name="vectorKey">偏移量</param>
            <returns>加密后的字节</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.ICryptography.Decrypt(System.Byte[],System.String,System.String)">
            <summary>
            解密方法
            </summary>
            <param name="data">密文字节</param>
            <param name="slatKey">密钥</param>
            <param name="vectorKey">偏移量</param>
            <returns>解密后的字节</returns>
        </member>
        <member name="T:XiaoFeng.Cryptography.MD5Encryption">
            <summary>
            MD5加密方法
            Version : 1.0.0
            CrateTime : 2020-12-23 上午 01:52:56
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.MD5Encryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.MD5Encryption.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.MD5Encryption.Encrypts(System.Byte[],System.String)">
            <summary>
            加密方法
            </summary>
            <param name="data">数据</param>
            <param name="slatKey">16和32</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.MD5Encryption.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.MD5Encryption.Encrypt(System.String,System.String)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="slatKey">16是16位长度 32是32位长度</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Cryptography.RC4Encryption">
            <summary>
            RC4加密算法
            Version : 1.0.0
            CrateTime : 2020-12-24 上午 12:13:19
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.Encrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.Decrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.Decrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RC4Encryption.GetKey(System.Byte[],System.Int32)">
            <summary>
            打乱密码
            </summary>
            <param name="pass">密码</param>
            <param name="kLen">密码箱长度</param>
            <returns>打乱后的密码</returns>
        </member>
        <member name="T:XiaoFeng.Cryptography.RSAEncryption">
            <summary>
            RSA加密算法
            Version : 1.0.0
            CrateTime : 2020-12-23 下午 10:51:40
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.CreateKeys">
            <summary>
            RSA产生密钥
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.CreateKey">
            <summary>
            RSA产生密钥
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Encode(System.Byte[],System.String,XiaoFeng.Cryptography.CryptographyType)">
            <summary>
            密码方法
            </summary>
            <param name="data">数据</param>
            <param name="key">密钥</param>
            <param name="cryptographyType">密码类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="data">数据</param>
            <param name="publicKey">公钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Encrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Decrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Decrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="data">密文</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.RSAEncryption.Decrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XiaoFeng.Cryptography.SHAEncryption">
            <summary>
            SHA加密
            Version : 1.0.0
            CrateTime : 2020-12-23 下午 09:06:44
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encode(System.Byte[],System.Byte[],System.Byte[],XiaoFeng.Cryptography.CryptographyType,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encode(System.Byte[],XiaoFeng.Cryptography.SHAType)">
            <summary>
            加密
            </summary>
            <param name="data">明文</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encode(System.IO.Stream,XiaoFeng.Cryptography.SHAType)">
            <summary>
            加密
            </summary>
            <param name="inputStream">数据流</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.Byte[],XiaoFeng.Cryptography.SHAType)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="type">加密类型</param>
            <returns>加密后的字节</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.Byte[],XiaoFeng.Cryptography.SHAType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文字节</param>
            <param name="type">加密类型</param>
            <param name="outputMode">输出类型</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.IO.Stream,XiaoFeng.Cryptography.SHAType)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="type">加密类型</param>
            <returns>加密后的字节</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.IO.Stream,XiaoFeng.Cryptography.SHAType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文字节</param>
            <param name="type">加密类型</param>
            <param name="outputMode">输出类型</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.String,XiaoFeng.Cryptography.SHAType,XiaoFeng.Cryptography.OutputMode)">
            <summary>
            加密方法
            </summary>
            <param name="data">明文</param>
            <param name="type">加密类型</param>
            <param name="outputMode">输出类型</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.Byte[],System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.String,System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.String,System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Cryptography.SHAEncryption.Encrypt(System.String,XiaoFeng.Cryptography.OutputMode)">
            <inheritdoc/>
        </member>
        <member name="T:XiaoFeng.Data.CommandList">
            <summary>
            命令列表类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.CommandList.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.CommandList.CommandText">
            <summary>
            CommandText
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.CommandList.CommandType">
            <summary>
            执行类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.CommandList.Parameters">
            <summary>
            储存参数
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.CommandList.ConnectionString">
            <summary>
            数据库连接字符
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.CommandList.ProviderType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.ConnectionConfig">
            <summary>
            数据库配置 Verstion : 1.0.0
            <para>Author : jacky</para>
            <para>Email : jacky@zhuovi.com</para>
            <para>QQ : 7092734</para>
            <para>Site : www.zhuovi.com</para>
            <para>Create Time : 2017/12/14 9:32:07</para>
            <para>Update Time : 2017/12/14 9:32:07</para>
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.ConnectionConfig.#ctor">
            <summary>
            无参构造器 默认设置为SqlServer数据库驱动
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.ConnectionConfig.#ctor(System.String,XiaoFeng.Data.DbProviderType,System.Boolean,System.Int32)">
            <summary>
            设置连接数据库
            </summary>
            <param name="connectionString">数据库连接字符串或config名称或索引</param>
            <param name="providerType">数据库类型</param>
            <param name="isTransaction">是否启用事务处理</param>
            <param name="commandTimeOut">执行超时时间</param>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.ProviderType">
             <summary>
            驱动类型
             </summary>
        </member>
        <member name="F:XiaoFeng.Data.ConnectionConfig._ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.ConnectionString">
             <summary>
            数据库连接字符串
             </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.IsTransaction">
            <summary>
            是否启用事务处理
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.CommandTimeOut">
            <summary>
            获取或设置在终止尝试执行命令并生成错误之前的等待时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.CacheTimeOut">
            <summary>
            缓存时长 单位为秒 0为永久缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.CacheType">
            <summary>
            缓存类型 0不缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.IsolationLevel">
            <summary>
            事务级别
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.IsPool">
            <summary>
            是否启用连接池
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.ConnectionConfig.MaxPool">
            <summary>
            应用池最大数量
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.ConnectionConfig.DataHelper">
            <summary>
            获取当前配置的通用数据库操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.ConnectionConfig.DbHelper">
            <summary>
            获取当前配置的数据库操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.DamengHelper">
            <summary>
            DamengHelper 类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.#ctor(System.String)">
            <summary>
            设置数据库连接字符串
            </summary>
            <param name="ConnectionString">数据库连接字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connectionConfig">数据库连接配置</param>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.GetTables">
            <summary>
            获取当前数据库所有用户表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.GetViews">
            <summary>
            获取当前数据库所有用户视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.GetProcedures">
            <summary>
            获取当前数据库所有用户存储过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.GetColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.GetDataColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.CreateTable(System.Type)">
            <summary>
            创建数据库表
            </summary>
            <param name="modelType">表model类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DamengHelper.CreateTable``1">
            <summary>
            创建数据库表 属性用 TableAttribute,ColumnAttribute
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.TableIndexModel">
            <summary>
            表索引模型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.TableIndexModel.OWNER">
            <summary>
            模式
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.TableIndexModel.CONSTRAINT_NAME">
            <summary>
            索引号
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.TableIndexModel.TABLE_NAME">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.TableIndexModel.CONSTRAINT_TYPE">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.TableIndexModel.COLUMN_NAME">
            <summary>
            列名
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataConfig">
            <summary>
            数据库转换操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataConfig.Map">
            <summary>
            映射对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.AddOrUpdate(XiaoFeng.Data.DataConfig.Item)">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key">项目名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.Get(System.String)">
            <summary>
            获取数据项目
            </summary>
            <param name="key">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.Clear">
            <summary>
            清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.ContainsKey(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.DataConfig.Item">
            <summary>
            子项类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.Item.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataConfig.Item.#ctor(System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            设置数据
            </summary>
            <param name="fromName">原来数据库连接串名</param>
            <param name="toName">指向数据库连接串名称</param>
            <param name="fromIndex">原来数据库连接串索引</param>
            <param name="toIndex">指向数据库连接串索引</param>
        </member>
        <member name="P:XiaoFeng.Data.DataConfig.Item.FromName">
            <summary>
            原来数据库连接串名
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataConfig.Item.FromIndex">
            <summary>
            原来数据库连接串索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataConfig.Item.ToName">
            <summary>
            指向数据库连接串名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataConfig.Item.ToIndex">
            <summary>
            指向数据库连接串索引
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataHelper">
            <summary>
            通用数据库操作类
            增加 加密连接字符功能
            增加 异步操作数据库功能
            Author:jacky
            QQ:7092734
            Version : V 6.0.1
            增加是否启用连接池
            6.0.1
            增加清空当前缓存
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.#ctor(XiaoFeng.Data.DbProviderType,System.String)">
            <summary>
            配置数据库
            </summary>
            <param name="provider">数据库驱动</param>
            <param name="connectionString">数据库连接串</param>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库配置
            </summary>
            <param name="connectionConfig">数据库配置</param>
        </member>
        <member name="F:XiaoFeng.Data.DataHelper.Lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataHelper.DataHelperPools">
            <summary>
            连接池
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.Pool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.IsCache">
            <summary>
            是否缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.CacheTimeOut">
            <summary>
            缓存时长
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.ErrorMessage">
            <summary>
            出错信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.CommandTimeOut">
            <summary>
            执行命令时超时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.ProviderType">
            <summary>
            数据驱动
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.IsTransaction">
            <summary>
            是否使用事务处理
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataHelper._Provider">
            <summary>
            驱动工厂
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.ProviderFactory">
            <summary>
            驱动工厂
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataHelper.ConnConfig">
            <summary>
            数据库连接串配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.CreateConn">
            <summary>
            创建Data数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.GetConn``1(System.Func{System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory,``0},System.Boolean)">
            <summary>
            获取连接对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="fun">方法</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory,``0},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String},System.Boolean)">
            <summary>
            执行Command
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fun">方法体</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory,``0},System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel,System.Boolean)">
            <summary>
            执行Command
            </summary>
            <param name="fun">方法体</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,``0},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String},System.Boolean)">
            <summary>
            执行Command
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fun">方法体</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,``0},System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel,System.Boolean)">
            <summary>
            执行SQL语句
            </summary>
            <param name="fun">方法体</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQuery(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQuery(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回执行SQL语句以及执行状态</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String},System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回执行SQL语句以及执行状态</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQueryAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Int32},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQueryAsync(System.String,System.Action{System.Int32},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalar(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句返回首行首列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalar(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句返回首行首列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalarAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Object},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalarAsync(System.String,System.Action{System.Object},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTable(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTable(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTableAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataTable},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTableAsync(System.String,System.Action{System.Data.DataTable},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSet(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSet(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSetAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataSet},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSetAsync(System.String,System.Action{System.Data.DataSet},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReader(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReader(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReaderAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Data.Common.DbDataReader},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调方法</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReaderAsync(System.String,System.Action{System.Data.Common.DbDataReader},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调方法</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.GetParamInfo(System.Data.Common.DbParameter[],System.String)">
            <summary>
            用输入的数据替换到储存过程中
            </summary>
            <param name="parameter">SQLParamerter</param>
            <param name="commandText">储存过程</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.MakeParam(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="parameterDirection">所属类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.MakeParam(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="paramType">参数类型</param>
            <param name="paramSize">参数大小</param>
            <param name="paramDirection">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.MakeParamCommand(System.String,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="param">Parameter数组</param>
            <param name="conn">数据连接对象</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.MakeParamCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">储存过程类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="conn">数据连接对象</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">解析命令字符串方式</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Int32})">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Int32},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">解析命令字符串方式</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调方法</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Int32},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">解析命令字符串方式</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调方法</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalarAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Object})">
            <summary>
            异步执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Object},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Object},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTable(System.String,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTableAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.DataTable},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataTableAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataTable},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSet(System.String,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSetAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.DataSet},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSetAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataSet},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteDataSetAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.DataSet})">
            <summary>
            异步执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callbak">回调</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReader(System.String,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="callback">正确回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Data.Common.DbDataReader},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.ExecuteReaderAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.GetData">
            <summary>
            获取数据库操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.GetCacheKey(System.String,System.Data.Common.DbParameter[])">
            <summary>
            获取CacheKey
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parameter">参数集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.SetCacheData(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">缓存key</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.GetCacheData(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <param name="key">缓存key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.GetCacheValue(System.String@)">
            <summary>
            获取SQL语句中的缓存关键字
            </summary>
            <param name="commandText">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Query``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="SQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.QueryList``1(System.String)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="SQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Dispose">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Dispose(System.Boolean)">
            <summary>
            回收资源
            </summary>
            <param name="disposing">是否释放</param>
        </member>
        <member name="M:XiaoFeng.Data.DataHelper.Finalize">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataHelperException">
            <summary>
            数据库操作类异常
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataHelperException.FlagName">
            <summary>
            标识名
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataHelperException.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataHelperException.#ctor(System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:XiaoFeng.Data.DataHelperException.#ctor(System.String,System.Exception)">
            <summary>
            设置错误信息及异常
            </summary>
            <param name="message">错误信息</param>
            <param name="exception">异常</param>
        </member>
        <member name="T:XiaoFeng.Data.DataMapping">
            <summary>
            数据库映射操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataMapping.Items">
            <summary>
            集合
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataMapping.TOKEN_KEY">
            <summary>
            Token key
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataMapping.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Add(XiaoFeng.Data.DataMapping.Item)">
            <summary>
            添加项
            </summary>
            <param name="item">子项</param>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Add(System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            添加数据
            </summary>
            <param name="fromName">原来数据库连接串名</param>
            <param name="toName">指向数据库连接串名称</param>
            <param name="fromIndex">原来数据库连接串索引</param>
            <param name="toIndex">指向数据库连接串索引</param>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Get">
            <summary>
            获取列表
            </summary>
            <returns>列表</returns>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Get(System.Int32)">
            <summary>
            获取子项
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Get(System.String,System.UInt32)">
            <summary>
            查找是否有映射
            </summary>
            <param name="fromName">原来名称</param>
            <param name="fromIndex">原来索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Contains(XiaoFeng.Data.DataMapping.Item)">
            <summary>
            是否存在
            </summary>
            <param name="item">子项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Remove(System.Int32)">
            <summary>
            移除子项
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Remove">
            <summary>
            清空
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataMapping.Item">
            <summary>
            子项类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Item.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataMapping.Item.#ctor(System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            设置数据
            </summary>
            <param name="fromName">原来数据库连接串名</param>
            <param name="toName">指向数据库连接串名称</param>
            <param name="fromIndex">原来数据库连接串索引</param>
            <param name="toIndex">指向数据库连接串索引</param>
        </member>
        <member name="P:XiaoFeng.Data.DataMapping.Item.FromName">
            <summary>
            原来数据库连接串名
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataMapping.Item.FromIndex">
            <summary>
            原来数据库连接串索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataMapping.Item.ToName">
            <summary>
            指向数据库连接串名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataMapping.Item.ToIndex">
            <summary>
            指向数据库连接串索引
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataType">
            <summary>
            数据库对应C#类型
            Verstion : 2.0.0
            Description:
            v 2.0.0
            增加了 MySql Oracle对应类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataType.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataType.#ctor(XiaoFeng.Data.DbProviderType)">
            <summary>
            设置数据库驱动
            </summary>
            <param name="providerType">数据库驱动</param>
        </member>
        <member name="P:XiaoFeng.Data.DataType.ProviderType">
            <summary>
            数据库驱动类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.Item(System.Type)">
            <summary>
            获取相关数据库类型
            </summary>
            <param name="dataType">C#数据类型</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Data.DataType.Item(System.String)">
            <summary>
            获取相关数据库类型
            </summary>
            <param name="dataType">C#数据类型</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.DataType._SQLServer">
            <summary>
            SQLServer 类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.SQLServer">
            <summary>
            SQLServer 类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._SQLServerToDotNet">
            <summary>
            SQLServer 类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.SQLServerToDotNet">
            <summary>
            SQLServer 类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._SQLite">
            <summary>
            SQLite 类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.SQLite">
            <summary>
            SQLite 类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._SQLiteToDotNet">
            <summary>
            SQLite 类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.SQLiteToDotNet">
            <summary>
            SQLite 类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._MySqlToDotNet">
            <summary>
            MySql
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.MySqlToDotNet">
            <summary>
            MySql
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._OracleToDotNet">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.OracleToDotNet">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._Dameng">
            <summary>
            达梦
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.Dameng">
            <summary>
            达梦
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataType._DamengToDotNet">
            <summary>
            达梦
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataType.DamengToDotNet">
            <summary>
            达梦
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataType.GetDotNetType(System.String)">
            <summary>
            获取DotNet类型
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.DataType.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DbProviderType">
            <summary> 
            数据库类型枚举 
            </summary> 
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.SqlServer">
            <summary>
            SqlClient Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.OleDb">
            <summary>
            OleDb Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.MySql">
            <summary>
            MySql Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.SQLite">
            <summary>
            SQLite Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Oracle">
            <summary>
            OracleClient Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.ODBC">
            <summary>
            Odbc Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Firebird">
            <summary>
            Firebird Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.PostgreSql">
            <summary>
            PostgreSql Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.DB2">
            <summary>
            IBM DB2 Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Informix">
            <summary>
            IBM Informix Data Provider
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.SqlServerCe">
            <summary>
            Microsoft SQL Server Compact Data Provider 4.0
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Redis">
            <summary>
            Redis
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Dameng">
            <summary>
            达梦
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Kingbase">
            <summary>
            人大金仓
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Shentong">
            <summary>
            神州通用
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DbProviderType.Highgo">
            <summary>
            瀚高
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DbTransactionX">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.#ctor(System.Data.Common.DbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="P:XiaoFeng.Data.DbTransactionX.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DbTransactionX.IsolationLevel">
            <inheritdoc/>
        </member>
        <member name="P:XiaoFeng.Data.DbTransactionX.IsOpen">
            <inheritdoc/>
        </member>
        <member name="F:XiaoFeng.Data.DbTransactionX._Transaction">
            <summary>
            事务
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DbTransactionX.Transaction">
            <inheritdoc/>
        </member>
        <member name="P:XiaoFeng.Data.DbTransactionX.Scope">
            <summary>
            事务
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.BeginTransaction">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.Commit">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.Rollback">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.EndTransaction">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.CreateCommand">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Data.DbTransactionX.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.Encrypt">
            <summary>
            加密数据库连接操作类
            Version : v 1.0.0
            Create Date : 2015-12-26
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.Encrypt.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.Encrypt._Key">
            <summary>
            当前KEY
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.Encrypt.Key">
            <summary>
            当前KEY
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.Encrypt.set(System.String)">
            <summary>
            加密
            </summary>
            <param name="AppName">数据库连接配置或名称或字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Encrypt.get(System.String)">
            <summary>
            获取原文
            </summary>
            <param name="data">密文数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Encrypt.EncryptHelper(System.String)">
            <summary>
            加密数据
            </summary>
            <param name="data">原文数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Encrypt.DecryptHelper(System.String)">
            <summary>
            解密数据
            </summary>
            <param name="data">密文数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Encrypt.GetKey">
            <summary>
            获取Key
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.IDataHelper">
            <summary>
            数据库操作接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.ConnConfig">
            <summary>
            数据库连接串配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.CacheTimeOut">
            <summary>
            缓存时长
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.ErrorMessage">
            <summary>
            出错信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.CommandTimeOut">
            <summary>
            执行命令时超时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.ProviderType">
            <summary>
            数据驱动
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.IsTransaction">
            <summary>
            是否使用事务处理
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDataHelper.Pool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.CreateConn">
            <summary>
            创建Data数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.GetConn``1(System.Func{System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory,``0},System.Boolean)">
            <summary>
            获取连接对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="fun">方法</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory,``0},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String},System.Boolean)">
            <summary>
            执行Command
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fun">方法体</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory,``0},System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel,System.Boolean)">
            <summary>
            执行Command
            </summary>
            <param name="fun">方法体</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,``0},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String},System.Boolean)">
            <summary>
            执行Command
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fun">方法体</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Execute``1(System.Func{System.Data.Common.DbCommand,``0},System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel,System.Boolean)">
            <summary>
            执行SQL语句
            </summary>
            <param name="fun">方法体</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="isCloseConn">是否关闭连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQuery(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQuery(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回执行SQL语句以及执行状态</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String},System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回执行SQL语句以及执行状态</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQueryAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Int32},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQueryAsync(System.String,System.Action{System.Int32},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalar(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句返回首行首列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalar(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句返回首行首列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalarAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Object},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalarAsync(System.String,System.Action{System.Object},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTable(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTable(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTableAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataTable},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTableAsync(System.String,System.Action{System.Data.DataTable},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataTable
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSet(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSet(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSetAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataSet},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSetAsync(System.String,System.Action{System.Data.DataSet},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL语句返回一个DataSet
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReader(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReader(System.String,System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReaderAsync(System.String,XiaoFeng.Data.IsolationLevel,System.Action{System.Data.Common.DbDataReader},System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调方法</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReaderAsync(System.String,System.Action{System.Data.Common.DbDataReader},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行SQL返回一个DataReader
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="callback">回调方法</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.GetParamInfo(System.Data.Common.DbParameter[],System.String)">
            <summary>
            用输入的数据替换到储存过程中
            </summary>
            <param name="parameter">SQLParamerter</param>
            <param name="commandText">储存过程</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.MakeParam(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="parameterDirection">所属类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.MakeParam(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="paramType">参数类型</param>
            <param name="paramSize">参数大小</param>
            <param name="paramDirection">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.MakeParamCommand(System.String,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="param">Parameter数组</param>
            <param name="conn">数据连接对象</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.MakeParamCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">储存过程类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="conn">数据连接对象</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">解析命令字符串方式</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQueryAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Int32})">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Int32},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">解析命令字符串方式</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调方法</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Int32},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">解析命令字符串方式</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调方法</param>
            <param name="error">错误回调</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalarAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Object})">
            <summary>
            异步执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Object},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteScalarAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Object},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数值</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns>返回首行首列数据</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTable(System.String,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTableAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.DataTable},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataTableAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataTable},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSet(System.String,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSetAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.DataSet},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSetAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Data.DataSet},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数集合</param>
            <param name="isolationLevel">事务级别</param>
            <param name="callback">回调</param>
            <param name="error">错误回调</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteDataSetAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.DataSet})">
            <summary>
            异步执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callbak">回调</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Exception,System.String},XiaoFeng.Data.IsolationLevel)">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="error">错误回调</param>
            <param name="isolationLevel">事务级别</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReader(System.String,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="callback">正确回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],XiaoFeng.Data.IsolationLevel,System.Action{System.Data.Common.DbDataReader},System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">命令类型</param>
            <param name="parameter">参数组</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.ExecuteReaderAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader},XiaoFeng.Data.IsolationLevel,System.Action{System.Exception,System.String})">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <param name="isolationLevel">事务级别</param>
            <param name="error">错误回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.GetData">
            <summary>
            获取数据库操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.GetCacheKey(System.String,System.Data.Common.DbParameter[])">
            <summary>
            获取CacheKey
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parameter">参数集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.SetCacheData(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.GetCacheData(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <param name="commandText">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.GetCacheValue(System.String@)">
            <summary>
            获取SQL语句中的缓存关键字
            </summary>
            <param name="commandText">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.Query``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="SQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDataHelper.QueryList``1(System.String)">
            <summary>
            获取对象列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="SQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.IDbHelper">
            <summary>
            获取数据库表,表字段接口
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/8/10 11:56:36
            Update Time : 2017/8/10 11:56:36
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDbHelper.ProviderType">
            <summary>
            驱动类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.GetTables">
            <summary>
            获取当前库的所有表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.GetViews">
            <summary>
            获取当前库的所有视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.GetProcedures">
            <summary>
            获取当前库的所有存储过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.GetColumns(System.String)">
            <summary>
            获取当前表的所有字段
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.GetDataColumns(System.String)">
            <summary>
            获取当前表的所有字段
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.CreateTable(System.Type)">
            <summary>
            创建表
            </summary>
            <param name="modelType">表model类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.CreateTable``1">
            <summary>
            创建表
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.IDbHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.IsolationLevel">
            <summary>
            指定事务的隔离级别。
            Version : 1.0.0
            CrateTime : 2021-02-22 下午 10:08:10
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.DbNull">
            <summary>
            空级别
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.Serializable">
            <summary>
            可以在事务期间读取可变数据，但是不可以修改，也不可以添加任何新数据。
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.RepeatableRead">
            <summary>
            可以在事务期间读取可变数据，但是不可以修改。 可以在事务期间添加新数据。
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.ReadCommitted">
            <summary>
            不可以在事务期间读取可变数据，但是可以修改。
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.ReadUncommitted">
            <summary>
            可以在事务期间读取和修改可变数据。
            </summary>  
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.Snapshot">
            <summary>
            可以读取可变数据。 在事务修改数据之前，它会验证在它最初读取数据之后另一个事务是否更改过这些数据。 如果数据已更新，则会引发错误。 这样，事务可获取先前提交的数据值。
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.Chaos">
            <summary>
             无法覆盖隔离级别更高的事务中的挂起的更改。
             </summary>   
        </member>
        <member name="F:XiaoFeng.Data.IsolationLevel.Unspecified">
            <summary>
            正在使用与指定隔离级别不同的隔离级别，但是无法确定该级别。 如果设置了此值，则会引发异常。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.IDbTransactionX">
            <summary>
            数据库操作事务接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDbTransactionX.IsolationLevel">
            <summary>
            事务级别
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDbTransactionX.Transaction">
            <summary>
            事务
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.IDbTransactionX.IsOpen">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDbTransactionX.BeginTransaction">
            <summary>
            创建事务
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDbTransactionX.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDbTransactionX.Rollback">
            <summary>
            回流事务
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDbTransactionX.EndTransaction">
            <summary>
            结束事务
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.IDbTransactionX.CreateCommand">
            <summary>
            创建命令
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.MySqlHelper">
            <summary>
            MySql 数据库操作类
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2018/06/29 09:11:53
            Update Time : 2018/06/29 09:11:53
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.#ctor(System.String)">
            <summary>
            设置数据库连接字符串
            </summary>
            <param name="ConnectionString">数据库连接字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connectionConfig">数据库连接配置</param>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.GetTables">
            <summary>
            获取当前数据库所有用户表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.GetViews">
            <summary>
            获取当前数据库所有用户视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.GetProcedures">
            <summary>
            获取当前数据库所有用户存储过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.GetColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.GetDataColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.CreateTable(System.Type)">
            <summary>
            创建数据库表
            </summary>
            <param name="modelType">表model类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.CreateTable``1">
            <summary>
            创建数据库表 属性用 TableAttribute,ColumnAttribute
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.MySqlHelper.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.Pool.DataHelper">
            <summary>
            数据库操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DataHelper.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库配置
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="T:XiaoFeng.Data.Pool.DbBase">
            <summary>
            数据库基础类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库配置
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.#ctor(System.String)">
            <summary>
            设置数据库配置
            </summary>
            <param name="ConnectionString">连接串</param>
        </member>
        <member name="F:XiaoFeng.Data.Pool.DbBase.obj">
            <summary>
            对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.Pool.DbBase.Config">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.Pool.DbBase._Pool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.Pool.DbBase.Pool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteDataTable(System.String)">
            <summary>
            返回数据表
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteDataTableAsync(System.String)">
            <summary>
            异步返回数据表
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.QueryList``1(System.String)">
            <summary>
            获取数据列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.QueryListAsync``1(System.String)">
            <summary>
            异步获取数据列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.Query``1(System.String)">
            <summary>
            获取数据列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.QueryAsync``1(System.String)">
            <summary>
            异步获取数据列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteNonQuery(System.String)">
            <summary>
            返回执行行数
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteNonQueryAsync(System.String)">
            <summary>
            异步返回执行行数
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteScalar(System.String)">
            <summary>
            返回首行首列
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteScalarAsync(System.String)">
            <summary>
            异步返回首行首列
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReader(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            返回一个DbDataReader
            </summary>
            <param name="SqlString">SQL字符串</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReaderAsync(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            返回一个DbDataReader
            </summary>
            <param name="SqlString">SQL字符串</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReaderAsync(System.String)">
            <summary>
            异步返回一个DbDataReader
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.GetParamInfo(System.String,System.Data.Common.DbParameter[])">
            <summary>
            用输入的数据替换到储存过程中
            </summary>
            <param name="commandText">储存过程</param>
            <param name="parameter">SQLParamerter</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.MakeParam(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="direction">所属类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.MakeParam(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="type">参数类型</param>
            <param name="size">参数大小</param>
            <param name="direction">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.MakeParamCommand(System.String,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="param">Parameter数组</param>
            <param name="db">数据库连接</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.MakeParamCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">储存过程类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="db">数据库连接</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteNonQueryAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteNonQueryAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            异步执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回首行首列</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回首行首列</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.QueryList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个List
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个List</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.QueryList``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个List
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个List</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.Query``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个T
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个T</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.Query``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个T
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个T</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteDataSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReader(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReaderAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReaderAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.DbBase.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="T:XiaoFeng.Data.Pool.IDataBase">
            <summary>
            数据库操作接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteDataTable(System.String)">
            <summary>
            返回数据表
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteDataTableAsync(System.String)">
            <summary>
            异步返回数据表
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.QueryList``1(System.String)">
            <summary>
            获取数据列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.QueryListAsync``1(System.String)">
            <summary>
            异步获取数据列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.Query``1(System.String)">
            <summary>
            获取数据表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.QueryAsync``1(System.String)">
            <summary>
            异步获取数据表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteNonQuery(System.String)">
            <summary>
            返回执行行数
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteNonQueryAsync(System.String)">
            <summary>
            异步返回执行行数
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteScalar(System.String)">
            <summary>
            返回首行首列
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteScalarAsync(System.String)">
            <summary>
            异步返回首行首列
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReader(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            返回一个DbDataReader
            </summary>
            <param name="SqlString">SQL字符串</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReaderAsync(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            返回一个DbDataReader
            </summary>
            <param name="SqlString">SQL字符串</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReaderAsync(System.String)">
            <summary>
            异步返回一个DbDataReader
            </summary>
            <param name="SqlString">SQL字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.GetParamInfo(System.String,System.Data.Common.DbParameter[])">
            <summary>
            用输入的数据替换到储存过程中
            </summary>
            <param name="commandText">储存过程</param>
            <param name="parameter">SQLParamerter</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.MakeParam(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="direction">所属类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.MakeParam(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建储存过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="type">参数类型</param>
            <param name="size">参数大小</param>
            <param name="direction">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.MakeParamCommand(System.String,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="param">Parameter数组</param>
            <param name="db">数据库连接对象</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.MakeParamCommand(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Data.Common.DbConnection)">
            <summary>
            返回一个带储存过程的Command
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">储存过程类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="db">数据库连接对象</param>
            <returns>返回一个Command</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回执行行数
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回执行行数</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回首行首列</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回首行首列
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回首行首列</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataTable
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataTable</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteDataSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataSet
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataSet</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReader(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReader(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.QueryList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个List
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个List</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.QueryList``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个List
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个List</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.Query``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个T
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个T</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.Query``1(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个T
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个T</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReaderAsync(System.String,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[],System.Action{System.Data.Common.DbDataReader})">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <param name="callback">回调</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReaderAsync(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="M:XiaoFeng.Data.Pool.IDataBase.ExecuteReaderAsync(System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            异步执行储存过程返回一个DataReader
            </summary>
            <param name="commandText">SQL语句或储存过程名称</param>
            <param name="commandType">CommandType类型</param>
            <param name="parameter">Parameter数组</param>
            <returns>返回一个DataReader</returns>
        </member>
        <member name="T:XiaoFeng.Data.ProviderFactory">
            <summary> 
            DbProviderFactory工厂类
            </summary> 
        </member>
        <member name="P:XiaoFeng.Data.ProviderFactory.ProviderInvariantNames">
            <summary>
            驱动集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.ProviderFactory.providerFactoies">
            <summary>
            驱动集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.ProviderFactory.Lock">
            <summary>
            独占锁
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.ProviderFactory.GetProviderInvariantName(XiaoFeng.Data.DbProviderType)">
            <summary> 
            获取指定数据库类型对应的程序集名称 
            </summary> 
            <param name="providerType">数据库类型枚举</param> 
            <returns></returns> 
        </member>
        <member name="M:XiaoFeng.Data.ProviderFactory.GetDbProviderFactory(XiaoFeng.Data.DbProviderType)">
            <summary> 
            获取指定类型的数据库对应的DbProviderFactory 
            </summary> 
            <param name="providerType">数据库类型枚举</param> 
            <returns></returns> 
        </member>
        <member name="M:XiaoFeng.Data.ProviderFactory.ImportDbProviderFactory(XiaoFeng.Data.DbProviderType)">
            <summary> 
            加载指定数据库类型的DbProviderFactory 
            </summary> 
            <param name="providerType">数据库类型枚举</param> 
            <returns></returns> 
        </member>
        <member name="T:XiaoFeng.Data.SqlHelper">
            <summary>
            SQLServer 数据库操作类
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/8/10 11:45:08
            Update Time : 2017/8/10 11:45:08
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.#ctor(System.String)">
            <summary>
            设置数据库连接字符串
            </summary>
            <param name="ConnectionString">数据库连接字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connectionConfig">数据库连接配置</param>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.GetTables">
            <summary>
            获取当前数据库所有用户表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.GetViews">
            <summary>
            获取当前数据库所有用户视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.GetProcedures">
            <summary>
            获取当前数据库所有用户存储过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.GetColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.GetDataColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.CreateTable(System.Type)">
            <summary>
            创建数据库表
            </summary>
            <param name="modelType">表model类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SqlHelper.CreateTable``1">
            <summary>
            创建数据库表 属性用 TableAttribute,ColumnAttribute
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQLiteHelper">
            <summary>
            SQLite 数据库操作类
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/9/22 0:11:53
            Update Time : 2017/9/22 0:11:53
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.#ctor(System.String)">
            <summary>
            设置数据库连接字符串
            </summary>
            <param name="ConnectionString">数据库连接字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connectionConfig">数据库连接配置</param>
        </member>
        <member name="F:XiaoFeng.Data.SQLiteHelper._DataType">
            <summary>
            SQLite类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQLiteHelper.DataType">
            <summary>
            SQLite类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.getType(System.String)">
            <summary>
            获取类型
            </summary>
            <param name="type">配置类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.GetTables">
            <summary>
            获取当前数据库所有用户表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.GetViews">
            <summary>
            获取当前数据库所有用户视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.GetProcedures">
            <summary>
            获取当前数据库所有用户存储过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.GetColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.GetDataColumns(System.String)">
            <summary>
            获取当前表所有列
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.Select(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.Select``1(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="tableName">表名</param>
            <param name="Columns">显示列</param>
            <param name="Condition">条件</param>
            <param name="OrderColumnName">排序字段</param>
            <param name="OrderType">排序类型ASC或DESC</param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">一页多少条</param>
            <param name="PageCount">共多少页</param>
            <param name="Counts">共多少条</param>
            <param name="PrimaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.CreateTable(System.Type)">
            <summary>
            创建表
            </summary>
            <param name="modelType">model类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.CreateTable``1">
            <summary>
            创建数据库表 属性用 TableAttribute,ColumnAttribute
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.CreateView(System.Type)">
            <summary>
            创建视图
            </summary>
            <param name="modelType">视图model类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.CreateView``1">
            <summary>
            创建视图
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.Compression">
            <summary>
            压缩数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.Backup(System.String)">
            <summary>
            备份
            </summary>
            <param name="dest">备份路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.Restore(System.String)">
            <summary>
            还原
            </summary>
            <param name="source">源路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQLiteHelper.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.BaseDataHelperQ">
            <summary>
            数据拼接基类
            </summary>
        </member>
        <member name="E:XiaoFeng.Data.SQL.BaseDataHelperQ.SQLCallBack">
            <summary>
            执行回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.BaseDataHelperQ.CacheKey">
            <summary>
            缓存key
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.BaseDataHelperQ.DataSql">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.SetCache(System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.If``1(XiaoFeng.Data.SQL.IQueryableX{``0})">
            <summary>
            条件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="query">IQueryableX</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.Then``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            符合条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.Else``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            不符合条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.ElseIf``1(XiaoFeng.Data.SQL.IQueryableX{``0})">
            <summary>
            其它条件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="query">IQueryableX</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.ElseIfThen``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            其它条件执行
            </summary>
            <typeparam name="T">IQueryableX</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Data.SQL.BaseDataHelperQ.SQL">
            <summary>
            获取SQL
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.End">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.ToEntity``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.ToList``1">
            <summary>
            获取列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.CreateCacheKey">
            <summary>
            创建CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.GetCacheData">
            <summary>
            获取缓存数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.BaseDataHelperQ.SetCacheData(System.Object,System.Int32)">
            <summary>
            设置缓存数据
            </summary>
            <param name="data">缓存值</param>
            <param name="timeOut">过期时间 单位为秒 0为永久</param>
        </member>
        <member name="T:XiaoFeng.Data.SQL.CacheState">
            <summary>
            是否缓存状态类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.CacheState.Null">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.CacheState.Yes">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.CacheState.No">
            <summary>
            不缓存
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.CacheState.Clear">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperQ">
            <summary>
            拼接SQL类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库配置
            </summary>
            <param name="config">数据库配置</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库配置及事件
            </summary>
            <param name="config">数据库配置</param>
            <param name="e">事件</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.If``1(XiaoFeng.Data.SQL.IQueryableX{``0})">
            <summary>
            条件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="query">IQueryableX</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.Then``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            符合条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.Else``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            不符合条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.ElseIf``1(XiaoFeng.Data.SQL.IQueryableX{``0})">
            <summary>
            其它条件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="query">IQueryableX</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.ElseIfThen``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            其它条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.ToEntity``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.ToList``1">
            <summary>
            获取列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperQ.SQL">
            <summary>
            获取SQL
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.SetCache(System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperQ.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX">
            <summary>
            转换数据类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库配置
            </summary>
            <param name="config">数据库配置</param>
            <param name="e">事件</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.#ctor(System.String,XiaoFeng.Data.DbProviderType,System.Boolean,System.Int32)">
            <summary>
            设置数据库配置
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="providerType">数据库驱动</param>
            <param name="isTransaction">是否启用事务处理</param>
            <param name="commandTimeOut">数据库操作超时时间</param>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX.Config">
            <summary>
            数据库相关配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX.DataHelper">
            <summary>
            数据库操作基础类
            </summary>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX.SQLCallBack">
            <summary>
            执行完SQL 回调方法
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.QueryableX``1(XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            转换成QueryableX
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="e">事件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.QueryableX``2(XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            转换成QueryableX
            </summary>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <param name="e">事件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.QueryableX``3(XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            转换成QueryableX
            </summary>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <param name="e">事件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.QueryableX``4(XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            转换成QueryableX
            </summary>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <param name="e">事件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.QueryableX``5(XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            转换成QueryableX
            </summary>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <param name="e">事件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.QueryableX``6(XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            转换成QueryableX
            </summary>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="T6">T6类型</typeparam>
            <param name="e">事件</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX`1">
            <summary>
            DataSQL 操作类
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/12/18 10:18:41
            Update Time : 2018/02/23 16:27:13
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库相关配置
            </summary>
            <param name="config">数据库配置</param>
            <param name="e">事件</param>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`1.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`1.Config">
            <summary>
            相关配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`1.DataSQL">
            <summary>
            配置
            </summary>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX`1.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.AsQueryableX(System.String)">
            <summary>
            SQL语句转换成IQueryableX
            </summary>
            <param name="SqlString">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.AsQueryableX``1(System.String)">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <param name="SqlString">第二个SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.AsQueryableX``2(System.String,System.String)">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <typeparam name="T3">类型</typeparam>
            <param name="SqlString2">第二个SQL语句</param>
            <param name="SqlString3">第三个SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.AS``1">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.AS``2">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <typeparam name="T3">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.To``1">
            <summary>
            转换对象
            </summary>
            <typeparam name="T2">目标对象</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            扩展SQL Join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            扩展SQL Join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``3(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``4(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``4(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``5(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``5(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``6(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="T6">T6类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``6(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="T6">T6类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Join``3(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``0,``2}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TThird">On返回类型</typeparam>
            <typeparam name="TResult">结果实体类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <param name="fResult">返回实体条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Take(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.TakeWhile(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.GroupBy(System.String)">
            <summary>
            扩展group by
            </summary>
            <param name="groupString">分组串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展group by
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">分组Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Distinct(System.String)">
            <summary>
            扩展SQL DISTINCT
            </summary>
            <param name="distinctString">Distinct列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Distinct``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL DISTINCT
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Distinct Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Sum(System.String)">
            <summary>
            扩展SQL SUM
            </summary>
            <param name="sumString">SUM列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL SUM
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Sum Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.CountX">
            <summary>
            条数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Count">
            <summary>
            扩展SQL COUNT
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展SQL COUNT
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Count(System.String)">
            <summary>
            扩展SQL COUNT
            </summary>
            <param name="countString">COUNT列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Count``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL COUNT
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Count Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Avg(System.String)">
            <summary>
            扩展SQL AVG
            </summary>
            <param name="avgString">Avg列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL AVG
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Avg Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Max(System.String)">
            <summary>
            扩展SQL MAX
            </summary>
            <param name="maxString">Max列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL MAX
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Max Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Min(System.String)">
            <summary>
            扩展SQL MIN
            </summary>
            <param name="minString">Min列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL MIN
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Min Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.First">
            <summary>
            扩展First
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.FirstOrDefault">
            <summary>
            扩展First
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展First
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展First
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.First``1">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.First``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Last">
            <summary>
            扩展Last
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Last(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展Last
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Last``1">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Last``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Skip(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.SkipWhile(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            跳过几条数据 遇到条件跳过
            </summary>
            <param name="skipCount">跳几条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展 Any
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToEntity``1">
            <summary>
            返回数据实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToEntity">
            <summary>
            返回数据实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToList">
            <summary>
            返回数据实体集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToList(System.Int32,System.Int32)">
            <summary>
            返回数据实体集合
            </summary>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToList(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            获取数据列表
            </summary>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <param name="pageCount">共有多少页</param>
            <param name="counts">共有多少条</param>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToList``1">
            <summary>
            返回数据实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回数据实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ToList``1(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            获取数据列表
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <param name="pageCount">共有多少页</param>
            <param name="counts">共有多少条</param>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Inserts``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">对象组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.InsertQ``1(``0)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Insert``1(``0)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Add``1(``0)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <returns>返回自增长ID</returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Insert``1(``0,System.Int64@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <param name="ID">自增长ID</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.InsertQ``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Insert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.UpdateQ``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.UpdateQ``1(``0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">model</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Update``1(``0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">model</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Update``1(``0,System.String)">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">对象</param>
            <param name="whereString">条件字符串 如果更新所有则输入'1=1'</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Updates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.DeleteQ(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除数据
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Delete(System.String)">
            <summary>
            删除数据
            </summary>
            <param name="whereString">空则为无效,1=1删除所有,drop删除表,truncate初始化表</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除数据
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Select(System.String)">
            <summary>
            查询数据
            </summary>
            <param name="Columns">显示字段</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查询数据
            </summary>
            <param name="func">显示字段Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置显示字段
            </summary>
            <param name="func">显示字段Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.SetTable(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Where(System.String)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="whereString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Where``1(``0)">
            <summary>
            根据Model设置条件
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.System#ICloneable#Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.ClearCache">
            <summary>
            清除缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.SetSqlType(XiaoFeng.Data.SQL.SQLType)">
            <summary>
            设置SQL语句类型
            </summary>
            <param name="sqlType">SQL语句类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.SQL(XiaoFeng.Data.SQL.SQLType)">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlType">SQL语句类型</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`1.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`1.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX`2">
            <summary>
            DataSQL 操作类
            </summary>
            <typeparam name="T">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库相关配置
            </summary>
            <param name="config">配置</param>
            <param name="e">事件</param>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX`2.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`2.Config">
            <summary>
            相关配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`2.DataSQL">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.On(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            扩展SQL COUNT
            </summary>
            <param name="func">第一个表条件</param>
            <param name="func2">第二个表条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Count">
            <summary>
            扩展SQL COUNT
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第一张表条件Lambda</param>
            <param name="func2">第二张表条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            设置条件
            </summary>
            <param name="func">条件</param>
            <param name="tableType">表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`2.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`2.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX`3">
            <summary>
            DataSQL 操作类
            </summary>
            <typeparam name="T">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库相关配置
            </summary>
            <param name="config">配置</param>
            <param name="e">事件</param>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX`3.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`3.Config">
            <summary>
            相关配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`3.DataSQL">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            设置条件
            </summary>
            <param name="func">条件</param>
            <param name="tableType">表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`3.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`3.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX`4">
            <summary>
            DataSQL 操作类
            </summary>
            <typeparam name="T">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库相关配置
            </summary>
            <param name="config">配置</param>
            <param name="e">事件</param>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX`4.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`4.Config">
            <summary>
            相关配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <param name="func4">第4张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            设置条件
            </summary>
            <param name="func">条件</param>
            <param name="tableType">表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`4.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`4.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX`5">
            <summary>
            DataSQL 操作类
            </summary>
            <typeparam name="T">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库相关配置
            </summary>
            <param name="config">配置</param>
            <param name="e">事件</param>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX`5.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`5.Config">
            <summary>
            相关配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <param name="func4">第4张表条件lambda</param>
            <param name="func5">第5张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            设置条件
            </summary>
            <param name="func">条件</param>
            <param name="tableType">表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`5.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`5.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataHelperX`6">
            <summary>
            DataSQL 操作类
            </summary>
            <typeparam name="T">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="T6">T6类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.#ctor(XiaoFeng.Data.ConnectionConfig,XiaoFeng.Data.SQL.RunSQLEventHandler)">
            <summary>
            设置数据库相关配置
            </summary>
            <param name="config">配置</param>
            <param name="e">事件</param>
        </member>
        <member name="E:XiaoFeng.Data.SQL.DataHelperX`6.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataHelperX`6.Config">
            <summary>
            相关配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`5,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <param name="func4">第4张表条件lambda</param>
            <param name="func5">第5张表条件lambda</param>
            <param name="func6">第6张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            设置条件
            </summary>
            <param name="func">条件</param>
            <param name="tableType">表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataHelperX`6.disposedValue">
            <summary>
            要检测冗余调用
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">要检测冗余调用</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataHelperX`6.System#IDisposable#Dispose">
            <summary>
            添加此代码以正确实现可处置模式。
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.RunSQLEventHandler">
            <summary>
            执行完SQL委托方法
            </summary>
            <param name="sender">对象</param>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataSQL">
            <summary>
            DataSQL操作类
            Verstion : 1.0.3
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/12/18 11:05:38
            Update Time : 2018/09/04 17:36:26
            Description : 优化GetTop方法
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.CacheState">
            <summary>
            是否缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.CacheTimeOut">
            <summary>
            缓存时长 单位为秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.IsHitCache">
            <summary>
            是否命中缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.HitCacheCount">
            <summary>
            命中缓存次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.CacheKey">
            <summary>
            缓存Key
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.ModelType">
            <summary>
            Model类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.SQLString">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.SQLParameter">
            <summary>
            SQL语句带入存储过程参数
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.LastSQLString">
            <summary>
            上一次执行SQL语句
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.LastSQLParameter">
            <summary>
            上一次执行SQL语句带入存储过程参数
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Columns">
            <summary>
            显示字段
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.UpdateColumns">
            <summary>
            设置字段
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.WhereString">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Where">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.PageSize">
            <summary>
            一页多少条
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.PageCount">
            <summary>
            共有多少页
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Counts">
            <summary>
            共有多少条
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Top">
            <summary>
            前多少条
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Limit">
            <summary>
            跳过多少条
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.OrderByString">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.GroupByString">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.SQLType">
            <summary>
            处理类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Config">
            <summary>
            数据库驱动
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.RunSQLTime">
            <summary>
            执行SQL时长 单位为毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.SpliceSQLTime">
            <summary>
            拼接SQL时长 单位为毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL.Parameters">
            <summary>
            存储过程参数集
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.FieldFormat(System.String)">
            <summary>
            数据库格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetWhere(System.String)">
            <summary>
            设置Where
            </summary>
            <param name="where">条件字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetOrderBy(System.String)">
            <summary>
            设置排序
            </summary>
            <param name="orderString">排序字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetSQLString">
            <summary>
            获取拼接后的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetSQLParameter(System.String)">
            <summary>
            获取拼接后的SQLParameter
            </summary>
            <param name="SqlString">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetLimit">
            <summary>
            获取跳过多少条
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetLimits">
            <summary>
            获取要获取多少条
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetTop">
            <summary>
            获取头几条
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetWhere">
            <summary>
            获取条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetGroupBy">
            <summary>
            获取分组数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetOrderBy">
            <summary>
            获取排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetColumns">
            <summary>
            获取显示列数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetColumns(System.String)">
            <summary>
            设置显示列数据
            </summary>
            <param name="columns">列</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetColumns(System.Collections.Generic.List{System.String})">
            <summary>
            设置显示列数据
            </summary>
            <param name="list">列集</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetColumns(System.String[])">
            <summary>
            设置显示列数据
            </summary>
            <param name="list">列集</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetUpdateColumns">
            <summary>
            获取更新列数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetUpdateColumns(System.Object)">
            <summary>
            设置更新列数据
            </summary>
            <param name="columns">列</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetUpdateColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            设置更新列
            </summary>
            <param name="list">列集</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetUpdateColumns_BAK(System.String[])">
            <summary>
            设置更新列 当时为什么会写两个 2021-06-04
            </summary>
            <param name="list">列集</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.Done(XiaoFeng.Data.SQL.DataSQL)">
            <summary>
            复制数据
            </summary>
            <param name="dSQL">DataSQL对象</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.Clone">
            <summary>
            复制当前对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.CreateCacheKey">
            <summary>
            创建CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.GetCacheData``1">
            <summary>
            获取缓存数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.SetCacheData(System.Object,System.Int32)">
            <summary>
            设置缓存数据
            </summary>
            <param name="data">缓存值</param>
            <param name="timeOut">过期时间 单位为秒 0为永久</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL.IsCache(XiaoFeng.Model.Core.CacheDataAttribute)">
            <summary>
            是否要缓存
            </summary>
            <param name="cacheData">Model属性</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataSQL2">
            <summary>
            两表存储结构
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL2.ModelType">
            <summary>
            Model类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataSQL2.Prefix">
            <summary>
            表前缀
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL2.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL2.WhereString">
            <summary>
            表条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL2.OnString">
            <summary>
            ON条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL2.JoinType">
            <summary>
            联表类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.DataSQL2._JoinTypes">
            <summary>
            JoinType字符串
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL2.JoinTypes">
            <summary>
            JoinType字符串
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.GetSQLTable">
            <summary>
            获取SQL表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.GetSQLString(System.String)">
            <summary>
            获取SQL
            </summary>
            <param name="SQLString">SQL模板</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.SetOn(System.String)">
            <summary>
            设置On字符串
            </summary>
            <param name="onString">On字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.GetOn">
            <summary>
            获取On字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.SetWhere(System.String,XiaoFeng.Data.SQL.TableType)">
            <summary>
            设置条件
            </summary>
            <param name="where">条件</param>
            <param name="tableType">表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.GetValue``1(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,``0},XiaoFeng.Data.SQL.TableType)">
            <summary>
            获取值
            </summary>
            <param name="data">数据</param>
            <param name="tableType">表类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.SetValue``1(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,``0},XiaoFeng.Data.SQL.TableType,``0)">
            <summary>
            设置值
            </summary>
            <param name="data">数据</param>
            <param name="tableType">表类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.Done(XiaoFeng.Data.SQL.DataSQL2)">
            <summary>
            复制数据
            </summary>
            <param name="dSQL">DataSQL2对象</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.Clone">
            <summary>
            复制当前对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.NextChar(System.String)">
            <summary>
            遍历字符
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL2.SetColumnPrefix(System.String,System.String)">
            <summary>
            设置字段前缀
            </summary>
            <param name="str">字符串</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataSQL3">
            <summary>
            多表存储结构
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL3.OnString">
            <summary>
            ON条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSQL3.JoinType">
            <summary>
            联表类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.SetOnAndJoinType(System.String,XiaoFeng.Data.SQL.JoinType)">
            <summary>
            设置 On和JoinType
            </summary>
            <param name="OnString">On字符串</param>
            <param name="joinType">关联表类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.SetJoinType(System.String,XiaoFeng.Data.SQL.JoinType)">
            <summary>
            设置JoinType
            </summary>
            <param name="name">名称</param>
            <param name="jType">类型</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.GetJoinType(System.String)">
            <summary>
            获取JoinType
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.SetOn(System.String,System.String)">
            <summary>
            设置On字符串
            </summary>
            <param name="name">名称</param>
            <param name="onString">On字符串</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.GetOn(System.String)">
            <summary>
            获取On字符串
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.GetSQLTable">
            <summary>
            获取SQL表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.GetSQLString(System.String)">
            <summary>
            获取SQL
            </summary>
            <param name="SQLString">SQL模板</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.Done(XiaoFeng.Data.SQL.DataSQL3)">
            <summary>
            复制数据
            </summary>
            <param name="dSQL">DataSQL3对象</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.DataSQL3.Clone">
            <summary>
            复制当前对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.DataSqlQ">
            <summary>
            拼接SQL记录器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.CacheState">
            <summary>
            是否缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.CacheTimeOut">
            <summary>
            缓存时长 单位为秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.IsHitCache">
            <summary>
            是否命中缓存
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.HitCacheCount">
            <summary>
            命中缓存次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.CacheKey">
            <summary>
            缓存Key
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.ModelType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.If">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.Then">
            <summary>
            符合条件 执行
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.Else">
            <summary>
            不符合条件执行
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.ElseIf">
            <summary>
            其它的条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.ElseIfThen">
            <summary>
            其它的条件执行
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.Config">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.DataSqlQ.RunSQLTime">
            <summary>
            运行时长
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableQ">
            <summary>
            数据拼接接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.If``1(XiaoFeng.Data.SQL.IQueryableX{``0})">
            <summary>
            条件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="query">IQueryableX</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.Then``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            符合条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.Else``1(XiaoFeng.Data.SQL.IQueryableX{``0}[])">
            <summary>
            不符合条件执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="querys">IQueryableX集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.End">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.ToEntity``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.ToList``1">
            <summary>
            获取列表
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.SetCache(System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableQ.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableX`1">
            <summary>
            操作SQL
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="E:XiaoFeng.Data.SQL.IQueryableX`1.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Add``1(``0)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <returns>返回自增长ID</returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Inserts``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">实例集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.InsertQ``1(``0)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Insert``1(``0)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">实例</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Insert``1(``0,System.Int64@)">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">数据Model</param>
            <param name="ID">自增长ID</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.InsertQ``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Insert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            插入数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.UpdateQ``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.UpdateQ``1(``0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">model</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="fResult">结果对象</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Update``1(``0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">实例</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Update``1(``0,System.String)">
            <summary>
            更新数据
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">实例</param>
            <param name="whereString">条件字符串 如果更新所有则输入'1=1'</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Updates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="models">集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.DeleteQ(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除数据
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除数据
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Delete(System.String)">
            <summary>
            删除数据
            </summary>
            <param name="whereString">空则为无效,1=1删除所有,drop删除表,truncate初始化表</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Select(System.String)">
            <summary>
            查询数据
            </summary>
            <param name="Columns">显示字段</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查询数据
            </summary>
            <param name="func">显示字段Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置显示字段
            </summary>
            <param name="func">显示字段Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.SetTable(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Where(System.String)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="whereString">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Where``1(``0)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="model">条件字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToEntity">
            <summary>
            返回数据实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToEntity``1">
            <summary>
            返回数据实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToList">
            <summary>
            返回数据实体集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToList(System.Int32,System.Int32)">
            <summary>
            返回数据实体集合
            </summary>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToList(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            获取数据列表
            </summary>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <param name="pageCount">共有多少页</param>
            <param name="counts">共有多少条</param>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToList``1">
            <summary>
            返回数据实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回数据实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ToList``1(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            获取数据列表
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="page">当前页码</param>
            <param name="pageSize">一页多少条</param>
            <param name="pageCount">共有多少页</param>
            <param name="counts">共有多少条</param>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Take(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.TakeWhile(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.GroupBy(System.String)">
            <summary>
            扩展group by
            </summary>
            <param name="groupString">分组串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展group by
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">分组Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Distinct(System.String)">
            <summary>
            扩展SQL DISTINCT
            </summary>
            <param name="distinctString">Distinct列</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Distinct``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL DISTINCT
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Distinct Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Sum(System.String)">
            <summary>
            扩展SQL SUM
            </summary>
            <param name="sumString">Sum Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL SUM
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Sum Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.CountX">
            <summary>
            条数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Count">
            <summary>
            扩展SQL COUNT
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展SQL COUNT
            </summary>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Count(System.String)">
            <summary>
            扩展SQL Count
            </summary>
            <param name="countString">Count 字段字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Count``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL Count
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Count Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Avg(System.String)">
            <summary>
            扩展SQL Avg
            </summary>
            <param name="avgString">Avg Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL Avg
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Avg Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Max(System.String)">
            <summary>
            扩展SQL Max
            </summary>
            <param name="maxString">Max Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL Max
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Max Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Min(System.String)">
            <summary>
            扩展SQL Min
            </summary>
            <param name="minString">Min Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            扩展SQL Min
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">Min Lmabda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.FirstOrDefault">
            <summary>
            扩展First
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展First
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.First">
            <summary>
            扩展First
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展First
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.First``1">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.First``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Last">
            <summary>
            扩展Last
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Last(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展Last
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Last``1">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Last``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Skip(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.SkipWhile(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            跳过几条数据 遇到条件跳过
            </summary>
            <param name="skipCount">跳几条</param>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            扩展Any
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.AsQueryableX(System.String)">
            <summary>
            SQL语句转换成IQueryableX
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.AsQueryableX``1(System.String)">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <param name="SQLString">第二个SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.AsQueryableX``2(System.String,System.String)">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <typeparam name="T3">类型</typeparam>
            <param name="SQLString2">第二个SQL语句</param>
            <param name="SQLString3">第三个SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.AS``2">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <typeparam name="T3">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.AS``1">
            <summary>
            转换关联表
            </summary>
            <typeparam name="T2">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.To``1">
            <summary>
            转换对象
            </summary>
            <typeparam name="T2">目标对象</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            扩展Join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            扩展Join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``3(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}})">
            <summary>
            扩展join 请用Join方法
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``4(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``4(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``5(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``5(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``6(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="T6">T6类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``6(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="T3">T3类型</typeparam>
            <typeparam name="T4">T4类型</typeparam>
            <typeparam name="T5">T5类型</typeparam>
            <typeparam name="T6">T6类型</typeparam>
            <typeparam name="TResult">On返回类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Join``3(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``0,``2}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TThird">On返回类型</typeparam>
            <typeparam name="TResult">结果实体类型</typeparam>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <param name="fResult">返回实体条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Clone">
            <summary>
            复制
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.ClearCache">
            <summary>
            清除缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.SetSqlType(XiaoFeng.Data.SQL.SQLType)">
            <summary>
            设置SQL语句类型
            </summary>
            <param name="sqlType">SQL语句类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`1.SQL(XiaoFeng.Data.SQL.SQLType)">
            <summary>
            获取SQL语句
            </summary>
            <param name="sqlType">SQL语句类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableX`2">
            <summary>
            操作两张表数据
            </summary>
            <typeparam name="T">第一张表类型</typeparam>
            <typeparam name="T2">第二张表类型</typeparam>
        </member>
        <member name="E:XiaoFeng.Data.SQL.IQueryableX`2.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.On(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="func">条件Lambda</param>
            <param name="tableType">表类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">T条件Lambda</param>
            <param name="func2">T2条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`2.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableX`3">
            <summary>
            操作三张表数据
            </summary>
            <typeparam name="T">第一张表类型</typeparam>
            <typeparam name="T2">第二张表类型</typeparam>
            <typeparam name="T3">第三张表类型</typeparam>"
        </member>
        <member name="E:XiaoFeng.Data.SQL.IQueryableX`3.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="func">条件Lambda</param>
            <param name="tableType">表类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`3.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableX`4">
            <summary>
            操作四张表数据
            </summary>
            <typeparam name="T">第一张表类型</typeparam>
            <typeparam name="T2">第二张表类型</typeparam>
            <typeparam name="T3">第三张表类型</typeparam>
            <typeparam name="T4">第四张表类型</typeparam>
        </member>
        <member name="E:XiaoFeng.Data.SQL.IQueryableX`4.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="func">条件Lambda</param>
            <param name="tableType">表类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <param name="func4">第4张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`4.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableX`5">
            <summary>
            操作四张表数据
            </summary>
            <typeparam name="T">第一张表类型</typeparam>
            <typeparam name="T2">第二张表类型</typeparam>
            <typeparam name="T3">第三张表类型</typeparam>
            <typeparam name="T4">第四张表类型</typeparam>
            <typeparam name="T5">第五张表类型</typeparam>
        </member>
        <member name="E:XiaoFeng.Data.SQL.IQueryableX`5.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="func">条件Lambda</param>
            <param name="tableType">表类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <param name="func4">第4张表条件lambda</param>
            <param name="func5">第5张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`5.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.IQueryableX`6">
            <summary>
            操作四张表数据
            </summary>
            <typeparam name="T">第一张表类型</typeparam>
            <typeparam name="T2">第二张表类型</typeparam>
            <typeparam name="T3">第三张表类型</typeparam>
            <typeparam name="T4">第四张表类型</typeparam>
            <typeparam name="T5">第五张表类型</typeparam>
            <typeparam name="T6">第六张表类型</typeparam>
        </member>
        <member name="E:XiaoFeng.Data.SQL.IQueryableX`6.SQLCallBack">
            <summary>
            执行完SQL回调
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Take(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.TakeWhile(System.Int32)">
            <summary>
            前几条数据
            </summary>
            <param name="topCount">前多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Skip(System.Int32)">
            <summary>
            跳过几条数据
            </summary>
            <param name="skipCount">跳几条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.First``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展First
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Last``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展Last
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.On``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展On条件
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.On(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            扩展On条件
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Join(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            扩展join
            </summary>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Join``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            扩展join
            </summary>
            <typeparam name="TResult">On类型</typeparam>
            <param name="func">T2条件Lambda</param>
            <param name="func3">T3条件Lambda</param>
            <param name="func4">T4条件Lambda</param>
            <param name="func5">T5条件Lambda</param>
            <param name="func6">T6条件Lambda</param>
            <param name="funcOn">On条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            查询数据
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.SelectX``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="func">条件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.SetTable(System.Collections.Generic.Dictionary{XiaoFeng.Data.SQL.TableType,System.String})">
            <summary>
            设置表名
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.OrderBy(System.String)">
            <summary>
            设置正序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置正序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">正序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            正序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.OrderByDescending(System.String)">
            <summary>
            设置倒序排序
            </summary>
            <param name="orderString">排序字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置倒序排序
            </summary>
            <typeparam name="TResult">类型</typeparam>
            <param name="func">倒序Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}},System.Int32,System.Int32)">
            <summary>
            返回实体集合
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <param name="page">当前页</param>
            <param name="pageSize">一页多少条</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.ToEntity``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            返回实体
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回实例结构Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">条件Lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},XiaoFeng.Data.SQL.TableType)">
            <summary>
            扩展SQL 条件算法
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <param name="func">条件Lambda</param>
            <param name="tableType">表类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`5,System.Boolean}})">
            <summary>
            扩展SQL 条件算法
            </summary>
            <param name="func">第1张表条件Lambda</param>
            <param name="func2">第2张表条件Lambda</param>
            <param name="func3">第3张表条件lambda</param>
            <param name="func4">第4张表条件lambda</param>
            <param name="func5">第5张表条件lambda</param>
            <param name="func6">第6张表条件lambda</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.AS">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.Cache(System.Nullable{System.UInt32})">
            <summary>
            设置缓存
            </summary>
            <param name="TimeOut">缓存过期时长 单位为秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.IQueryableX`6.NoCache">
            <summary>
            不缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.JoinType">
            <summary>
            关联表类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.JoinType.Inner">
            <summary>
            Inner
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.JoinType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.JoinType.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.JoinType.Full">
            <summary>
            Full
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.JoinType.Union">
            <summary>
            Union All
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.Pair">
            <summary>
            成对操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.Pair.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.Pair.#ctor(System.Char)">
            <summary>
            设置开始标识符
            </summary>
            <param name="startMark">开始标识符</param>
        </member>
        <member name="P:XiaoFeng.Data.SQL.Pair.StartMark">
            <summary>
            开始标识符
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.Pair.EndMark">
            <summary>
            结束标识符
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.Pair.IsPair">
            <summary>
            是否成对
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.Pair.ChildPair">
            <summary>
            子结点
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.Pair.ParentPair">
            <summary>
            父结点
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.PrototypeHelper">
            <summary>
            扩展SQL语法
            Verstion : 2.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/12/20 9:40:00
            Update Time : 2018/01/19 13:40:00
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AddSQL``1(``0,``0)">
            <summary>
            字段加值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.SubtractSQL``1(``0,``0)">
            <summary>
            字段减值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.MultiplySQL``1(``0,``0)">
            <summary>
            字段乘值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DivideSQL``1(``0,``0)">
            <summary>
            字段除值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.BetweenSQL(System.Object,System.Object,System.Object)">
            <summary>
            扩展SQL Between
            </summary>
            <param name="obj">对象</param>
            <param name="startValue">开始值</param>
            <param name="endValue">结束值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.IsNullSQL``1(``0,``0)">
            <summary>
            扩展SQL ISNULL
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.InSQL``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            扩展SQL in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="array">数组织</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.InSQL``1(``0,``0[])">
            <summary>
            扩展SQL in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="array">数组织</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.InSQL``2(``0,XiaoFeng.Data.SQL.IQueryableX{``1})">
            <summary>
            扩展SQL in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <typeparam name="T1">类型</typeparam>
            <param name="obj">对象</param>
            <param name="queryableX">IQueryableX对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.InSQL``1(``0,System.Object[])">
            <summary>
            扩展SQL in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.NotInSQL``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            扩展SQL not in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.NotInSQL``1(``0,``0[])">
            <summary>
            扩展SQL not in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.NotInSQL``2(``0,XiaoFeng.Data.SQL.IQueryableX{``1})">
            <summary>
            扩展SQL not in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <typeparam name="T1">类型</typeparam>
            <param name="obj">对象</param>
            <param name="queryableX">IQueryableX对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.NotInSQL``1(``0,System.Object[])">
            <summary>
            扩展SQL not in语法
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.LikeSQL(System.Object,System.String)">
            <summary>
            扩展SQL like 语法
            </summary>
            <param name="str">字符串</param>
            <param name="likeStr">子串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.NotLikeSQL(System.String,System.String)">
            <summary>
            扩展SQL not like 语法
            </summary>
            <param name="str">字符串</param>
            <param name="likeStr">子串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DateDiffSQL(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            扩展SQL DateDiff 语法
            </summary>
            <param name="firstDate">第一个时间</param>
            <param name="SecondDate">第二个时间</param>
            <param name="format">格式 年yy,yyyy 季度qq,q 月mm,m 年中的日dy,y 日dd,d 周wk,ww 星期dw,w 小时hh 分钟mi,n 秒ss,s 毫秒ms 微秒mcs 纳秒ns</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DateDiffSQL(System.DateTime,System.DateTime,System.String)">
            <summary>
            扩展SQL DateDiff 语法
            </summary>
            <param name="firstDate">第一个时间</param>
            <param name="SecondDate">第二个时间</param>
            <param name="format">格式 年yy,yyyy 季度qq,q 月mm,m 年中的日dy,y 日dd,d 周wk,ww 星期dw,w 小时hh 分钟mi,n 秒ss,s 毫秒ms 微秒mcs 纳秒ns</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DatePartSQL(System.Nullable{System.DateTime},System.String)">
            <summary>
            扩展SQL DatePart 语法
            </summary>
            <param name="Date">当前时间</param>
            <param name="format">格式 年yy,yyyy 季度qq,q 月mm,m 年中的日dy,y 日dd,d 周wk,ww 星期dw,w 小时hh 分钟mi,n 秒ss,s 毫秒ms 微秒mcs 纳秒ns</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DatePartSQL(System.DateTime,System.String)">
            <summary>
            扩展SQL DatePart 语法
            </summary>
            <param name="Date">当前时间</param>
            <param name="format">格式 年yy,yyyy 季度qq,q 月mm,m 年中的日dy,y 日dd,d 周wk,ww 星期dw,w 小时hh 分钟mi,n 秒ss,s 毫秒ms 微秒mcs 纳秒ns</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DateFormatSQL(System.Nullable{System.DateTime},System.String)">
            <summary>
            扩展SQL DateFormat 语法
            </summary>
            <param name="Date">当前时间</param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.DateFormatSQL(System.DateTime,System.String)">
            <summary>
            扩展SQL DateFormat 语法
            </summary>
            <param name="Date">当前时间</param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CharIndexSQL(System.String,System.String)">
            <summary>
            扩展SQL Charindex 语法
            </summary>
            <param name="str">字符串</param>
            <param name="IndexStr">子串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.PatindexSQL(System.String,System.String)">
            <summary>
            扩展SQL Patindex语法
            </summary>
            <param name="str">字符串</param>
            <param name="IndexStr">子串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Int32)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Nullable{System.Int32})">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Nullable{System.Int16})">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Int16)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Nullable{System.Int64})">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Int64)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Nullable{System.Double})">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Double)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Nullable{System.Decimal})">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Decimal)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Nullable{System.Single})">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AbsSQL(System.Single)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.FloorSQL(System.Nullable{System.Double})">
            <summary>
            扩展SQL Floor 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.FloorSQL(System.Double)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.FloorSQL(System.Nullable{System.Decimal})">
            <summary>
            扩展SQL Floor 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.FloorSQL(System.Decimal)">
            <summary>
            扩展SQL Floor 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.FloorSQL(System.Nullable{System.Single})">
            <summary>
            扩展SQL Floor 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.FloorSQL(System.Single)">
            <summary>
            扩展SQL Floor 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CeilingSQL(System.Nullable{System.Double})">
            <summary>
            扩展SQL Ceiling 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CeilingSQL(System.Double)">
            <summary>
            扩展SQL Ceiling 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CeilingSQL(System.Nullable{System.Decimal})">
            <summary>
            扩展SQL Ceiling 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CeilingSQL(System.Decimal)">
            <summary>
            扩展SQL Ceiling 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CeilingSQL(System.Nullable{System.Single})">
            <summary>
            扩展SQL Ceiling 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CeilingSQL(System.Single)">
            <summary>
            扩展SQL Ceiling 算法
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RoundSQL(System.Nullable{System.Double},System.Int32)">
            <summary>
            扩展SQL Round 算法
            </summary>
            <param name="value">值</param>
            <param name="len">小数点保留长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RoundSQL(System.Double,System.Int32)">
            <summary>
            扩展SQL Round 算法
            </summary>
            <param name="value">值</param>
            <param name="len">小数点保留长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RoundSQL(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            扩展SQL Round 算法
            </summary>
            <param name="value">值</param>
            <param name="len">小数点保留长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RoundSQL(System.Decimal,System.Int32)">
            <summary>
            扩展SQL Round 算法
            </summary>
            <param name="value">值</param>
            <param name="len">小数点保留长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RoundSQL(System.Nullable{System.Single},System.Int32)">
            <summary>
            扩展SQL Abs 算法
            </summary>
            <param name="value">值</param>
            <param name="len">小数点保留长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RoundSQL(System.Single,System.Int32)">
            <summary>
            扩展SQL Round 算法
            </summary>
            <param name="value">值</param>
            <param name="len">小数点保留长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.LeftSQL(System.String,System.Int32)">
            <summary>
            扩展SQL Left
            </summary>
            <param name="str">字符串</param>
            <param name="num">第几位</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RightSQL(System.String,System.Int32)">
            <summary>
            扩展SQL Right
            </summary>
            <param name="str">字符串</param>
            <param name="num">第几位</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.LengthSQL(System.String)">
            <summary>
            扩展SQL Len
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.ReplaceSQL(System.String,System.String,System.String)">
            <summary>
            扩展SQL Replace
            </summary>
            <param name="str">字符串</param>
            <param name="oldString">原字符串</param>
            <param name="replaceString">新字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.ReplicateSQL(System.String,System.Int32)">
            <summary>
            扩展SQL Replicate
            </summary>
            <param name="str">字符串</param>
            <param name="num">重复次数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.ReverseSQL(System.String)">
            <summary>
            扩展SQL Reverse
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.StuffSQL(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            扩展SQL Stuff
            </summary>
            <param name="str">字符串</param>
            <param name="strat">开始位置</param>
            <param name="length">长度</param>
            <param name="replaceString">替换字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.SubstringSQL(System.String,System.Int32,System.Int32)">
            <summary>
            扩展SQL Substring
            </summary>
            <param name="str">字符串</param>
            <param name="start">开始位置</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.LTrimSQL(System.String)">
            <summary>
            扩展SQL Ltrim
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.RTrimSQL(System.String)">
            <summary>
            扩展SQL Rtrim
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.TrimSQL(System.String)">
            <summary>
            扩展SQL Trim
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.LowerSQL(System.String)">
            <summary>
            扩展SQL Lower
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.UpperSQL(System.String)">
            <summary>
            扩展SQL Upper
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.CountSQL(System.Object)">
            <summary>
            扩展SQL Count
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.MaxSQL``1(``0)">
            <summary>
            扩展SQL MAX
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.MinSQL``1(``0)">
            <summary>
            扩展SQL MIN
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.SumSQL``1(``0)">
            <summary>
            扩展SQL SUM
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.AvgSQL``1(``0)">
            <summary>
            扩展SQL AVG
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.As``1(``0,System.String)">
            <summary>
            设置字段别名
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <param name="ColumnName">别名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.PrototypeHelper.SQLFormat(System.String,XiaoFeng.Data.DbProviderType)">
            <summary>
            SQL参数化调整
            </summary>
            <param name="_">SQL语句</param>
            <param name="dbProvider">数据库驱动</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.QueryableProvider`1">
            <summary>
            Queryable驱动
            Verstion : 2.0.4
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/12/18 10:55:55
            Update Time : 2018/06/25 17:50:21
            Description : 增加了相关C#扩展接口 如 Replace,Substring,Trim,TrimStart,TrimEnd,StartsWith,EndsWith
            v 2.0.3
            增加 boolean值!a.ColumnName 的判断
            v 2.0.4
            优化执行Lambda算法
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.QueryableProvider`1.DataSQL">
            <summary>
            配置数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.QueryableProvider`1.DataHelper">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.FieldFormat(System.String)">
            <summary>
            数据库格式
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.SetColumns``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">返回结果</typeparam>
            <param name="func">Expression</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.OrderByString``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TModel">结果集类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">返回Lambda</param>
            <param name="orderType">排序类型 asc,desc</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.CreateTable``1">
            <summary>
            根据 model 创建表
            </summary>
            <typeparam name="TOther">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.BinaryExpressionProvider(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            处理节点
            </summary>
            <param name="left">左节点</param>
            <param name="right">右节点</param>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.BinaryExpressionProviderModel(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            处理节点
            </summary>
            <param name="left">左节点</param>
            <param name="right">右节点</param>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.UnBinaryExpressionProvider(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            处理节点
            </summary>
            <param name="left">左节点</param>
            <param name="right">右节点</param>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Data.SQL.QueryableProvider`1._SqlFun">
            <summary>
            SQL对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.QueryableProvider`1.SqlFun">
            <summary>
            SQL对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.QueryableProvider`1.SqlUnFun">
            <summary>
            SQL对象集
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.GetLambdaValue(System.Object)">
            <summary>
            Lambda取值
            </summary>
            <param name="val">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.GetParamName(System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.AddParam(System.String,System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.RemoveParam(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="name">参数错</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.GetDbParameters">
            <summary>
            获取存储过程参数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.GetDbParameters(System.String)">
            <summary>
            获取存储过程参数值 根据SQL参数排序
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.GetParamValue(System.String)">
            <summary>
            获取Param值
            </summary>
            <param name="ParamName">参数名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.GetParameters">
            <summary>
            获取所有的参数集
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.ExpressionRouter(System.Linq.Expressions.Expression)">
            <summary>
            设置规则
            </summary>
            <param name="exp">节点</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.ExpressionRouterModel(System.Linq.Expressions.Expression)">
            <summary>
            设置规则
            </summary>
            <param name="exp">节点</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.UnExpressionRouter(System.Linq.Expressions.Expression)">
            <summary>
            设置规则
            </summary>
            <param name="exp">节点</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.ExpressionTypeCast(System.Linq.Expressions.ExpressionType)">
            <summary>
            设置节点连接类型
            </summary>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.ExpressionTypeCasts(System.Linq.Expressions.ExpressionType)">
            <summary>
            设置节点连接类型
            </summary>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.Eval(System.Linq.Expressions.Expression)">
            <summary>
            执行Lambda表达式
            </summary>
            <param name="expression">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.ReplaceMatchTag(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            匹配输入标识与数据库表对象
            </summary>
            <param name="Tags">标签</param>
            <param name="SqlString">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`1.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.QueryableProvider`2">
            <summary>
            Queryable驱动
            </summary>
            <typeparam name="T">第一个类型</typeparam>
            <typeparam name="T2">第二个类型</typeparam>
        </member>
        <member name="P:XiaoFeng.Data.SQL.QueryableProvider`2.DataSQL">
            <summary>
            配置数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.GetParamName(System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.AddParam(System.String,System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.GetDbParameters">
            <summary>
            获取存储过程参数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.GetParamValue(System.String)">
            <summary>
            获取Param值
            </summary>
            <param name="ParamName">参数名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.RemoveParam(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="name">参数错</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.GetParameters">
            <summary>
            获取所有的参数集
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.OrderByString``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">返回结果Lambda</param>
            <param name="orderType">排序类型 asc,desc</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`2.SetColumns``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">返回结果</typeparam>
            <param name="func">Expression</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.QueryableProvider`3">
            <summary>
            Queryable驱动
            </summary>
            <typeparam name="T">第一个类型</typeparam>
            <typeparam name="T2">第二个类型</typeparam>
            <typeparam name="T3">第三个类型</typeparam>
        </member>
        <member name="P:XiaoFeng.Data.SQL.QueryableProvider`3.DataSQL">
            <summary>
            配置数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.GetParamName(System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.AddParam(System.String,System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.GetDbParameters">
            <summary>
            获取存储过程参数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.RemoveParam(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="name">参数错</param>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.GetParamValue(System.String)">
            <summary>
            获取Param值
            </summary>
            <param name="ParamName">参数名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.GetParameters">
            <summary>
            获取所有的参数集
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.OrderByString``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">返回结果Lambda</param>
            <param name="orderType">排序类型 asc,desc</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`3.SetColumns``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">返回结果</typeparam>
            <param name="func">结果Lambda</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.QueryableProvider`4">
            <summary>
            Queryable驱动
            </summary>
            <typeparam name="T">第一个类型</typeparam>
            <typeparam name="T2">第二个类型</typeparam>
            <typeparam name="T3">第三个类型</typeparam>
            <typeparam name="T4">第四个类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`4.OrderByString``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">返回结果Lambda</param>
            <param name="orderType">排序类型 asc,desc</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`4.SetColumns``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">返回结果</typeparam>
            <param name="func">结果Lambda</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.QueryableProvider`5">
            <summary>
            Queryable驱动
            </summary>
            <typeparam name="T">第一个类型</typeparam>
            <typeparam name="T2">第二个类型</typeparam>
            <typeparam name="T3">第三个类型</typeparam>
            <typeparam name="T4">第四个类型</typeparam>
            <typeparam name="T5">第五个类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`5.OrderByString``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">返回结果Lambda</param>
            <param name="orderType">排序类型 asc,desc</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`5.SetColumns``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">返回结果</typeparam>
            <param name="func">结果Lambda</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.QueryableProvider`6">
            <summary>
            Queryable驱动
            </summary>
            <typeparam name="T">第一个类型</typeparam>
            <typeparam name="T2">第二个类型</typeparam>
            <typeparam name="T3">第三个类型</typeparam>
            <typeparam name="T4">第四个类型</typeparam>
            <typeparam name="T5">第五个类型</typeparam>
            <typeparam name="T6">第六个类型</typeparam>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`6.OrderByString``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}},System.String)">
            <summary>
            排序
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">返回结果Lambda</param>
            <param name="orderType">排序类型 asc,desc</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Data.SQL.QueryableProvider`6.SetColumns``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            设置显示字段
            </summary>
            <typeparam name="TResult">返回结果</typeparam>
            <param name="func">结果Lambda</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SQL.RegexString">
            <summary>
            正则
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.RegexString.MatchInputTag">
            <summary>
            匹配输入值正则 如参数 (a,b,c)=>{}
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.RegexString.Mark">
            <summary>
            标识符
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.ProgramNameDataX">
            <summary>
            项目实例
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.ProgramNameDataX.CallBack">
            <summary>
            回调事件
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.ProgramNameDataX._X">
            <summary>
            操作对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SQL.ProgramNameDataX.X">
            <summary>
            操作对象
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.SQLType">
            <summary>
            数据库语句类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.NULL">
            <summary>
            空
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.select">
            <summary>
            查询
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.insert">
            <summary>
            插入
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.join">
            <summary>
            联表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.exists">
            <summary>
            是否存在
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.limit">
            <summary>
            跳过多少条
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.drop">
            <summary>
            删除表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.truncate">
            <summary>
            初始化表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.AutoIncrement">
            <summary>
            自增长ID
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.SQLType.groupby">
            <summary>
            分组
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.SQL.TableType">
            <summary>
            表类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.TResult">
            <summary>
            总表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T1">
            <summary>
            第1张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T2">
            <summary>
            第2张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T3">
            <summary>
            第3张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T4">
            <summary>
            第4张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T5">
            <summary>
            第5张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T6">
            <summary>
            第6张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T7">
            <summary>
            第7张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T8">
            <summary>
            第8张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T9">
            <summary>
            第9张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T10">
            <summary>
            第10张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T11">
            <summary>
            第11张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T12">
            <summary>
            第12张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T13">
            <summary>
            第13张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T14">
            <summary>
            第14张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T15">
            <summary>
            第15张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T16">
            <summary>
            第16张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T17">
            <summary>
            第17张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T18">
            <summary>
            第18张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T19">
            <summary>
            第19张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T20">
            <summary>
            第20张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T21">
            <summary>
            第21张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T22">
            <summary>
            第22张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T23">
            <summary>
            第23张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T24">
            <summary>
            第24张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T25">
            <summary>
            第25张表
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.SQL.TableType.T26">
            <summary>
            第26张表
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataSQLFun">
            <summary>
            SQL 函数
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._MsSqlFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.MsSqlFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._MsSqlUnFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.MsSqlUnFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._SQLiteFun">
            <summary>
            SQLite 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.SQLiteFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._SQLiteUnFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.SQLiteUnFun">
            <summary>
            SQLServer 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._MySqlFun">
            <summary>
            MySQL对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.MySqlFun">
            <summary>
            MySQL对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._MySqlUnFun">
            <summary>
            MySQL对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.MySqlUnFun">
            <summary>
            MySQL对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._OracleFun">
            <summary>
            Oracle 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.OracleFun">
            <summary>
            Oracle 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._OracleUnFun">
            <summary>
            Oracle 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.OracleUnFun">
            <summary>
            Oracle 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._OledbFun">
            <summary>
            Oledb 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.OledbFun">
            <summary>
            Oledb 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._OledbUnFun">
            <summary>
            Oledb 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.OledbUnFun">
            <summary>
            Oledb 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._DamengFun">
            <summary>
            达梦 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.DamengFun">
            <summary>
            达梦 对象集
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataSQLFun._DamengUnFun">
            <summary>
            达梦 对象集
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataSQLFun.DamengUnFun">
            <summary>
            达梦 对象集
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataSQLFun.FieldFormat(XiaoFeng.Data.DbProviderType,System.String)">
            <summary>
            字段表格式
            </summary>
            <param name="dbProviderType">驱动类型</param>
            <param name="_">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.SubTableConfig">
            <summary>
            分表配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SubTableConfig.TableType">
            <summary>
            表类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.SubTableConfig.FieldName">
            <summary>
            分表字段
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.SubTableConfig.GetTableName(System.String,System.String)">
            <summary>
            获取分表名称
            </summary>
            <param name="suffix">后缀</param>
            <param name="defaultName">默认表名</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Data.TableDataColumn">
            <summary>
            
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/11/17 15:27:43
            Update Time : 2017/11/17 15:27:43
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.TableDataColumn.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.TableDataColumn.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataField">
            <summary>
            字段数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataField.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Data.DataField.#ctor(System.String,System.Object)">
            <summary>
            设置数据
            </summary>
            <param name="Name">字段名</param>
            <param name="Value">字段值</param>
        </member>
        <member name="P:XiaoFeng.Data.DataField.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataField.Value">
            <summary>
            字段值
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataField.Format">
            <summary>
            模式
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataField.IsWhere">
            <summary>
            是否是条件
            </summary>
        </member>
        <member name="P:XiaoFeng.Data.DataField.Encrypt">
            <summary>
            是否加密 0 不加密 1可逆加密 2不可逆加密
            </summary>
        </member>
        <member name="T:XiaoFeng.Data.DataColumns">
            <summary>
            列属性
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.SortID">
            <summary>
            顺序
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.IsIdentity">
            <summary>
            是否是自增长
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.PrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.Digits">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.IsNull">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.IsIndex">
            <summary>
            是否索引
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.IsUnique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.AutoIncrementStep">
            <summary>
            自增长步长
            </summary>
        </member>
        <member name="F:XiaoFeng.Data.DataColumns.AutoIncrementSeed">
            <summary>
            自增长种子
            </summary>
        </member>
        <member name="T:XiaoFeng.DateTimeHelper">
            <summary>
            日期操作类
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/9/18 0:51:57
            Update Time : 2017/9/18 0:51:57
            </summary>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetWeekAmount(System.Int32,System.DayOfWeek)">
            <summary>
            获取某一年有多少周
            </summary>
            <param name="year">年份</param>
            <param name="dayOfWeek">一星期中第一天是星期几</param>
            <returns>该年周数</returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            返回年度第几个星期   默认星期日是第一天
            </summary>
            <param name="date">时间</param>
            <param name="dayOfWeek">那天为一周的第一天</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.WeekOfYear">
            <summary>
            返回年度第几个星期
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetWeekTime(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            得到一年中的某周的起始日和截止日
            年 nYear
            周数 nNumWeek
            周始 out dtWeekStart
            周终 out dtWeekeEnd
            </summary>
            <param name="Year">年份</param>
            <param name="NumWeek">第几周</param>
            <param name="dtWeekStart">开始日期</param>
            <param name="dtWeekeEnd">结束日期</param>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetDateTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="TimeStamp">时间戳</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetTimeStamp(System.DateTime)">
            <summary>
            获取时间戳 秒
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetTimeStamp">
            <summary>
            获取时间戳 秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetTimeStamps(System.DateTime)">
            <summary>
            获取时间戳 毫秒
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimeHelper.GetTimeStamps">
            <summary>
            获取时间戳 毫秒
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.DateTimes">
            <summary>
            DateTime区间操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.DateTimes.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.DateTimes.#ctor(System.String)">
            <summary>
            设置数据 两个时间中间用' - '隔开
            </summary>
            <param name="v">字符串格式</param>
        </member>
        <member name="M:XiaoFeng.DateTimes.#ctor(System.DateTime,System.DateTime,System.String)">
            <summary>
            设置数据
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="separator">分隔符</param>
        </member>
        <member name="F:XiaoFeng.DateTimes.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.Start">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.End">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TimeSpan">
            <summary>
            相差时间
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TotalMonths">
            <summary>
            总月数
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TotalDays">
            <summary>
            总天数
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TotalHours">
            <summary>
            总小时
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TotalMinutes">
            <summary>
            总分钟
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TotalSeconds">
            <summary>
            总秒
            </summary>
        </member>
        <member name="P:XiaoFeng.DateTimes.TotalMilliseconds">
            <summary>
            总毫秒
            </summary>
        </member>
        <member name="M:XiaoFeng.DateTimes.IsDateTimes(System.String)">
            <summary>
            验证值格式
            </summary>
            <param name="v">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.Parse(System.String)">
            <summary>
            转换
            </summary>
            <param name="v">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.op_Explicit(System.String)~XiaoFeng.DateTimes">
            <summary>
            转换
            </summary>
            <param name="v">字符串格式</param>
        </member>
        <member name="M:XiaoFeng.DateTimes.ToString(System.String,System.IFormatProvider)">
            <summary>
            转字符串
            </summary>
            <param name="format">格式</param>
            <param name="formatProvider">格式机制</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.ToString(System.String)">
            <summary>
            转字符串
            </summary>
            <param name="format">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.CompareTo(XiaoFeng.DateTimes)">
            <summary>
            比较
            </summary>
            <param name="other">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.Equals(XiaoFeng.DateTimes)">
            <summary>
            是否相等
            </summary>
            <param name="other">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.DateTimes.op_Explicit(XiaoFeng.DateTimes)~System.Double">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.DateTimes.op_Explicit(XiaoFeng.DateTimes)~System.Int32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.DateTimes.op_Explicit(XiaoFeng.DateTimes)~System.String">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.DateTimes.IsEmpty">
            <summary>
            是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Device.Computer">
            <summary>
            电脑操作类
            Verstion : 1.0.1
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/9/17 23:56:56
            Update Time : 2018/07/03 17:47:25
            </summary>
        </member>
        <member name="M:XiaoFeng.Device.Computer.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Device.Computer.MacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Device.Computer.GetIP4Address">
            <summary>
            获得IP4地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Device.Computer.GetCpuID">
            <summary>
            获取 CPU ID
            </summary>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Device.Computer.UserName">
            <summary>
            操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Device.Computer.ComputerName">
            <summary>
            获取计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Device.Computer.GetPhysicalMemory">
            <summary>
            物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Device.Computer.GetMotherBoardID">
            <summary>
            获取主板ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Device.MemoryInfo">
            <summary>
            内存数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Device.MemoryInfo.Total">
            <summary>
            总计内存大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Device.MemoryInfo.Available">
            <summary>
            可用内存大小
            </summary>
        </member>
        <member name="T:XiaoFeng.EnumHelper">
            <summary>
            Enum 帮助类
            Version  : 1.0.1
            Author : jacky
            Create Date : 2016-06-05
            Update Date : 2016-07-04
            </summary>
        </member>
        <member name="T:XiaoFeng.WriteType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:XiaoFeng.WriteType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XiaoFeng.WriteType.JSON">
            <summary>
            JSON
            </summary>
        </member>
        <member name="F:XiaoFeng.WriteType.XML">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:XiaoFeng.WriteType.Null">
            <summary>
            空
            </summary>
        </member>
        <member name="T:XiaoFeng.ValueTypes">
            <summary>
            值类型枚举
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Null">
            <summary>
            空
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Class">
            <summary>
            类
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Struct">
            <summary>
            结构体
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Enum">
            <summary>
            枚举
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.List">
            <summary>
            List
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.ArrayList">
            <summary>
            ArrayList
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.IEnumerable">
            <summary>
            是否是集合类型
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.IDictionary">
            <summary>
            字典类型
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Anonymous">
            <summary>
            匿名类型
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.DataTable">
            <summary>
            DataTable
            </summary>
        </member>
        <member name="F:XiaoFeng.ValueTypes.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:XiaoFeng.ResponseState">
            <summary>
            消息状态
            </summary>
        </member>
        <member name="F:XiaoFeng.ResponseState.none">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XiaoFeng.ResponseState.success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:XiaoFeng.ResponseState.error">
            <summary>
            出错
            </summary>
        </member>
        <member name="F:XiaoFeng.ResponseState.warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="T:XiaoFeng.DateDiffType">
            <summary>
            DateDiff类型
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Milliseconds">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Seconds">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Minutes">
            <summary>
            分
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Hours">
            <summary>
            时
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Days">
            <summary>
            天
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Weeks">
            <summary>
            周
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Months">
            <summary>
            月
            </summary>
        </member>
        <member name="F:XiaoFeng.DateDiffType.Years">
            <summary>
            年
            </summary>
        </member>
        <member name="T:XiaoFeng.ConfigFormat">
            <summary>
            配置格式
            </summary>
        </member>
        <member name="F:XiaoFeng.ConfigFormat.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:XiaoFeng.ConfigFormat.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="F:XiaoFeng.ConfigFormat.Ini">
            <summary>
            Ini
            </summary>
        </member>
        <member name="T:XiaoFeng.ModelType">
            <summary>
            Model类型
            </summary>
        </member>
        <member name="F:XiaoFeng.ModelType.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="F:XiaoFeng.ModelType.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="F:XiaoFeng.ModelType.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="F:XiaoFeng.ModelType.Procedure">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="F:XiaoFeng.ModelType.Function">
            <summary>
            函数
            </summary>
        </member>
        <member name="T:XiaoFeng.PlatformOS">
            <summary>
            系统类型
            </summary>
        </member>
        <member name="F:XiaoFeng.PlatformOS.Linux">
            <summary>
            linux os
            </summary>
        </member>
        <member name="F:XiaoFeng.PlatformOS.OSX">
            <summary>
            mac os
            </summary>
        </member>
        <member name="F:XiaoFeng.PlatformOS.Windows">
            <summary>
            windows os
            </summary>
        </member>
        <member name="T:XiaoFeng.ExceptionType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="F:XiaoFeng.ExceptionType.Location">
            <summary>
            转向
            </summary>
        </member>
        <member name="F:XiaoFeng.ExceptionType.Show">
            <summary>
            展示
            </summary>
        </member>
        <member name="F:XiaoFeng.ExceptionType.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:XiaoFeng.FileAttribute">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="F:XiaoFeng.FileAttribute.UnKnown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:XiaoFeng.FileAttribute.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:XiaoFeng.FileAttribute.Directory">
            <summary>
            目录
            </summary>
        </member>
        <member name="T:XiaoFeng.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.No">
            <summary>
            不缓存
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.Memory">
            <summary>
            内存
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.Disk">
            <summary>
            磁盘
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.Redis">
            <summary>
            Redis
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.Memcache">
            <summary>
            Memcache
            </summary>
        </member>
        <member name="F:XiaoFeng.CacheType.MongoDB">
            <summary>
            MongoDB
            </summary>
        </member>
        <member name="T:XiaoFeng.EnumValueType">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="F:XiaoFeng.EnumValueType.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:XiaoFeng.EnumValueType.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XiaoFeng.EnumValueType.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="T:XiaoFeng.Event.MessageEventHandler">
            <summary>
            委托事件
            </summary>
            <param name="Message">消息</param>
            <param name="e">错误信息</param>
        </member>
        <member name="T:XiaoFeng.Expressions.SortDirection">
            <summary>
            指定排序操作的方向
            </summary>
        </member>
        <member name="F:XiaoFeng.Expressions.SortDirection.Ascending">
            <summary>
            按升序排序
            </summary>
        </member>
        <member name="F:XiaoFeng.Expressions.SortDirection.Descending">
            <summary>
            按降序排序
            </summary>
        </member>
        <member name="T:XiaoFeng.Expressions.QueryableHelper">
            <summary>
            处理Lambda表达式
            </summary>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper.BinaryExpressionProvider(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            处理节点
            </summary>
            <param name="left">左节点</param>
            <param name="right">右节点</param>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper.GetLambdaValue(System.Object)">
            <summary>
            Lambda取值
            </summary>
            <param name="val">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper.ExpressionRouter(System.Linq.Expressions.Expression)">
            <summary>
            设置规则
            </summary>
            <param name="exp">节点</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper.ExpressionTypeCast(System.Linq.Expressions.ExpressionType)">
            <summary>
            设置节点连接类型
            </summary>
            <param name="type">节点类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper.Eval(System.Linq.Expressions.Expression)">
            <summary>
            执行Lambda表达式
            </summary>
            <param name="expression">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Expressions.QueryableHelper`1">
            <summary>
            动态创建表达式
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="F:XiaoFeng.Expressions.QueryableHelper`1.Cache">
            <summary>
            键值对
            </summary>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper`1.OrderBy(System.Linq.IQueryable{`0},System.String,XiaoFeng.Expressions.SortDirection)">
            <summary>
            排序
            </summary>
            <param name="source">IQueryable</param>
            <param name="propertyName">属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper`1.ThenBy(System.Linq.IOrderedQueryable{`0},System.String,XiaoFeng.Expressions.SortDirection)">
            <summary>
            附加排序
            </summary>
            <param name="source">源IQueryable</param>
            <param name="propertyName">属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Expressions.QueryableHelper`1.GetLambdaExpression(System.String)">
            <summary>
            获取表达式
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Expressions.ReplaceVisitor">
            <summary>
            ReplaceVisitor 类说明
            </summary>
        </member>
        <member name="F:XiaoFeng.Expressions.ReplaceVisitor.from">
            <summary>
            
            </summary>
        </member>
        <member name="F:XiaoFeng.Expressions.ReplaceVisitor.to">
            <summary>
            
            </summary>
        </member>
        <member name="M:XiaoFeng.Expressions.ReplaceVisitor.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:XiaoFeng.Expressions.ReplaceVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.FTP.Catalog">
            <summary>
            目录信息
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.Catalog.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.FullPath">
            <summary>
            全路径
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.Extension">
            <summary>
            后缀
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.ModifyTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.Catalog.Attribute">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:XiaoFeng.FTP.FtpCommand">
            <summary>
            FTP命令
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.NOOP">
            <summary>
            等待
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.USER">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.PASS">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.QUIT">
            <summary>
            退出
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.EPRT">
            <summary>
            EPRT模式建立连接
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.EPSV">
            <summary>
            EPSV模式建立连接
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.PASV">
            <summary>
            PASV模式建立连接
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.CWD">
            <summary>
            改变工作目录
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.PWD">
            <summary>
            打印工作目录
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.CLNT">
            <summary>
            
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.NLST">
            <summary>
            文件简单列表
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.LIST">
            <summary>
            文件详情列表
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.MLSD">
            <summary>
            目录列表
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.RETR">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.STOR">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.DELE">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.MKD">
            <summary>
            创建目录
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.RMD">
            <summary>
            删除目录
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.RNFR">
            <summary>
            重命名
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.RNTO">
            <summary>
            重命名 覆盖原文件
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.SIZE">
            <summary>
            获取文件大小
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.TYPE">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.FEAT">
            <summary>
            
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.PBSZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpCommand.PROT">
            <summary>
            端口
            </summary>
        </member>
        <member name="T:XiaoFeng.FTP.FtpNodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpNodeType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpNodeType.Directory">
            <summary>
            目录
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpNodeType.SymbolicLink">
            <summary>
            快捷方式
            </summary>
        </member>
        <member name="T:XiaoFeng.FTP.FtpTransferMode">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpTransferMode.ASCII">
            <summary>
            ASCII
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpTransferMode.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="T:XiaoFeng.FTP.FtpClient">
            <summary>
            FTP客户端
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.#ctor(XiaoFeng.FTP.FtpClientConfig)">
            <summary>
            设置FTP配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClient.Config">
            <summary>
            FTP客户端配置
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpClient.SendSlim">
            <summary>
            发送信号
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpClient.ReceiveSlim">
            <summary>
            接收信号
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClient.Token">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClient.SocketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpClient.buffer">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClient.Connected">
            <summary>
            是否连接
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClient.RemoteDirectory">
            <summary>
            服务器目录
            </summary>
        </member>
        <member name="E:XiaoFeng.FTP.FtpClient.OnMessage">
            <summary>
            委托事件 接收消息
            </summary>
        </member>
        <member name="E:XiaoFeng.FTP.FtpClient.OnSendByte">
            <summary>
            委托事件 发送消息
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.Create(System.String)">
            <summary>
            连接
            </summary>
            <param name="remoteFullName">服务器文件地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetFtpResponse(System.Net.FtpWebRequest)">
            <summary>
            获取响应流
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetFtpResonseResult(System.Net.FtpWebRequest)">
            <summary>
            获取响应内容
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.Upload(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localFile">本地文件信息</param>
            <param name="remoteFile">服务器文件名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            连接
            </summary>
            <param name="token">取消通知</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.DisConnect(System.Threading.CancellationToken)">
            <summary>
            关闭连接
            </summary>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.SetTransferTypeAsync(XiaoFeng.FTP.TransferType,System.Threading.CancellationToken)">
            <summary>
            设置传输模式
            </summary>
            <param name="tType">传输模式</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetDirAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetDirListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetFileSizeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <param name="token">取消标识</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetFileInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获取文件信息
            </summary>
            <param name="strFileName">文件名</param>
            <param name="token">取消标识</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.RenameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.DownFilesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.DownFileAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            下载一个文件
            </summary>
            <param name="remoteFileName">要下载的文件名</param>
            <param name="localFolder">本地目录(绝对地址)</param>
            <param name="localFileName">保存在本地时的文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.DownFileNoBinaryAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.UploadFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传文件夹内所有文件到指定目录
            </summary>
            <param name="localFolder">本地文件夹</param>
            <param name="remoteFolder">服务器文件夹</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传文件到指定目录
            </summary>
            <param name="localFile">本地文件</param>
            <param name="remoteFolder">服务器文件夹</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.PutAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.PutAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            上传一个文件
            </summary>
            <param name="FileName">本地文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.PutByGuid(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传一个文件
            </summary>
            <param name="FileName">本地文件名</param>
            <param name="strGuid">服务器文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.NewPutByGuid(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传一个文件
            </summary>
            <param name="FileName">本地文件名</param>
            <param name="strGuid">服务器文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.MakeDirectoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            创建目录
            </summary>
            <param name="DirName">目录名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.RemoveDirectory(System.String,System.Threading.CancellationToken)">
            <summary>
            删除目录
            </summary>
            <param name="DirName">目录名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.ChangeDirectoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            改变目录
            </summary>
            <param name="NewDirName">新的工作目录名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.GetResponseAsync(System.Threading.CancellationToken)">
            <summary>
            获取应答信息
            </summary>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.CreateDataSocketAsync(System.Threading.CancellationToken)">
            <summary>
            建立进行数据连接的socket
            </summary>
            <param name="token">取消标识</param>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.ReadLineAsync(System.Threading.CancellationToken)">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <param name="token">取消标识</param>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.SendCommandAsync(XiaoFeng.FTP.FtpCommandEnvelope,System.Threading.CancellationToken)">
            <summary>
            发送命令并获取应答码和应答字符串
            </summary>
            <param name="command">命令</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.Message(System.String)">
            <summary>
            处理消息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.Message(System.String,System.Object[])">
            <summary>
            处理消息
            </summary>
            <param name="format">格式</param>
            <param name="param">参数组</param>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClient.SendByte(System.String)">
            <summary>
            返回已上传的数据
            </summary>
            <param name="sendbyte">发送字节</param>
        </member>
        <member name="T:XiaoFeng.FTP.FtpClientConfig">
            <summary>
            FTP客户端配置
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClientConfig.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.UserName">
            <summary>
            帐号
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.Timeout">
            <summary>
            连接超时
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ReadWriteTimeout">
            <summary>
            读写超时时长,单位是毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.DisconnectTimeout">
            <summary>
            断开超时时长
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ReceiveTimeout">
            <summary>
            接收超时时长
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.SendTimeout">
            <summary>
            发送超时时长
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ConnectCount">
            <summary>
            重试连接次数
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.LocalDirectory">
            <summary>
            本地目录
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.RemoteDirectory">
            <summary>
            服务器目录
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.CharsetName">
            <summary>
            编码名称
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ProxyHost">
            <summary>
            代理地址
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ProxyPort">
            <summary>
            代理端口
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ProxyUserName">
            <summary>
            代理帐号
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.ProxyPassword">
            <summary>
            代理密码
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.EnableSSL">
            <summary>
            是否使用SSL链接
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.UseBinary">
            <summary>
            是否允许二进制
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.UsePassive">
            <summary>
            是否允许被动式
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpClientConfig.KeepAlive">
            <summary>
            是否请求完成关闭链接
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpClientConfig.GetProxy">
            <summary>
            获取代理
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.FTP.FtpCommandEnvelope">
            <summary>
            FTP命令行封装包
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpCommandEnvelope.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpCommandEnvelope.#ctor(XiaoFeng.FTP.FtpCommand,System.String)">
            <summary>
            设置命令数据
            </summary>
            <param name="command">FTP命令</param>
            <param name="data">数据</param>
        </member>
        <member name="M:XiaoFeng.FTP.FtpCommandEnvelope.#ctor(XiaoFeng.FTP.FtpCommand)">
            <summary>
            设置命令数据
            </summary>
            <param name="command">FTP命令</param>
        </member>
        <member name="P:XiaoFeng.FTP.FtpCommandEnvelope.FtpCommand">
            <summary>
            FTP命令
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpCommandEnvelope.Data">
            <summary>
            FTP数据
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpCommandEnvelope.ToString">
            <summary>
            重新转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.FtpCommandEnvelope.ToBytes">
            <summary>
            获取字节
            </summary>
        </member>
        <member name="T:XiaoFeng.FTP.FtpResponse">
            <summary>
            FTP响应模型
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpResponse.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.FtpResponse.#ctor(System.String)">
            <summary>
            设置数据
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="P:XiaoFeng.FTP.FtpResponse.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpResponse.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpResponse.Data">
            <summary>
            接收数据
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.FtpResponse.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.FtpResponse.EmptyResponse">
            <summary>
            空响应
            </summary>
        </member>
        <member name="T:XiaoFeng.FTP.IFtpClient">
            <summary>
            FTP客户端接口
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.IFtpClient.Config">
            <summary>
            FTP客户端配置
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.IFtpClient.Token">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.IFtpClient.SocketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.IFtpClient.Connected">
            <summary>
            是否连接
            </summary>
        </member>
        <member name="P:XiaoFeng.FTP.IFtpClient.RemoteDirectory">
            <summary>
            服务器目录
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.Create(System.String)">
            <summary>
            连接
            </summary>
            <param name="remoteFullName">服务器文件地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetFtpResponse(System.Net.FtpWebRequest)">
            <summary>
            获取响应流
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetFtpResonseResult(System.Net.FtpWebRequest)">
            <summary>
            获取响应内容
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.Upload(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localFile">本地文件信息</param>
            <param name="remoteFile">服务器文件名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            连接
            </summary>
            <param name="token">取消通知</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.DisConnect(System.Threading.CancellationToken)">
            <summary>
            关闭连接
            </summary>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.SetTransferTypeAsync(XiaoFeng.FTP.TransferType,System.Threading.CancellationToken)">
            <summary>
            设置传输模式
            </summary>
            <param name="tType">传输模式</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetDirAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetDirListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetFileSizeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <param name="token">取消标识</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetFileInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            获取文件信息
            </summary>
            <param name="strFileName">文件名</param>
            <param name="token">取消标识</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.RenameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.DownFilesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.DownFileAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.DownFileNoBinaryAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.UploadFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传文件夹内所有文件到指定目录
            </summary>
            <param name="localFolder">本地文件夹</param>
            <param name="remoteFolder">服务器文件夹</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.UploadFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传文件到指定目录
            </summary>
            <param name="localFile">本地文件</param>
            <param name="remoteFolder">服务器文件夹</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.PutAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.PutAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            上传一个文件
            </summary>
            <param name="FileName">本地文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.PutByGuid(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传一个文件
            </summary>
            <param name="FileName">本地文件名</param>
            <param name="strGuid">服务器文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.NewPutByGuid(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            上传一个文件
            </summary>
            <param name="FileName">本地文件名</param>
            <param name="strGuid">服务器文件名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.MakeDirectoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            创建目录
            </summary>
            <param name="DirName">目录名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.RemoveDirectory(System.String,System.Threading.CancellationToken)">
            <summary>
            删除目录
            </summary>
            <param name="DirName">目录名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.ChangeDirectoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            改变目录
            </summary>
            <param name="NewDirName">新的工作目录名</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.GetResponseAsync(System.Threading.CancellationToken)">
            <summary>
            获取应答信息
            </summary>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.CreateDataSocketAsync(System.Threading.CancellationToken)">
            <summary>
            建立进行数据连接的socket
            </summary>
            <param name="token">取消标识</param>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.SendCommandAsync(XiaoFeng.FTP.FtpCommandEnvelope,System.Threading.CancellationToken)">
            <summary>
            发送命令并获取应答码和应答字符串
            </summary>
            <param name="command">命令</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.Message(System.String)">
            <summary>
            处理消息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:XiaoFeng.FTP.IFtpClient.Message(System.String,System.Object[])">
            <summary>
            处理消息
            </summary>
            <param name="format">格式</param>
            <param name="param">参数组</param>
        </member>
        <member name="T:XiaoFeng.FTP.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.TransferType.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:XiaoFeng.FTP.TransferType.ASCII">
            <summary>
            ASCII
            </summary>
        </member>
        <member name="T:XiaoFeng.Http.FormData">
            <summary>
            FormData 类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.FormData.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.FormData.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.FormData.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.FormData.FormType">
            <summary>
            表单类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Http.FormType">
            <summary>
            表单数据类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Http.FormType.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:XiaoFeng.Http.FormType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="T:XiaoFeng.Http.HttpBase">
            <summary>
            HTTP 基础类
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpBase.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpBase.CookieContainer">
            <summary>
            获取或设置与此响应关联的 Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpBase.Headers">
            <summary>
            指定构成 HTTP 标头的名称/值对的集合。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpBase.Method">
            <summary>
            获取或设置请求的方法
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpBase.ContentType">
            <summary>
            请求或响应内容类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Http.HttpHelper">
            <summary>
            网络请求库
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetResponseAsync(XiaoFeng.Http.HttpRequest)">
            <summary>
            获取Http内容
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetResponseAsync(System.String)">
            <summary>
            获取Http内容
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.DownFileAsync(XiaoFeng.Http.HttpRequest,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="request">请求对象</param>
            <param name="localPath">保存地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.DownFileAsync(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="url">远程地址</param>
            <param name="localPath">保存地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.CURLAsync(System.String,System.Collections.Generic.List{XiaoFeng.Http.FormData})">
            <summary>
            CURL请求
            </summary>
            <param name="url">地址</param>
            <param name="formData">formdata</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetResponse(XiaoFeng.Http.HttpRequest)">
            <summary>
            获取Http内容
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetResponse(System.String)">
            <summary>
            获取Http内容
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.DownFile(XiaoFeng.Http.HttpRequest,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="request">请求对象</param>
            <param name="localPath">保存地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.DownFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="url">远程地址</param>
            <param name="localPath">保存地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.CURL(System.String,System.Collections.Generic.List{XiaoFeng.Http.FormData})">
            <summary>
            CURL请求
            </summary>
            <param name="url">地址</param>
            <param name="formData">formdata</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Http.HttpHelper.http">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpHelper.Instance">
            <summary>
            获取单例
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetHtmlAsync(XiaoFeng.Http.HttpRequest)">
            <summary>
            获取Http内容
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetHtmlAsync(System.String)">
            <summary>
            获取Http内容
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetHtml(XiaoFeng.Http.HttpRequest)">
            <summary>
            获取Http内容
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpHelper.GetHtml(System.String)">
            <summary>
            获取Http内容
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Http.HttpMethod">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.#ctor(System.String)">
            <summary>
            设置请求类型
            </summary>
            <param name="method"></param>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Get">
            <summary>
            Get
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Post">
            <summary>
            Post
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Head">
            <summary>
            Head
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Patch">
            <summary>
            Patch
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Put">
            <summary>
            Put
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Trace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpMethod.Method">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.Equals(XiaoFeng.Http.HttpMethod)">
            <summary>
            是否相等
            </summary>
            <param name="other">请求类型</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.op_Equality(XiaoFeng.Http.HttpMethod,XiaoFeng.Http.HttpMethod)">
            <summary>
            是否相等
            </summary>
            <param name="left">请求类型</param>
            <param name="right">请求类型</param>
            <returns>summary</returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.op_Inequality(XiaoFeng.Http.HttpMethod,XiaoFeng.Http.HttpMethod)">
            <summary>
            是否不相等
            </summary>
            <param name="left">请求类型</param>
            <param name="right">请求类型</param>
            <returns>是否不相等</returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.op_Explicit(XiaoFeng.Http.HttpMethod)~System.String">
            <summary>
            显示转换
            </summary>
            <param name="method">请求类型</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.op_Implicit(System.String)~XiaoFeng.Http.HttpMethod">
            <summary>
            隐式转换
            </summary>
            <param name="method">请求类型</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj">请求类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.GetHashCode">
            <summary>
            HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpMethod.ToString">
            <summary>
            名称
            </summary>
            <returns>返回请求类型</returns>
        </member>
        <member name="T:XiaoFeng.Http.HttpRequest">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.#ctor(System.Net.Http.HttpClient)">
            <summary>
            设置请求对象
            </summary>
            <param name="httpClient">请求对象</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.#ctor(System.Threading.CancellationTokenSource)">
            <summary>
            设置请求对象
            </summary>
            <param name="source">信号源</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.#ctor(System.Net.Http.HttpClient,System.Threading.CancellationTokenSource)">
            <summary>
            设置请求对象
            </summary>
            <param name="httpClient">请求对象</param>
            <param name="source">信号源</param>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.CancelToken">
            <summary>
            取消状态
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Client">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.ClientHandler">
            <summary>
            消息处理程序
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.CompletionOption">
            <summary>
            操作是在响应可利用时立即视为已完成，还是在读取包含上下文的整个答案信息之后才视为已完成。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Host">
            <summary>
            设置Host的标头信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Cookies">
            <summary>
            获取或设置与此响应关联的 Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Address">
            <summary>
            请求网址
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.HttpContent">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Encoding">
            <summary>
            请求网址编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.UserAgent">
            <summary>
            获取或设置 User-agent HTTP 标头的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Timeout">
            <summary>
            请求超时时间 单位为毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时时间 单位为毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.AllowAutoRedirect">
            <summary>
            获取或设置一个值，该值指示请求是否应跟随重定向响应。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.MaximumAutomaticRedirections">
            <summary>
            获取或设置请求将跟随的重定向的最大数目。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.KeepAlive">
            <summary>
            获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.IfModifiedSince">
            <summary>
            获取和设置IfModifiedSince，默认为当前日期和时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.IPEndPoint">
            <summary>
            设置本地的出口ip和端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.ICredentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.ProtocolType">
            <summary>
            指定 Schannel 安全包支持的安全协议
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.ProtocolVersion">
            <summary>
            获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。默认为 System.Net.HttpVersion.Version11。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.CertPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.CertPassWord">
            <summary>
            证书密码
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.WebProxy">
            <summary>
            Http 代理
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Referer">
            <summary>
            获取或设置 Referer HTTP 标头的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.BodyData">
            <summary>
            Body请求数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.FormData">
            <summary>
            FormData数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.IsReset">
            <summary>
            请求完后是否重置请求对象以及响应对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.Request">
            <summary>
            请求消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpRequest.DecompressionMethod">
            <summary>
            压缩方式
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.GetResponseAsync">
            <summary>
            获取响应数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.Abort">
            <summary>
            取消请求
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.SetCerList">
            <summary>
            设置多个证书
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.AddCookie(System.String,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.AddCookie(System.Net.Cookie)">
            <summary>
            添加Cookie
            </summary>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.AddCookie(System.Net.CookieCollection)">
            <summary>
            添加Cookie
            </summary>
            <param name="collection">cookie集</param>
        </member>
        <member name="M:XiaoFeng.Http.HttpRequest.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="T:XiaoFeng.Http.HttpResponse">
            <summary>
            响应对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpResponse.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.Response">
            <summary>
            响应对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.ResponseUri">
            <summary>
            获取响应请求的 Internet 资源的 URI。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.ProtocolVersion">
            <summary>
            获取响应中使用的 HTTP 协议的版本。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.StatusDescription">
            <summary>
            获取与响应一起返回的状态说明。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.StatusCode">
            <summary>
            获取响应的状态。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.LastModified">
            <summary>
            获取最后一次修改响应内容的日期和时间。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.Server">
            <summary>
            获取发送响应的服务器的名称。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.CharacterSet">
            <summary>
            获取响应的字符集。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.ContentEncoding">
            <summary>
            获取用于对响应体进行编码的方法。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.ContentLength">
            <summary>
            获取请求返回的内容的长度。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.Data">
            <summary>
            结果字节集
            </summary>
        </member>
        <member name="F:XiaoFeng.Http.HttpResponse._Html">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.HttpResponse.Html">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpResponse.InitAsync">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.HttpResponse.GetBytesAsync">
            <summary>
            提取网页Byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpResponse.DownFileAsync(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="path">文件保存路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpResponse.GetCookie(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.HttpResponse.GetCookieValue(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Http.IHttpBase">
            <summary>
            基础接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpBase.CookieContainer">
            <summary>
            获取或设置与此响应关联的 Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpBase.Headers">
            <summary>
            指定构成 HTTP 标头的名称/值对的集合。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpBase.Method">
            <summary>
            获取或设置请求的方法
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpBase.ContentType">
            <summary>
            请求或响应内容类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Http.IHttpRequest">
            <summary>
            请求对象接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.CompletionOption">
            <summary>
            操作是在响应可利用时立即视为已完成，还是在读取包含上下文的整个答案信息之后才视为已完成。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Host">
            <summary>
            设置Host的标头信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Cookies">
            <summary>
            获取或设置与此响应关联的 Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Address">
            <summary>
            请求网址
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.HttpContent">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Encoding">
            <summary>
            请求网址编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.UserAgent">
            <summary>
            获取或设置 User-agent HTTP 标头的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Timeout">
            <summary>
            请求超时时间 单位为毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时时间 单位为毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.AllowAutoRedirect">
            <summary>
            获取或设置一个值，该值指示请求是否应跟随重定向响应。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.MaximumAutomaticRedirections">
            <summary>
            获取或设置请求将跟随的重定向的最大数目。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.KeepAlive">
            <summary>
            获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.IfModifiedSince">
            <summary>
            获取和设置IfModifiedSince，默认为当前日期和时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.IPEndPoint">
            <summary>
            设置本地的出口ip和端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.ICredentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.ProtocolType">
            <summary>
            指定 Schannel 安全包支持的安全协议
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.ProtocolVersion">
            <summary>
            获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。默认为 System.Net.HttpVersion.Version11。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.CertPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.CertPassWord">
            <summary>
            证书密码
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.WebProxy">
            <summary>
            Http 代理
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Referer">
            <summary>
            获取或设置 Referer HTTP 标头的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.BodyData">
            <summary>
            Body请求数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.FormData">
            <summary>
            FormData数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.IsReset">
            <summary>
            请求完后是否重置请求对象以及响应对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.Request">
            <summary>
            请求消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpRequest.DecompressionMethod">
            <summary>
            压缩方式
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.IHttpRequest.GetResponseAsync">
            <summary>
            获取响应数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.IHttpRequest.Abort">
            <summary>
            取消请求
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.IHttpRequest.AddCookie(System.String,System.String)">
            <summary>
            添加Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Http.IHttpRequest.AddCookie(System.Net.Cookie)">
            <summary>
            添加Cookie
            </summary>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:XiaoFeng.Http.IHttpRequest.AddCookie(System.Net.CookieCollection)">
            <summary>
            添加Cookie
            </summary>
            <param name="collection">cookie集</param>
        </member>
        <member name="T:XiaoFeng.Http.IHttpResponse">
            <summary>
            响应对象接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.Response">
            <summary>
            响应对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.ResponseUri">
            <summary>
            获取响应请求的 Internet 资源的 URI。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.ProtocolVersion">
            <summary>
            获取响应中使用的 HTTP 协议的版本。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.StatusDescription">
            <summary>
            获取与响应一起返回的状态说明。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.StatusCode">
            <summary>
            获取响应的状态。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.LastModified">
            <summary>
            获取最后一次修改响应内容的日期和时间。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.Server">
            <summary>
            获取发送响应的服务器的名称。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.CharacterSet">
            <summary>
            获取响应的字符集。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.ContentEncoding">
            <summary>
            获取用于对响应体进行编码的方法。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.ContentLength">
            <summary>
            获取请求返回的内容的长度。
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.Data">
            <summary>
            结果字节集
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.IHttpResponse.Html">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.IHttpResponse.DownFileAsync(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="path">文件保存路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.IHttpResponse.GetCookie(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.IHttpResponse.GetCookieValue(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Http.ReceiveMessageEventHandler">
            <summary>
            接收消息
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:XiaoFeng.Http.ErrorEventHandler">
            <summary>
            错误事件
            </summary>
            <param name="msg">错误信息</param>
        </member>
        <member name="T:XiaoFeng.Http.WebSocketClient">
            <summary>
            WebSocket客户端
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.WebSocketClient.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.WebSocketClient.#ctor(System.String,System.Threading.CancellationToken)">
            <summary>
            设置连接
            </summary>
            <param name="url">服务端网址</param>
            <param name="cancellationToken">Token凭证</param>
        </member>
        <member name="P:XiaoFeng.Http.WebSocketClient.CancelToken">
            <summary>
            Token凭证
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.WebSocketClient.ServerUri">
            <summary>
            服务端网址
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.WebSocketClient.Client">
            <summary>
            客户端对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Http.WebSocketClient.ClientState">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="E:XiaoFeng.Http.WebSocketClient.OnReceiveMessage">
            <summary>
            接收数据事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Http.WebSocketClient.OnError">
            <summary>
            错误事件
            </summary>
        </member>
        <member name="M:XiaoFeng.Http.WebSocketClient.ConnectAsync">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.WebSocketClient.HandleMessage">
            <summary>
            处理消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.WebSocketClient.CloseAsync">
            <summary>
            关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Http.WebSocketClient.SendAsync(System.String,System.Net.WebSockets.WebSocketMessageType)">
            <summary>
            发送消息
            </summary>
            <param name="msg">消息</param>
            <param name="messageType">消息类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.IIS.LoggingModel">
            <summary>
            日志Model
            </summary>
        </member>
        <member name="M:XiaoFeng.IIS.LoggingModel.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XiaoFeng.IIS.LoggingModel.#ctor(System.Boolean)">
            <summary>
            初始化Fields数据
            </summary>
            <param name="init">是否初始化</param>
        </member>
        <member name="M:XiaoFeng.IIS.LoggingModel.#ctor(System.String)">
            <summary>
            设置配置文件地址
            </summary>
            <param name="DataPath">配置文件地址</param>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.Current">
            <summary>
            静态属性
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.DataPath">
            <summary>
            配置路径
            </summary>
        </member>
        <member name="F:XiaoFeng.IIS.LoggingModel.CacheKey">
            <summary>
            数据库缓存键
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.MonitorTime">
            <summary>
            监控超过指定时长(超过这个时长则要存放另一个地方)
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.LogPath">
            <summary>
            日志路径
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.Filter">
            <summary>
            过滤文件后缀
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.Storage">
            <summary>
            存储类型
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.Fields">
            <summary>
            显示字段
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.Log">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:XiaoFeng.IIS.LoggingModel.LogQueue">
            <summary>
            日志队列
            </summary>
        </member>
        <member name="M:XiaoFeng.IIS.LoggingModel.WriteLog(Microsoft.AspNetCore.Http.HttpContext,System.DateTime,System.DateTime,System.Diagnostics.Process,System.TimeSpan,System.Int64,System.Int64)">
            <summary>
            写日志
            </summary>
            <param name="context">请求对象</param>
            <param name="StartTime">开始请求时间</param>
            <param name="EndTime">响应结束时间</param>
            <param name="process">进程</param>
            <param name="processStartTime">进程开始时间</param>
            <param name="ResponseTime">响应时间</param>
            <param name="RunRAM">运行内存</param>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingModel.Data">
            <summary>
            配置数据
            </summary>
        </member>
        <member name="T:XiaoFeng.IIS.LoggingField">
            <summary>
            字段属性
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingField.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingField.Value">
            <summary>
            字段值
            </summary>
        </member>
        <member name="P:XiaoFeng.IIS.LoggingField.IsShow">
            <summary>
            是否显示
            </summary>
        </member>
        <member name="T:XiaoFeng.Image.ImageHelper">
            <summary>
            图片常规操作类
            Version : v 1.0.0
            Create Date : 2016-12-02
            Author : jacky
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
        </member>
        <member name="T:XiaoFeng.Image.ImageHelper.ImageMergeOrientation">
            <summary>
            图片拼接布局枚举
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageHelper.ImageMergeOrientation.Horizontal">
            <summary>
            水平
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageHelper.ImageMergeOrientation.Vertical">
            <summary>
            纵向
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageHelper.CombineImages(System.Collections.Generic.List{System.IO.FileInfo},XiaoFeng.Image.ImageHelper.ImageMergeOrientation)">
            <summary>
            合并图片
            </summary>
            <param name="files">文件流</param>
            <param name="mergeType">合并方向</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Image.ImageWater">
            <summary>
            打水印操作类 V 1.1
            Author: jacky
            QQ: 7092734
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageWater.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageWater.AddText">
            <summary>
            添加打文字水印
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageWater.AddImage">
            <summary>
            添加打图片水印
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.errMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.ErrMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.waterText">
            <summary>
            打水印文字
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.WaterText">
            <summary>
            打水印文字
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater._isDelTempFile">
            <summary>
            是否删除临时文件
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.IsDelTempFile">
            <summary>
            是否删除临时文件
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontFamily">
            <summary>
            水印文字字体
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontFamily">
            <summary>
            水印文字字体
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontSize">
            <summary>
            水印文字大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontSize">
            <summary>
            水印文字大小
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontWeight">
            <summary>
            水印文字是否加粗
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontWeight">
            <summary>
            水印文字是否加粗
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontItalic">
            <summary>
            水印文字是否加斜
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontItalic">
            <summary>
            水印文字是否加斜
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontColor">
            <summary>
            水印文字颜色
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontColor">
            <summary>
            水印文字颜色
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontPositionX">
            <summary>
            文字水印在图的横坐标
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontPositionX">
            <summary>
            文字水印在图的横坐标
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.fontPositionY">
            <summary>
            文字水印在图的纵坐标
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.FontPositionY">
            <summary>
            文字水印在图的纵坐标
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.textAlign">
            <summary>
            打水印位置 0:正中间 1:左上角 2:右上角 3:左下角 4:右下角 
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.TextAlign">
            <summary>
            打水印位置 0:正中间 1:左上角 2:右上角 3:左下角 4:右下角 
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.waterImagePath">
            <summary>
            水印图片地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.WaterImagePath">
            <summary>
            水印图片地址
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.imagePath">
            <summary>
            打水印的图片地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.ImagePath">
            <summary>
            打水印的图片地址
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageWater.newImagePath">
            <summary>
            保存图片地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageWater.NewImagePath">
            <summary>
            保存图片地址
            </summary>
        </member>
        <member name="T:XiaoFeng.Image.ImageThumbnail">
            <summary>
            缩略图操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageThumbnail.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageThumbnail.MakeMyThumbPhoto(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            切割后生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="toW">缩略图最终宽度</param>
            <param name="toH">缩略图最终高度</param>
            <param name="X">X坐标（zoom为1时）</param>
            <param name="Y">Y坐标（zoom为1时）</param>
        </member>
        <member name="M:XiaoFeng.Image.ImageThumbnail.MakeMyThumbPhoto">
            <summary>
            切割后生成缩略图
            </summary>
        </member>
        <member name="M:XiaoFeng.Image.ImageThumbnail.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图模式 指定字符串"WH"指定宽高缩放（可能变形）,"W"指定宽缩放,"H"指定高缩放,"Cut"指定高宽裁减（不变形）,"EQ" 指定宽高等比例缩放(不变形)</param>    
        </member>
        <member name="M:XiaoFeng.Image.ImageThumbnail.MakeThumbnail">
            <summary>
            生成缩略图
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._SourcePath">
            <summary>
            源图片路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.SourcePath">
            <summary>
            源图片路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._TargetPath">
            <summary>
            目标路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.TargetPath">
            <summary>
            目标路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._Width">
            <summary>
            宽
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.Width">
            <summary>
            宽
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._Height">
            <summary>
            高
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.Height">
            <summary>
            高
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._ModeType">
            <summary>
            模式 指定字符串"WH"指定宽高缩放（可能变形）,"W"指定宽缩放,"H"指定高缩放,"Cut"指定高宽裁减（不变形）,"EQ" 指定宽高等比例缩放(不变形)
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.ModeType">
            <summary>
            模式 指定字符串"WH"指定宽高缩放（可能变形）,"W"指定宽缩放,"H"指定高缩放,"Cut"指定高宽裁减（不变形）,"EQ" 指定宽高等比例缩放(不变形)
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._PosX">
            <summary>
            X坐标
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.PosX">
            <summary>
            X坐标
            </summary>
        </member>
        <member name="F:XiaoFeng.Image.ImageThumbnail._PosY">
            <summary>
            Y坐标
            </summary>
        </member>
        <member name="P:XiaoFeng.Image.ImageThumbnail.PosY">
            <summary>
            Y坐标
            </summary>
        </member>
        <member name="T:XiaoFeng.IO.CsvFile">
            <summary>
            CSV文件操作
            </summary>
        </member>
        <member name="P:XiaoFeng.IO.CsvFile.Encoding">
            <summary>文件编码 默认为UTF-8</summary>
        </member>
        <member name="F:XiaoFeng.IO.CsvFile._stream">
            <summary>
            数据流
            </summary>
        </member>
        <member name="P:XiaoFeng.IO.CsvFile.Separator">
            <summary>分隔符 默认逗号</summary>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.#ctor(System.IO.Stream)">
            <summary>数据流实例化</summary>
            <param name="stream"></param>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.#ctor(System.String,System.Boolean)">
            <summary>Csv文件实例化</summary>
            <param name="file">文件路径</param>
            <param name="write">是否可写</param>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.Dispose(System.Boolean)">
            <summary>
            回收
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.ReadLine">
            <summary>读取一行</summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.ReadAll">
            <summary>读取所有行</summary>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.IO.CsvFile._reader">
            <summary>
            读取流
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.EnsureReader">
            <summary>
            确认读取流可用
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.WriteAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>写入全部</summary>
            <param name="data">数据</param>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.WriteLine(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>写入一行</summary>
            <param name="line">行数据</param>
        </member>
        <member name="F:XiaoFeng.IO.CsvFile._writer">
            <summary>
            写入流
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.CsvFile.EnsureWriter">
            <summary>
            确认写入流可用
            </summary>
        </member>
        <member name="T:XiaoFeng.IO.FayFile">
            <summary>
            自定义文件操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.#ctor(System.String)">
            <summary>
            设置文件路径
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="P:XiaoFeng.IO.FayFile.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.Exists">
            <summary>
            文件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.CreateFile(System.String,System.Text.Encoding)">
            <summary>
            创建文件
            </summary>
            <param name="content">内容</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="bytes">字节</param>
            <param name="offset">位置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.AppendFile(System.String,System.Text.Encoding)">
            <summary>
            附加内容到文件
            </summary>
            <param name="content">内容</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.DeleteFile">
            <summary>
            删除文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FayFile.DeleteDirectory">
            <summary>
            删除目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.IO.FileHelper">
            <summary>
            IO操作类
            Version : 1.0.2
            2020-11-25
            增加文件编码判断
            V 1.0.2
            2020-12-02
            增加目录是否存在
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.Exists(System.String,XiaoFeng.FileAttribute)">
            <summary>
            文件或目录是否存在
            </summary>
            <param name="path">路径</param>
            <param name="attribute">文件类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.Create(System.String,XiaoFeng.FileAttribute)">
            <summary>
            创建目录或文件
            </summary>
            <param name="path">路径</param>
            <param name="attribute">文件类型</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.Create(System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件内容
            </summary>
            <param name="path">文件路径</param>
            <param name="content">文件内容</param>
            <param name="encoding">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.Delete(System.String,XiaoFeng.FileAttribute)">
            <summary>
            删除文件或目录
            </summary>
            <param name="path">路径</param>
            <param name="attribute">属性</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.OpenText(System.String,System.Text.Encoding)">
            <summary>
            读取文件内容
            </summary>
            <param name="path">文件路径</param>
            <param name="encoding">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.OpenBytes(System.String)">
            <summary>
            读取文件字节
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.OpenSBytes(System.String)">
            <summary>
            读取文件字节
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件内容
            </summary>
            <param name="path">文件路径</param>
            <param name="content">文件内容</param>
            <param name="encoding">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.WriteBytes(System.String,System.Byte[],System.Int32)">
            <summary>
            写文件字节
            </summary>
            <param name="path">文件路径</param>
            <param name="bytes">文件字节</param>
            <param name="offset">开始写位置 0重写 -1 附加 其它为从指定位置写</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.AppendText(System.String,System.String,System.Text.Encoding)">
            <summary>
            附加文件内容
            </summary>
            <param name="path">文件路径</param>
            <param name="content">文件内容</param>
            <param name="encoding">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.AppendBytes(System.String,System.Byte[])">
            <summary>
            附加文件字节
            </summary>
            <param name="path">文件路径</param>
            <param name="bytes">字节</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.DeleteDirectoryEmpty(System.String,System.String)">
            <summary>
            删除目录如果空目录继续向上删除
            </summary>
            <param name="path">路径</param>
            <param name="root">根目录</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.DeleteDirectoryEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            删除目录如果空目录继续向上删除
            </summary>
            <param name="directory">目录</param>
            <param name="root">根目录</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.DeleteDirectory(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="path">目录路径</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.Rename(System.String,System.String)">
            <summary>
            重命名
            </summary>
            <param name="source">文件路径</param>
            <param name="newName">新文件名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.MoveFile(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="source">源文件</param>
            <param name="dest">目录文件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.MoveDirectory(System.String,System.String)">
            <summary>
            移动目录及目录下所有文件
            </summary>
            <param name="source">源路径</param>
            <param name="dest">目的路径</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.MoveDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            移动目录及目录下所有文件
            </summary>
            <param name="source">源目录</param>
            <param name="dest">目的目录</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="source">源文件路径</param>
            <param name="dest">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.CopyDirectory(System.String,System.String)">
            <summary>
            复制目录及目录下所有文件
            </summary>
            <param name="source">源目录路径</param>
            <param name="dest">目的目录路径</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.CopyDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            复制目录及目录下所有文件
            </summary>
            <param name="source">源目录</param>
            <param name="dest">目的目录</param>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetFolderSize(System.String)">
            <summary>
            计算文件夹大小
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetBasePath(System.String)">
            <summary>
            获取文件路径
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.ConvertByte(System.Double)">
            <summary>
            字节转相应单位
            </summary>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetRootStaticPath">
            <summary>
            获取根目录
            </summary>
        </member>
        <member name="P:XiaoFeng.IO.FileHelper.CurrentDirectory">
            <summary>
            获取项目目录
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetEncoding(System.Byte[])">
             <summary>
             通过分析其字节顺序标记（BOM）确定文本文件的编码。
            当文本文件的字节序检测失败时，默认为ASCII。
             </summary>
             <param name="data">文件字节</param>
             <returns>文件编码</returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.IsUTF8Bytes(System.Byte[])">
            <summary> 
            判断是否是不带BOM的UTF8 格式 
            </summary> 
            <param name="data"></param> 
            <returns></returns> 
        </member>
        <member name="P:XiaoFeng.IO.FileHelper.PathSeparator">
            <summary>
            用于在环境变量中分隔路径字符串的平台特定的分隔符 如;
            </summary>
        </member>
        <member name="P:XiaoFeng.IO.FileHelper.DirectorySeparatorChar">
            <summary>
            提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。如:\
            </summary>
        </member>
        <member name="P:XiaoFeng.IO.FileHelper.AltDirectorySeparatorChar">
            <summary>
            提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。如/
            </summary>
        </member>
        <member name="P:XiaoFeng.IO.FileHelper.VolumeSeparatorChar">
            <summary>
            提供平台特定的卷分隔符。如:
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetInvalidFileNameChars">
            <summary>
            获取包含不允许在文件名中使用的字符的数组
            </summary>
            <returns>包含不允许在文件名中使用的字符的数组</returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetInvalidPathChars">
            <summary>
            获取包含不允许在路径名中使用的字符的数组
            </summary>
            <returns>包含不允许在路径名中使用的字符的数组</returns>
        </member>
        <member name="P:XiaoFeng.IO.FileHelper.NewLine">
            <summary>
            新行
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetExtension(System.String)">
            <summary>
            返回指定的路径字符串的扩展名
            </summary>
            <param name="path">路径</param>
            <returns>扩展名</returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetFileName(System.String)">
            <summary>
            返回指定的路径字符串的文件名和扩展名
            </summary>
            <param name="path">路径</param>
            <returns>文件名和扩展名</returns>
        </member>
        <member name="M:XiaoFeng.IO.FileHelper.GetDirectoryName(System.String)">
            <summary>
            返回指定的路径字符串的目录信息
            </summary>
            <param name="path">路径</param>
            <returns>目录信息</returns>
        </member>
        <member name="T:XiaoFeng.IO.PrototypeHelper">
            <summary>
            扩展方法
            </summary>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.ToFayFile(System.String)">
            <summary>
            转换成魔法文件操作
            </summary>
            <param name="_">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetBasePath(System.String)">
            <summary>
            获取路径的绝对路径
            </summary>
            <param name="_">路径</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.CopyTo(System.IO.DirectoryInfo,System.String)">
            <summary>
            复制目录到另一个目录
            </summary>
            <param name="_">源目录</param>
            <param name="destDirName">目标目录</param>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.Remove(System.IO.DirectoryInfo)">
            <summary>
            移除目录
            </summary>
            <param name="_">目标目录</param>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            获取子目录
            </summary>
            <param name="_">目录</param>
            <param name="dirName">子目录名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetSubFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            获取子文件
            </summary>
            <param name="_">目录</param>
            <param name="fileName">子文件</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.ToFileInfo(System.String)">
            <summary>
            转换为文件对象
            </summary>
            <param name="_">文件地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.ToDirectoryInfo(System.String)">
            <summary>
            转换为目录对象
            </summary>
            <param name="_">目录地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetDirectoryName(System.String)">
            <summary>
            返回指定路径字符串目录信息
            </summary>
            <param name="_">路径字符串</param>
            <returns>path 的目录信息；如果 path 表示根目录或为 null，则为 null。 如果 path 不包含目录信息，则返回 System.String.Empty。</returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.ChangeExtension(System.String,System.String)">
            <summary>
            更改路径字符串的扩展名
            </summary>
            <param name="_">要修改的路径信息</param>
            <param name="extension">新的扩展名（有或没有前导句点）。 指定 null 以从 path 移除现有扩展名</param>
            <returns>已修改的路径信息</returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetExtension(System.String)">
            <summary>
            返回指定的路径字符串的扩展名
            </summary>
            <param name="_">从中获取扩展名的路径字符串</param>
            <returns>指定路径的扩展名（包含句点“.”）、或 null、或 System.String.Empty。 如果 path 为 null，则 System.IO.Path.GetExtension(System.String) 返回 null。 如果 path 不具有扩展名信息，则 System.IO.Path.GetExtension(System.String) 返回 System.String.Empty。</returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetFileName(System.String)">
            <summary>
            返回指定路径字符串的文件名和扩展名
            </summary>
            <param name="_">从中获取文件名和扩展名的路径字符串</param>
            <returns>中最后一个目录字符后的字符。 如果 path 的最后一个字符是目录或卷分隔符，则此方法返回 System.String.Empty。 如果 path为 null，则此方法返回 null</returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
            返回不具有扩展名的指定路径字符串的文件名
            </summary>
            <param name="_">文件的路径</param>
            <returns>但不包括最后的句点 (.) 以及之后的所有字符</returns>
        </member>
        <member name="M:XiaoFeng.IO.PrototypeHelper.HasExtension(System.String)">
            <summary>
            确定路径是否包括文件扩展名
            </summary>
            <param name="_">用于搜索扩展名的路径</param>
            <returns>如果路径中最后一个目录分隔符（\\ 或 /）或卷分隔符 (:) 之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 true；否则为 false</returns>
        </member>
        <member name="T:XiaoFeng.Json.DescriptionConverter">
            <summary>
            属性值
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.DescriptionConverter.#ctor">
            <summary>
            初始化属性值
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonConverter">
            <summary>
            Json转换类
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonConverter.#ctor">
            <summary>
            初始化属性
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonConverter.CanRead">
            <summary>
            能读
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonConverter.CanWrite">
            <summary>
            能写
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonConverterAttribute">
            <summary>
            Json属性类
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            设置转换类型
            </summary>
            <param name="converterType">转换类型</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            设置属性配置
            </summary>
            <param name="converterType">转换类型</param>
            <param name="converterParameters">属性</param>
        </member>
        <member name="P:XiaoFeng.Json.JsonConverterAttribute.ConverterType">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            属性配置
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonData">
            <summary>
            Json数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonData.#ctor(System.String)">
            <summary>
            设置数据
            </summary>
            <param name="jsonString">json串数据</param>
        </member>
        <member name="F:XiaoFeng.Json.JsonData._JsonString">
            <summary>
            Json串
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonData.JsonString">
            <summary>
            Json串
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonData.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonData.Data">
            <summary>
            结果集
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonElement">
            <summary>
            json 节点
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonElement.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonElement.#ctor(System.String)">
            <summary>
            设置节点名称
            </summary>
            <param name="name">节点名称</param>
        </member>
        <member name="P:XiaoFeng.Json.JsonElement.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonException">
            <summary>
            Json异常操作类
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonException.FlagName">
            <summary>
            标识名
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonException.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonException.#ctor(System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            设置错误信息及异常
            </summary>
            <param name="message">错误信息</param>
            <param name="exception">异常</param>
        </member>
        <member name="T:XiaoFeng.Json.JsonIgnoreAttribute">
            <summary>
            表示可序列化类的字段或属性不应进行序列化
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonIgnoreAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonParser">
            <summary>
            Json解析器
            Description:
            2018-10-18
            1.优化字符串开始也可以用'\''或'"'
            2020-12-16
            1.新增DataTable序列化与反序列化
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonParser.JsonObjectInitCapacity">
            <summary>
            对象容量
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonParser.JsonArrayInitCapacity">
            <summary>
            数组容量
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonParser.DefaultSettings">
            <summary>
            全局默认设置
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.Parse(System.String)">
            <summary>
            转换Json对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.DeserializeObject(System.String)">
            <summary>
            反序列化对象
            </summary>
            <param name="json">json串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.DeserializeObject``1(System.String)">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="json">json串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.DeserializeObject(System.String,System.Type)">
            <summary>
            反序列化对象
            </summary>
            <param name="json">json串</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.SerializeObject(System.Object,XiaoFeng.Json.JsonSerializerSetting)">
            <summary>
            序列化对象
            </summary>
            <param name="value">对象</param>
            <param name="formatterSetting">Json格式设置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.SerializeObject(System.Object,System.Boolean)">
            <summary>
            序列化对象
            </summary>
            <param name="value">对象</param>
            <param name="indented">是否格式化</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.Json.JsonParser.StartChar">
            <summary>
            开始字符 开始字符是'"'或'\''
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.ParseValue(XiaoFeng.Json.JsonData)">
            <summary>
            转换Json对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.ParseObject(XiaoFeng.Json.JsonData)">
            <summary>
            转换成对象
            </summary>
            <param name="data">json数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.ParseArray(XiaoFeng.Json.JsonData)">
            <summary>
            转换成数组
            </summary>
            <param name="data">json数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.ParseString(XiaoFeng.Json.JsonData)">
            <summary>
            转换成字符串
            </summary>
            <param name="data">json数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.ParseNumber(XiaoFeng.Json.JsonData)">
            <summary>
            转换成数字
            </summary>
            <param name="data">json数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.SkipWhiteSpace(XiaoFeng.Json.JsonData)">
            <summary>
            跳过空格回车串
            </summary>
            <param name="data">json数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.GetUnicodeCodePoint(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            获取unicode代码
            </summary>
            <param name="c1">第一个字符</param>
            <param name="c2">第二个字符</param>
            <param name="c3">第三个字符</param>
            <param name="c4">第四个字符</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonParser.UnicodeCharToInt(System.Char)">
            <summary>
            单个unicode字符转int
            </summary>
            <param name="c">字符</param>
        </member>
        <member name="T:XiaoFeng.Json.DebugTool">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.DebugTool.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            断言问题
            </summary>
            <param name="condition">条件</param>
            <param name="msg">消息</param>
            <param name="args">参数</param>
        </member>
        <member name="T:XiaoFeng.Json.JsonReader">
            <summary>
            Json读取器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.Read``1(System.String)">
            <summary>
            反序列化Json成对象
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.Read(System.String,System.Type)">
            <summary>
            反序列化Json成对象
            </summary>
            <param name="json">json字符串</param>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.ToObjectBak(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>Json字典或列表转为具体类型对象</summary>
            <param name="jsonValue">Json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.ToObject(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>Json字典或列表转为具体类型对象</summary>
            <param name="jsonValue">Json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.ParseArray(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成数组
            </summary>
            <param name="jsonValue">json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.ParseList(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成List
            </summary>
            <param name="jsonValue">json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.ParseObject(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成对象
            </summary>
            <param name="jsonValue">Json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns> 
        </member>
        <member name="M:XiaoFeng.Json.JsonReader.ParseDictionary(XiaoFeng.Json.JsonValue,System.Type,System.Collections.IDictionary)">
            <summary>
            转换成字典
            </summary>
            <param name="jsonValue">Json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Json.JsonSerializerSetting">
            <summary>
            Json格式设置
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonSerializerSetting.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.GuidFormat">
            <summary>
            Guid格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.DateTimeFormat">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.Indented">
            <summary>
            是否格式化
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.EnumValueType">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.MaxDepth">
            <summary>
            解析最大深度
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.IsComment">
            <summary>
            是否写注释
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.IgnoreCase">
            <summary>
            忽略大小写 key值统一变为小写
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonSerializerSetting.OmitEmptyNode">
            <summary>
            忽略空节点
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonType">
            <summary>
            Json类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Bool">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.DateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Float">
            <summary>
            浮点
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Null">
            <summary>
            空
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonType.Char">
            <summary>
            字符
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.JsonValue">
            <summary>
            JsonValue
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(XiaoFeng.Json.JsonType,System.Object)">
            <summary>
            设置数据值
            </summary>
            <param name="type">类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(XiaoFeng.Json.JsonValue[])">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Collections.Generic.List{XiaoFeng.Json.JsonValue})">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Single)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Double)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Decimal)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Int64)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.UInt64)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.DateTime)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Guid)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Type)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Boolean)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.String)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Object)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Int32)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.UInt32)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Byte)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.SByte)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.Int16)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.#ctor(System.UInt16)">
            <summary>
            设置数据值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:XiaoFeng.Json.JsonValue.SerializerSetting">
            <summary>
            序列化格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonValue.Type">
            <summary>
            Json类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonValue.value">
            <summary>
            Json对象值
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonValue.Item(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Json.JsonValue.Item(System.Int32)">
            <summary>
            获取对象
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGet(System.String)">
            <summary>
            使用JsonValue作为JsonObject并按键获取JsonValue项
            如果没有找到则返回空
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetObject(System.String)">
            <summary>
            使用JsonValue作为JsonObject并按键获取JsonObject项
            如果没有找到则返回空
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetArray(System.String)">
            <summary>
            使用JsonValue作为JsonObject并按键获取JsonArray项
            如果没有找到则返回空
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetString(System.String)">
            <summary>
            使用JsonValue作为JsonObject并按键获取字符串项
            如果没有找到则返回空
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetDateTime(System.String,System.DateTime)">
            <summary>
            使用JsonValue作为JsonObject并按键获取时间项
            如果没有找到则返回默认值
            </summary>
            <param name="key">key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetGuid(System.String,System.Guid)">
            <summary>
            使用JsonValue作为JsonObject并按键获取Guid项
            如果没有找到则返回默认值
            </summary>
            <param name="key">key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetFloat(System.String,System.Single)">
            <summary>
            使用JsonValue作为JsonObject并按键获取浮点项
            如果没有找到则返回默认值
            </summary>
            <param name="key">key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetLong(System.String,System.Int64)">
            <summary>
            使用JsonValue作为JsonObject并按键获取int项
            如果没有找到则返回默认值
            </summary>
            <param name="key">key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetType(System.String)">
            <summary>
            使用JsonValue作为JsonObject并按键获取Type项
            如果没有找到则返回默认值
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetBool(System.String,System.Boolean)">
            <summary>
            使用JsonValue作为JsonObject并按键获取bool项.
            如果没有找到则返回默认值
            </summary>
            <param name="key">key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObjectGetIsNull(System.String)">
            <summary>
            使用JsonValue作为JsonObject并按键检查null项
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsArray">
            <summary>
            使用JsonValue作为JsonArray
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.AsObject">
            <summary>
            使用JsonValue作为JsonObject
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.IsNull">
            <summary>
            JsonValue 是否为空
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.Value``1(System.String,``0)">
            <summary>
            获取Value值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.CompareTo(System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.CompareTo(XiaoFeng.Json.JsonValue)">
            <summary>
            比较
            </summary>
            <param name="other">其它值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Equality(XiaoFeng.Json.JsonValue,XiaoFeng.Json.JsonValue)">
            <summary>
            两类型相等
            </summary>
            <param name="a">第一个对象</param>
            <param name="b">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Inequality(XiaoFeng.Json.JsonValue,XiaoFeng.Json.JsonValue)">
            <summary>
            两类型不相等
            </summary>
            <param name="a">第一个对象</param>
            <param name="b">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Int32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Int32)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.UInt32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.UInt32)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Int16">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Int16)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.UInt16">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.UInt16)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Int64">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Int64)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.UInt64">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.UInt64)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Byte">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Byte)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.SByte">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.SByte)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Double">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Double)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Single">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Single)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Decimal">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Decimal)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Boolean">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Boolean)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.DateTime">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.DateTime)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.Guid">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.Guid)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Explicit(XiaoFeng.Json.JsonValue)~System.String">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.op_Implicit(System.String)~XiaoFeng.Json.JsonValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.Parse(System.String)">
            <summary>
            转换类型
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.TryParse(System.String,XiaoFeng.Json.JsonValue@)">
            <summary>
            转换类型
            </summary>
            <param name="value">值</param>
            <param name="val">返回值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.Equals(XiaoFeng.Json.JsonValue)">
            <summary>
            相等
            </summary>
            <param name="other">其它值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.GetTypeCode">
            <summary>
            获取类型码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToObject``1">
            <summary>
            转类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToObject(System.Type,System.Object)">
            <summary>
            转类型
            </summary>
            <param name="type">类型</param>
            <param name="target">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToList">
            <summary>
            转类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToArray">
            <summary>
            转类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToList``1">
            <summary>
            转换类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToArray``1">
            <summary>
            转类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.GetValue(System.Type)">
            <summary>
            转类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToCast``1(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToDictionary">
            <summary>
            转换成字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToDictionary``2">
            <summary>
            转类型
            </summary>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToDictionary``1">
            <summary>
            转类型
            </summary>
            <typeparam name="TValue">Value</typeparam>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToBoolean(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToByte(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToChar(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToDateTime(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToGuid(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToDecimal(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToDouble(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToFloat(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToInt16(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToShort(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToInt32(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToInt(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToInt64(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToLong(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToSByte(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToSingle(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            转字符串
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToString(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <param name="conversionType">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToType(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToUInt16(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToUShort(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToUInt32(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToUInt(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToUInt64(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ToUlong(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ParseArray(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成数组
            </summary>
            <param name="jsonValue">json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ParseList(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成List
            </summary>
            <param name="jsonValue">json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ParseDataTable(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成DataTable
            </summary>
            <param name="jsonValue">jsonValue</param>
            <param name="type">目标类型</param>
            <param name="target">目标</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ParseObject(XiaoFeng.Json.JsonValue,System.Type,System.Object)">
            <summary>
            转换成对象
            </summary>
            <param name="jsonValue">Json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns> 
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.ParseDictionary(XiaoFeng.Json.JsonValue,System.Type,System.Collections.IDictionary)">
            <summary>
            转换成字典
            </summary>
            <param name="jsonValue">Json对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.Equals(System.Object)">
            <summary>
            重写 Equals
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonValue.GetHashCode">
            <summary>
            重写 GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Json.JsonWriter">
            <summary>
            写Json
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.#ctor(XiaoFeng.Json.JsonSerializerSetting)">
            <summary>
            设置日期格式Json格式设置        
            </summary>
            <param name="formatterSetting">Json格式设置</param>
        </member>
        <member name="F:XiaoFeng.Json.JsonWriter.Builder">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonWriter._Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonWriter._DepthDict">
            <summary>
            字典集
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonWriter.SerializerSetting">
            <summary>
            Json格式
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            写数据
            </summary>
            <param name="value">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteDateTime(System.DateTime)">
            <summary>
            写时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteGuid(System.Guid)">
            <summary>
            写Guid
            </summary>
            <param name="guid">guid</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteObject(System.Object)">
            <summary>
            写对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteDataTable(System.Data.DataTable)">
            <summary>
            写DataTable
            </summary>
            <param name="data">数据表</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteDataRow(System.Data.DataRow)">
            <summary>
            写DataRow
            </summary>
            <param name="dr">数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteNV(System.Collections.Specialized.NameValueCollection)">
            <summary>
            写键值对
            </summary>
            <param name="nvs">键值对</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WritePair(System.String,System.Object,System.String)">
            <summary>
            写键值对
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
            <param name="prefix">前缀字符</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteArray(System.Collections.IEnumerable)">
            <summary>
            写数组
            </summary>
            <param name="arr">数组</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteSD(System.Collections.Specialized.StringDictionary)">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteStringDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteDictionary(System.Collections.IDictionary)">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteStringFast(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteString(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteType(System.Type)">
            <summary>
            写类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.WriteJsonValue(XiaoFeng.Json.JsonValue)">
            <summary>
            写JsonValue
            </summary>
            <param name="jsonValue"></param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriter.Format(System.String)">
            <summary>格式化Json文本</summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Json.JsonWriterX">
            <summary>
            写Json
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.#ctor(XiaoFeng.Json.JsonSerializerSetting)">
            <summary>
            设置日期格式Json格式设置        
            </summary>
            <param name="formatterSetting">Json格式设置</param>
        </member>
        <member name="F:XiaoFeng.Json.JsonWriterX.Builder">
            <summary>
             数据
             </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonWriterX._Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="F:XiaoFeng.Json.JsonWriterX._DepthDict">
            <summary>
            字典集
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.JsonWriterX.SerializerSetting">
            <summary>
            Json格式
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteValue(System.Object)">
            <summary>
            写数据
            </summary>
            <param name="value">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteDateTime(System.DateTime)">
            <summary>
            写时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteGuid(System.Guid)">
            <summary>
            写Guid
            </summary>
            <param name="guid">guid</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteObject(System.Object)">
            <summary>
            写对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteDataTable(System.Data.DataTable)">
            <summary>
            写DataTable
            </summary>
            <param name="data">数据表</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteDataRow(System.Data.DataRow)">
            <summary>
            写DataRow
            </summary>
            <param name="dr">数据</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteNV(System.Collections.Specialized.NameValueCollection)">
            <summary>
            写键值对
            </summary>
            <param name="nvs">键值对</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WritePair(System.String,System.Object)">
            <summary>
            写键值对
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteArray(System.Collections.IEnumerable)">
            <summary>
            写数组
            </summary>
            <param name="arr">数组</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteSD(System.Collections.Specialized.StringDictionary)">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteStringDictionary(System.Collections.IDictionary)">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteStringDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteDictionary(System.Collections.IDictionary)">
            <summary>
            写字典
            </summary>
            <param name="dic">字典</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteStringFast(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteString(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteType(System.Type)">
            <summary>
            写类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.WriteJsonValue(XiaoFeng.Json.JsonValue)">
            <summary>
            写JsonValue
            </summary>
            <param name="jsonValue"></param>
        </member>
        <member name="M:XiaoFeng.Json.JsonWriterX.Format(System.String)">
            <summary>格式化Json文本</summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Json.StringEnumConverter">
            <summary>
            枚举字符
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.StringEnumConverter.#ctor">
            <summary>
            初始化属性值
            </summary>
        </member>
        <member name="T:XiaoFeng.Json.XValue">
            <summary>
            定义类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Object,XiaoFeng.Json.JsonType)">
            <summary>
            设置值
            </summary>
            <param name="value">值</param>
            <param name="type">类型</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor">
            <summary>
            设置Null
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Int32)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.UInt32)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Int16)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.UInt16)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Int64)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.UInt64)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Double)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Decimal)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Single)">
            <summary>
            设置数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.String)">
            <summary>
            设置字符
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Char)">
            <summary>
            设置字符
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Byte)">
            <summary>
            设置字节
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.SByte)">
            <summary>
            设置字节
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.DateTime)">
            <summary>
            设置时间
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Guid)">
            <summary>
            设置Guid
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Boolean)">
            <summary>
            设置Bool
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Type)">
            <summary>
            设置Type
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Array)">
            <summary>
            设置数组
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置数组
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Collections.ArrayList)">
            <summary>
            设置数组
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(XiaoFeng.Json.XValue)">
            <summary>
            设置对象
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.#ctor(System.Object)">
            <summary>
            设置对象
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:XiaoFeng.Json.XValue.ValueType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Json.XValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XiaoFeng.Json.XValue.CompareTo(System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.CompareTo(XiaoFeng.Json.XValue)">
            <summary>
            比较
            </summary>
            <param name="other">其它值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Int32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Int32)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.UInt32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.UInt32)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Int16">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Int16)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.UInt16">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.UInt16)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Int64">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Int64)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.UInt64">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.UInt64)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Byte">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Byte)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.SByte">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.SByte)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Double">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Double)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Single">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Single)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Decimal">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Decimal)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Boolean">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Boolean)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.DateTime">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.DateTime)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.Guid">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.Guid)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Explicit(XiaoFeng.Json.XValue)~System.String">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Implicit(System.String)~XiaoFeng.Json.XValue">
            <summary>
            隐式转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Json.XValue.Equals(XiaoFeng.Json.XValue)">
            <summary>
            相等
            </summary>
            <param name="other">其它值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.GetHashCode">
            <summary>
            获取 HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.Equals(System.Object)">
            <summary>
            相等
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Equality(XiaoFeng.Json.XValue,XiaoFeng.Json.XValue)">
            <summary>
            相等
            </summary>
            <param name="x1">第一个对象</param>
            <param name="x2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.op_Inequality(XiaoFeng.Json.XValue,XiaoFeng.Json.XValue)">
            <summary>
            不相等
            </summary>
            <param name="x1">第一个对象</param>
            <param name="x2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.GetTypeCode">
            <summary>
            获取类型码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToBoolean(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToByte(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToChar(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToDateTime(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToGuid(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToDecimal(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToDouble(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToFloat(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToInt16(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToInt32(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToInt64(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToSByte(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToSingle(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            转字符串
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToString(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <param name="conversionType">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToUInt16(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToUInt32(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Json.XValue.ToUInt64(System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="provider">格式</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.JSONConvert">
            <summary>
            JSON序列化 反序列化
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/10/25 11:59:42
            Update Time : 2017/10/25 11:59:42
            </summary>
        </member>
        <member name="M:XiaoFeng.JSONConvert.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.JSONConvert.Deserialize``1(System.String,System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="json"></param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.JSONConvert.SerializerObject``1(``0,System.String)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="t">对象</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.JSONConvert.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Log.BaseLog">
            <summary>
            日志基础类
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.LogPath">
            <summary>
            日志路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.StorageType">
            <summary>
            存储类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.ConsoleFlags">
            <summary>
            输出控制台标识
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.ConnectionConfig">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.MessageType">
            <summary>
            消息类型类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.BaseLog.Config">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Error(System.Exception,System.String)">
            <summary>
            错误
            </summary>
            <param name="ex">错误</param>
            <param name="message"></param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.SQL(System.String)">
            <summary>
            SQL
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Task(System.String)">
            <summary>
            任务
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Record(System.String,XiaoFeng.Log.LogType)">
            <summary>
            记录
            </summary>
            <param name="message">消息</param>
            <param name="type">类型</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Write(XiaoFeng.Log.LogData)">
            <summary>
            记录日志
            </summary>
            <param name="log">日志</param>
        </member>
        <member name="M:XiaoFeng.Log.BaseLog.Run(XiaoFeng.Log.LogData)">
            <summary>
            写数据
            </summary>
            <param name="log">消息内容</param>
        </member>
        <member name="T:XiaoFeng.Log.LogType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.SQL">
            <summary>
            SQL
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.Task">
            <summary>
            任务
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogType.Error">
            <summary>
            出错
            </summary>
        </member>
        <member name="T:XiaoFeng.Log.StorageType">
            <summary>
            存储类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.StorageType.No">
            <summary>
            不存储
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.StorageType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.StorageType.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.StorageType.Console">
            <summary>
            控制台
            </summary>
        </member>
        <member name="T:XiaoFeng.Log.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.ILog.LogPath">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.ILog.StorageType">
            <summary>
            存储类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.ILog.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.ILog.ConsoleFlags">
            <summary>
            输出控制台标识
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.ILog.Write(XiaoFeng.Log.LogData)">
            <summary>
            写日志
            </summary>
            <param name="log">日志</param>
        </member>
        <member name="M:XiaoFeng.Log.ILog.SQL(System.String)">
            <summary>
            SQL
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.ILog.Error(System.Exception,System.String)">
            <summary>
            错误
            </summary>
            <param name="ex">异常</param>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.ILog.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.ILog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.ILog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Log.ILog.Record(System.String,XiaoFeng.Log.LogType)">
            <summary>
            记录
            </summary>
            <param name="message">消息</param>
            <param name="type">类型</param>
        </member>
        <member name="T:XiaoFeng.Log.LogData">
            <summary>
            日志数据操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.LogData.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.ErrorID">
            <summary>
            错误ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.FunctionName">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.DataSource">
            <summary>
            错误源
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.IsReplace">
            <summary>
            是否去除前缀
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.StackTrace">
            <summary>
            错误堆栈
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.Tracking">
            <summary>
            错误堆栈
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.RequestUrl">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.AddTime">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Log.LogData.IsRecord">
            <summary>
            是否记录
            </summary>
        </member>
        <member name="T:XiaoFeng.Log.LogFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.LogFactory.#cctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.LogFactory.Data">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.LogFactory.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">类型</param>
            <param name="name">日志名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Log.LogFactory.Create``1(System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Log.Logger">
            <summary>
            日志操作类
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.Logger.FileLock">
            <summary>
            文件锁
            </summary>
        </member>
        <member name="F:XiaoFeng.Log.Logger.Count">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:XiaoFeng.Log.Logger.Run(XiaoFeng.Log.LogData)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Log.Logger.ExistsFile(System.String)">
            <summary>
            文件是否存在
            </summary>
            <param name="FilePath">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Log.Logger.ClearLog">
            <summary>
            清理日志
            </summary>
        </member>
        <member name="T:XiaoFeng.LogHelper">
            <summary>
            日志操作类
            Email : jacky@fayelf.com
            QQ : 7092734
            Site : www.fayelf.com
            Version : 2.5
            Update Date : 2019-09-20
            </summary>
        </member>
        <member name="M:XiaoFeng.LogHelper.#cctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.LogHelper.FileLock">
            <summary>
            文件锁
            </summary>
        </member>
        <member name="P:XiaoFeng.LogHelper.Log">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:XiaoFeng.LogHelper.LogQueue">
            <summary>
            日志队列
            </summary>
        </member>
        <member name="M:XiaoFeng.LogHelper.WriteLog(XiaoFeng.Log.LogData)">
            <summary>
            记录日志
            </summary>
            <param name="logData">日志对象</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.WriteLog(XiaoFeng.Log.LogType,System.String,System.String,System.String,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="logType">日志类型</param>
            <param name="DataSource">日志源</param>
            <param name="ClassName">日志类名</param>
            <param name="FunctionName">方法名</param>
            <param name="Message">日志信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.WriteLog(XiaoFeng.Log.LogType,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="logType">日志类型</param>
            <param name="Message">日志信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.WriteLog(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="Message">日志信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.WriteLog(System.Exception,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="ex">错误信息</param>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.Error(System.Exception,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="ex">错误信息</param>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.Info(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.Debug(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.SQL(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.Warn(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.Task(System.String)">
            <summary>
            任务日志
            </summary>
            <param name="Message">信息</param>
        </member>
        <member name="M:XiaoFeng.LogHelper.Record(System.String,XiaoFeng.Log.LogType)">
            <summary>
            记录日志
            </summary>
            <param name="Message">信息</param>
            <param name="logType">日志类型</param>
        </member>
        <member name="T:XiaoFeng.MathHelper">
            <summary>
            数字扩展方法
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/10/31 14:18:38
            Update Time : 2017/10/31 14:18:38
            </summary>
        </member>
        <member name="M:XiaoFeng.MathHelper.RightMove(System.Int32,System.Int32)">
            <summary>
            无符号右移
            </summary>
            <param name="value">整型</param>
            <param name="pos">移动位数 默认2位</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.MathHelper.keys">
            <summary>
            生成编码字符
            </summary>
        </member>
        <member name="M:XiaoFeng.MathHelper.DecimalToString(System.Decimal,System.Int32)">
            <summary>
            10进制转任意进制
            </summary>
            <param name="value">10进制数据</param>
            <param name="NumberFormat">进制数</param>
            <returns>返回一个转换后的进制数据</returns>
        </member>
        <member name="M:XiaoFeng.MathHelper.StringToDecimal(System.String,System.Int32)">
            <summary>
            任意进制转换原数据
            </summary>
            <param name="value">任意进制</param>
            <param name="NumberFormat">转换回原进制</param>
            <returns>返回任意进制转换原数据</returns>
        </member>
        <member name="M:XiaoFeng.MathHelper.Pow(System.Decimal,System.Decimal)">
            <summary>
            一个数据的N次方
            </summary>
            <param name="baseNo">数据</param>
            <param name="x">次幂数</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.UInt8Array">
            <summary>
            表示 8 位无符号整数。
            </summary>
        </member>
        <member name="F:XiaoFeng.UInt8Array.MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:XiaoFeng.UInt8Array.MinValue">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XiaoFeng.UInt8Array.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:XiaoFeng.UInt8Array.#ctor(System.Int32)">
            <summary>
            设置数组长度
            </summary>
            <param name="Length">长度</param>
        </member>
        <member name="M:XiaoFeng.UInt8Array.Set(System.Int32,System.Int64)">
            <summary>
            赋值数据
            </summary>
            <param name="index">索引</param>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.UInt8Array.Set(System.Object[],System.Int32)">
            <summary>
            复制数组到当前数组
            </summary>
            <param name="a">要复制的数组</param>
            <param name="start">复制到数组的开始位置</param>
        </member>
        <member name="M:XiaoFeng.UInt8Array.Get(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.UInt8Array.Item(System.Int32)">
            <summary>
            设置获取值
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.UInt8Array.Delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="P:XiaoFeng.UInt8Array.Length">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="M:XiaoFeng.UInt8Array.ToString">
            <summary>
            将此实例的数值转换为其等效的字符串表示形式。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Int8Array">
            <summary>
            表示 8 位有符号整数。
            </summary>
        </member>
        <member name="F:XiaoFeng.Int8Array.MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:XiaoFeng.Int8Array.MinValue">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XiaoFeng.Int8Array.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Int8Array.#ctor(System.Int32)">
            <summary>
            设置数据长度
            </summary>
            <param name="Length">长度</param>
        </member>
        <member name="M:XiaoFeng.Int8Array.Get(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Int8Array.Set(System.Int32,System.Int64)">
            <summary>
            赋值
            </summary>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="P:XiaoFeng.Int8Array.Item(System.Int32)">
            <summary>
            获取或设置数据
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Int8Array.Set(System.Object[],System.Int32)">
            <summary>
            复制数组到当前数组
            </summary>
            <param name="a">要复制的数组</param>
            <param name="start">复制到数组的开始位置</param>
        </member>
        <member name="M:XiaoFeng.Int8Array.Delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Int8Array.Length">
            <summary>
            获取数据长度
            </summary>
        </member>
        <member name="M:XiaoFeng.Int8Array.ToString">
            <summary>
            将此实例的数值转换为其等效的字符串表示形式。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.EntityBase`1">
            <summary>
            实体基础类
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="T:XiaoFeng.ValueChange">
            <summary>
            定义属性值改变委托
            </summary>
            <param name="name">属性名称</param>
            <param name="oldValue">老值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="T:XiaoFeng.EntityBase">
            <summary>
            实体基础类
            </summary>
        </member>
        <member name="E:XiaoFeng.EntityBase.OnValueChange">
            <summary>
            委托事件
            </summary>
        </member>
        <member name="M:XiaoFeng.EntityBase.RemoveAllValues(System.String)">
            <summary>
            移除值
            </summary>
            <param name="key">key值</param>
        </member>
        <member name="M:XiaoFeng.EntityBase.SetAllValues(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
        </member>
        <member name="F:XiaoFeng.EntityBase.AllValues">
            <summary>
            键名与值字典
            </summary>
        </member>
        <member name="P:XiaoFeng.EntityBase.Item(System.String)">
            <summary>
            通过字段名获取相应的值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="F:XiaoFeng.EntityBase._AllKeys">
            <summary>
            对象所有属性名集合
            </summary>
        </member>
        <member name="P:XiaoFeng.EntityBase.AllKeys">
            <summary>
            对象所有属性名集合
            </summary>
        </member>
        <member name="P:XiaoFeng.EntityBase.Dirtys">
            <summary>
            脏数据 
            </summary>
        </member>
        <member name="M:XiaoFeng.EntityBase.GetDirty">
            <summary>
            获取脏数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.EntityBase.AddDirty(System.String)">
            <summary>
            添加脏数据
            </summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:XiaoFeng.EntityBase.AddDirty(System.String,System.Object,System.Object)">
            <summary>
            添加脏数据
            </summary>
            <param name="fieldName">字段名</param>
            <param name="oldValue">老值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:XiaoFeng.EntityBase.SetDirty(XiaoFeng.Model.DirtyCollection)">
            <summary>
            设置脏数据
            </summary>
            <param name="dirty">脏数据</param>
        </member>
        <member name="M:XiaoFeng.EntityBase.ClearDirty(System.String)">
            <summary>
            清理脏数据 字段名为空则清空所有脏数据
            </summary>
        </member>
        <member name="M:XiaoFeng.EntityBase.Remove(System.String)">
            <summary>
            清理脏数据
            </summary>
            <param name="fieldName">字段</param>
        </member>
        <member name="M:XiaoFeng.EntityBase.Remove(System.Collections.Generic.List{System.String})">
            <summary>
            清理脏数据
            </summary>
            <param name="list">数据</param>
        </member>
        <member name="M:XiaoFeng.EntityBase.ContainsDirty(System.String)">
            <summary>
            是否存在于脏数据中
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.EntityBase.ToJSON(XiaoFeng.Json.JsonSerializerSetting)">
            <summary>
            转Json
            </summary>
            <param name="formatting">Json格式设置</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.EntityBase.ToJSON(System.Boolean)">
            <summary>
            转Json
            </summary>
            <param name="indented">是否格式化</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.EntityBase.ToXML(System.String,System.Boolean,System.Boolean)">
            <summary>
            转Xml
            </summary>
            <param name="encode">编码</param>
            <param name="removeNamespaces">是否移除命名空间</param>
            <param name="removeXmlDeclaration">是否移除XML声明</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Net.ClientSession">
            <summary>
            客户端Session
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.ClientSession.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ClientSession.Cookie">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ClientSession.UserAgent">
            <summary>
            浏览器信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ClientSession.Origin">
            <summary>
            Origin
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ClientSession.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ClientSession.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ClientSession.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.ClientSession.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.DataFrame">
            <summary>
            数据帧头,就是包头结构
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrame.Opcode">
            <summary>
            opcode
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrame._Header">
            <summary>
            帧头
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrame._Extend">
            <summary>
            标识
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrame._Mask">
            <summary>
            0或4个字节，客户端发送给服务端的数据，都是通过内嵌的一个32位值作为掩码的；掩码键只有在掩码位设置为1的时候存在。
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrame._Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrame.DataType">
            <summary>
            Socket 数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrame.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.DataFrame.#ctor(System.Byte[])">
            <summary>
            设置消息
            </summary>
            <param name="buffer">字节</param>
        </member>
        <member name="M:XiaoFeng.Net.DataFrame.#ctor(System.String,System.Text.Encoding,XiaoFeng.Net.OpCode,XiaoFeng.Net.SocketDataType)">
            <summary>
            设置消息
            </summary>
            <param name="content">内容</param>
            <param name="encoding">编码</param>
            <param name="dataType">数据类型</param>
            <param name="opcode">4位操作码，定义有效负载数据</param>
        </member>
        <member name="M:XiaoFeng.Net.DataFrame.GetBytes">
            <summary>
            获取消息数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Net.DataFrame.Text">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.DataFrame.Mask(System.Byte[],System.Byte[])">
            <summary>
            0或4个字节，客户端发送给服务端的数据，都是通过内嵌的一个32位值作为掩码的；掩码键只有在掩码位设置为1的时候存在。
            </summary>
            <param name="data">数据</param>
            <param name="mask">数组</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Net.DataFrameHeader">
            <summary>
            帧头操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.DataFrameHeader.#ctor(System.Byte[])">
            <summary>
            设置数据
            </summary>
            <param name="buffer">字节</param>
        </member>
        <member name="M:XiaoFeng.Net.DataFrameHeader.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.SByte,System.Boolean,System.Int32)">
            <summary>
            发送封装数据
            </summary>
            <param name="fin">0表示不是当前消息的最后一帧，后面还有消息,1表示这是当前消息的最后一帧</param>
            <param name="rsv1">1位，若没有自定义协议,必须为0,否则必须断开</param>
            <param name="rsv2">1位，若没有自定义协议,必须为0,否则必须断开.</param>
            <param name="rsv3">1位，若没有自定义协议,必须为0,否则必须断开</param>
            <param name="opcode">4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.</param>
            <param name="hasmask">1位，定义传输的数据是否有加掩码,如果有掩码则存放在MaskingKey</param>
            <param name="length">传输数据的长度</param>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._fin">
            <summary>
            0表示不是当前消息的最后一帧，后面还有消息,1表示这是当前消息的最后一帧
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._rsv1">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._rsv2">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开.
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._rsv3">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._opcode">
            <summary>
            4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._maskcode">
            <summary>
            1位，定义传输的数据是否有加掩码,如果有掩码则存放在MaskingKey
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.DataFrameHeader._payloadlength">
            <summary>
            传输数据的长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.FIN">
            <summary>
            0表示不是当前消息的最后一帧，后面还有消息,1表示这是当前消息的最后一帧
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.RSV1">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.RSV2">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开.
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.RSV3">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.OpCode">
            <summary>
            4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.HasMask">
            <summary>
            1位，定义传输的数据是否有加掩码,如果有掩码则存放在MaskingKey
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.DataFrameHeader.Length">
            <summary>
            传输数据的长度
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.DataFrameHeader.GetBytes">
            <summary>
            返回帧头字节
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Net.Email">
            <summary>
             发送邮件操作类
            Verstion : 1.0.1
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2018/04/10 17:25:39
            Update Time : 2018/04/10 17:25:39
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.Email.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._ToMail">
            <summary>
            发送到邮箱地址 如果是多个 用","分开 如：jacky@zhuovi.com:jacky,service@zhuovi.com:service
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.ToMail">
            <summary>
            发送到邮箱地址 如果是多个 用","分开 如：jacky@zhuovi.com:jacky,service@zhuovi.com:service
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._BCCMail">
            <summary>
            密送邮箱地址 如果是多个 用","分开 如：jacky@zhuovi.com:jacky,service@zhuovi.com:service
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.BCCMail">
            <summary>
            密送到邮箱地址 如果是多个 用","分开 如：jacky@zhuovi.com:jacky,service@zhuovi.com:service
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._CCMail">
            <summary>
            抄送邮箱地址 如果是多个 用","分开 如：jacky@zhuovi.com:jacky,service@zhuovi.com:service
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.CCMail">
            <summary>
            抄送到邮箱地址 如果是多个 用","分开 如：jacky@zhuovi.com:jacky,service@zhuovi.comt:service
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._FromMail">
            <summary>
            发送邮箱地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.FromMail">
            <summary>
            发送邮箱地址
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._FromName">
            <summary>
             发送人姓名
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.FromName">
            <summary>
            发送人姓名
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._Subject">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.Subject">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._SubjectEncoding">
            <summary>
            标题编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.SubjectEncoding">
            <summary>
            标题编码
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._Body">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.Body">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._BodyEncoding">
            <summary>
            内容编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.BodyEncoding">
            <summary>
            内容编码
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._UserName">
            <summary>
            用户帐号
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.UserName">
            <summary>
            用户帐号
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._UserPwd">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.UserPwd">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._SmtpHost">
            <summary>
            邮件服务器
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.SmtpHost">
            <summary>
            邮件服务器
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._SmtpPort">
            <summary>
            邮件服务器端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.SmtpPort">
            <summary>
            邮件服务器端口
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._Attachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.Attachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._Priority">
            <summary>
            邮件优先级
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.Priority">
            <summary>
            邮件优先级
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.Email._ErrorMessage">
            <summary>
            发送错误信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.Email.ErrorMessage">
            <summary>
            发送错误信息
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.Email.Send">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.NewConnectionEventHandler">
            <summary>
            新连接委托
            </summary>
            <param name="session">对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.MessageEventHandler">
            <summary>
            接收消息委托
            </summary>
            <param name="session">对象</param>
            <param name="message">消息</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.MessageByteEventHandler">
            <summary>
            接收消息委托
            </summary>
            <param name="session">对象</param>
            <param name="message">消息</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.DisconnectedEventHandler">
            <summary>
            断开连接委托
            </summary>
            <param name="session"></param>
            <param name="e"></param>
        </member>
        <member name="T:XiaoFeng.Net.SessionErrorEventHandler">
            <summary>
            错误信息委托
            </summary>
            <param name="session">对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.StopEventHandler">
            <summary>
            停止服务委托
            </summary>
            <param name="socket">对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.ErrorEventHandler">
            <summary>
            错误信息委托
            </summary>
            <param name="socket">对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.StartEventHandler">
            <summary>
            启动委托
            </summary>
            <param name="socket">服务对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Net.IClientSession">
            <summary>
            客户端用户数据接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IClientSession.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IClientSession.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IClientSession.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IClientSession.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.INetClient">
            <summary>
            网络客户端接口
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.INetServer">
            <summary>
            网络服务端接口
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnNewConnection">
            <summary>
            新的连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnMessage">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnMessageByte">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnStop">
            <summary>
            停止服务事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnError">
            <summary>
            出错事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnClientError">
            <summary>
            客户端错误事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.INetServer.OnStart">
            <summary>
            服务器启动事件
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.SendFile(System.String,XiaoFeng.Net.IServerSession)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Send(System.String,System.Net.Sockets.Socket)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Send(System.String,XiaoFeng.Net.IServerSession)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Send(System.Byte[],System.Net.Sockets.Socket)">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Send(System.Byte[],XiaoFeng.Net.IServerSession)">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.AddQueue(XiaoFeng.Net.IServerSession)">
            <summary>
            加入队列
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.RemoveQueue(XiaoFeng.Net.INetSession)">
            <summary>
            移除队列
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.RemoveQueue(System.Net.IPEndPoint)">
            <summary>
            移除队列
            </summary>
            <param name="endPoint">网络地址</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.ClearQueue">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.GetQueue(System.Net.Sockets.Socket)">
            <summary>
            获取连接对象
            </summary>
            <param name="socket">连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.GetQueue(System.Func{XiaoFeng.Net.IServerSession,System.Boolean})">
            <summary>
            获取在线列表中的客户端
            </summary>
            <param name="func">满足条件的函数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.CountQueue">
            <summary>
            获取队列数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.GetData">
            <summary>
            复制出一个在线列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.BulkAddIpBlack(System.Collections.Generic.List{System.String})">
            <summary>
            批量加入黑名单
            </summary>
            <param name="list">列表</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.AddIpBlack(System.String)">
            <summary>
            加入黑名单
            </summary>
            <param name="ip">ip</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.RemoveIpBlack(System.String)">
            <summary>
            移除黑名单
            </summary>
            <param name="ip">ip</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.ClearIpBlack">
            <summary>
            清空黑名单
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.IsBlackIP(System.String)">
            <summary>
            是否在黑名单
            </summary>
            <param name="ip">ip</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Close(System.Func{XiaoFeng.Net.IServerSession,System.Boolean})">
            <summary>
            关闭在线列表中的客户端
            </summary>
            <param name="func">满足条件的函数</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Close(XiaoFeng.Net.IServerSession)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Close(System.Net.IPEndPoint)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="endPoint">IP节点</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Close(System.Net.EndPoint)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="endPoint">IP节点</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Close(System.String,System.String)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">客户端IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.Close(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">客户端IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.INetServer.IsConnected(System.Net.IPEndPoint)">
            <summary>
            是否在线
            </summary>
            <param name="endPoint">IP和port</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Net.INetSession">
            <summary>
            ISession
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.WsType">
            <summary>
            WS类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.Headers">
            <summary>
            Header头信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.SocketType">
            <summary>
            是否是WebSocket
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.EndPoint">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.ConnectionSocket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.ConnectionTime">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.OpCode">
            <summary>
            4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.IsDataMasked">
            <summary>
            是否打包
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.PingTimeStamp">
            <summary>
            ping时间戳
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.INetSession.IsNewLine">
            <summary>
            发送消息是否换行
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.GetBytes(System.String)">
            <summary>
            获取字节组
            </summary>
            <param name="content">数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.GetString(System.Byte[])">
            <summary>
            获取字符串
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            是否连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.Send``1(``0)">
            <summary>
            发送消息
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件地址</param>
        </member>
        <member name="M:XiaoFeng.Net.INetSession.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.IServerSession">
            <summary>
            服务端用户数据接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.GroupID">
            <summary>
            分组ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.ReceivedDataBuffer">
            <summary>
            接收数据
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.IServerSession.OnNewConnection">
            <summary>
            连接委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.IServerSession.OnMessage">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.IServerSession.OnMessageByte">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.IServerSession.OnDisconnected">
            <summary>
            断开连接委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.IServerSession.OnSessionError">
            <summary>
            出错委托
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.SocketAuth">
            <summary>
            连接认证
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.IServerSession.SetSocketType">
            <summary>
            设置是Socket类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.IServerSession.ManageHandshake(System.IAsyncResult)">
            <summary>
            握手信息
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="T:XiaoFeng.Net.ISocket">
            <summary>
            通用网络接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ISocket.ServerSocket">
            <summary>
            服务监听
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ISocket.AddressFamily">
            <summary>
            使用的寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ISocket.SocketType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ISocket.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ISocket.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ISocket.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.ISocket.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.ISocket.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.NetClient`1">
            <summary>
            网络客户端
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.#ctor(System.String,System.Int32)">
            <summary>
            设置IP和端口
            </summary>
            <param name="IP">IP</param>
            <param name="Port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            设置IP和端口
            </summary>
            <param name="IP">IP</param>
            <param name="Port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.#ctor(System.Net.IPEndPoint)">
            <summary>
            设置IP和端口
            </summary>
            <param name="IpPort">IP和端口</param>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.Cookie">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.UserAgent">
            <summary>
            浏览器信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.Origin">
            <summary>
            Origin
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.ServerSocket">
            <summary>
            与客户端通信的套接字
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.IsNewLine">
            <summary>
            是否有回车
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.AddressFamily">
            <summary>
            使用的寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.SocketType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetClient`1.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetClient`1.Session">
            <summary>
            连接数据
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetClient`1.OnMessage">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetClient`1.OnMessageByte">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetClient`1.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetClient`1.OnError">
            <summary>
            出错事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetClient`1.OnStart">
            <summary>
            服务器启动事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetClient`1.OnClose">
            <summary>
            服务器关闭事件
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.Start">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.Receives(`0)">
            <summary>
            处理连接
            </summary>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.Send(System.String)">
            <summary>
            发送信息
            </summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.Send(System.Byte[])">
            <summary>
            发送信息
            </summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.CreateHeader">
            <summary>
            创建头信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetClient`1.Stop">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.WebSocketType">
            <summary>
            WebSocket类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.WebSocketType.Null">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.WebSocketType.WS">
            <summary>
            WS类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.WebSocketType.WSS">
            <summary>
            WSS类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.SocketDataType">
            <summary>
            Socket 数据类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketDataType.String">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketDataType.HexString">
            <summary>
            16进制类型 一般用于串口传输
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.SocketTypes">
            <summary>
            Socket类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketTypes.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketTypes.WebSocket">
            WebSocket
        </member>
        <member name="T:XiaoFeng.Net.SocketState">
            <summary>
            Socket状态
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketState.Idle">
            <summary>
            空闲
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketState.Runing">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.SocketState.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.NetServer`1">
            <summary>
            网络服务端
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            设置服务器IP和端口
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.#ctor(System.String,System.Int32)">
            <summary>
            设置服务器IP和端口
            </summary>
            <param name="ip">IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.#ctor(System.Int32)">
            <summary>
            设置端口
            </summary>
            <param name="port">端口</param>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.IsNewLine">
            <summary>
            消息后是否加回车
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.SocketState">
            <summary>
            Socket状态
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.IsPing">
            <summary>
            是否启动心跳
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.PingTimer">
            <summary>
            ping 间隔时长 单位 毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.PingCount">
            <summary>
            几次不回应断开
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.IP">
            <summary>
            侦听网络IP
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.Port">
            <summary>
            侦听网络端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.AddressFamily">
            <summary>
            使用的寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.SocketType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.ListenCount">
            <summary>
            连接请求数
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.SocketAuth">
            <summary>
            验证Socket请求的合法性
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.IpBlackList">
            <summary>
            黑名单列表
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1.RWLock">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1.AlreadyDisposed">
            <summary>
            准备释放
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.ServerSocket">
            <summary>
            服务监听
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1.MaxBufferSize">
            <summary>
            最大接收数
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1.FirstByte">
            <summary>
            开始字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1.LastByte">
            <summary>
            结尾字节
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.ConnectionSocketList">
            <summary>
            连接列表
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.NetServer`1._ServerLocation">
            <summary>
            WS地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetServer`1.ServerLocation">
            <summary>
            WS地址
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnNewConnection">
            <summary>
            新的连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnMessage">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnMessageByte">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnStop">
            <summary>
            停止服务事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnError">
            <summary>
            出错事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnClientError">
            <summary>
            客户端错误事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.NetServer`1.OnStart">
            <summary>
            服务器启动事件
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.GetLocalmachineIPAddress">
            <summary>
            获取地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.SendFile(System.String,XiaoFeng.Net.IServerSession)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Send(System.String,System.Net.Sockets.Socket)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Send(System.String,XiaoFeng.Net.IServerSession)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Send(System.Byte[],System.Net.Sockets.Socket)">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Send(System.Byte[],XiaoFeng.Net.IServerSession)">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.AddQueue(XiaoFeng.Net.IServerSession)">
            <summary>
            加入队列
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.RemoveQueue(XiaoFeng.Net.INetSession)">
            <summary>
            移除队列
            </summary>
            <param name="session">会话</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.RemoveQueue(System.Net.IPEndPoint)">
            <summary>
            移除队列
            </summary>
            <param name="endPoint">网络地址</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.ClearQueue">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.GetQueue(System.Net.Sockets.Socket)">
            <summary>
            获取连接对象
            </summary>
            <param name="socket">连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.GetQueue(System.Func{XiaoFeng.Net.IServerSession,System.Boolean})">
            <summary>
            获取在线列表中的客户端
            </summary>
            <param name="func">满足条件的函数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.CountQueue">
            <summary>
            获取队列数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.UpdateQueue(XiaoFeng.Net.IServerSession)">
            <summary>
            更新队列[不用调用更新队列直接可以更改]
            </summary>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.GetData">
            <summary>
            复制出一个在线列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.BulkAddIpBlack(System.Collections.Generic.List{System.String})">
            <summary>
            批量加入黑名单
            </summary>
            <param name="list">列表</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.AddIpBlack(System.String)">
            <summary>
            加入黑名单
            </summary>
            <param name="ip">ip</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.RemoveIpBlack(System.String)">
            <summary>
            移除黑名单
            </summary>
            <param name="ip">ip</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.ClearIpBlack">
            <summary>
            清空黑名单
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.IsBlackIP(System.String)">
            <summary>
            是否在黑名单
            </summary>
            <param name="ip">ip</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Close(System.Func{XiaoFeng.Net.IServerSession,System.Boolean})">
            <summary>
            关闭在线列表中的客户端
            </summary>
            <param name="func">满足条件的函数</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Close(XiaoFeng.Net.IServerSession)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="session">连接</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Close(System.Net.IPEndPoint)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="endPoint">IP节点</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Close(System.Net.EndPoint)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="endPoint">IP节点</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Close(System.String,System.String)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">客户端IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Close(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">客户端IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.Stop">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetServer`1.IsConnected(System.Net.IPEndPoint)">
            <summary>
            是否在线
            </summary>
            <param name="endPoint">IP和port</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Net.NetSession">
            <summary>
            NetSession
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.WsType">
            <summary>
            WS类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.Header">
            <summary>
            Header头信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.Headers">
            <summary>
            Header头信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.SocketType">
            <summary>
            是否是WebSocket
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.EndPoint">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.ConnectionSocket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.IsNewLine">
            <summary>
            发送消息是否换行
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.IsDataMasked">
            <summary>
            是否打包
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.OpCode">
            <summary>
            4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.PingTimeStamp">
            <summary>
            ping时间戳
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.NetSession.ConnectionTime">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.GetBytes(System.String)">
            <summary>
            获取字节组
            </summary>
            <param name="content">数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.GetString(System.Byte[])">
            <summary>
            获取字符串
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            是否连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.Send``1(``0)">
            <summary>
            发送消息
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="data">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件地址</param>
        </member>
        <member name="M:XiaoFeng.Net.NetSession.Close">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.OpCode">
            <summary>
            4bit,定义有效负载数据,如果收到了一个未知的操作码,连接也必须断
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Handshake">
            <summary>
            握手
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Continuation">
            <summary>
            连续消息片断
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Text">
            <summary>
            文本消息片断
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Binary">
            <summary>
            二进制消息片断
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Close">
            <summary>
            连接关闭
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Ping">
            <summary>
            心跳检查的ping
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.OpCode.Pong">
            <summary>
            心跳检查的pong
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.PrototypeHelper">
            <summary>
            网络扩展
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.PrototypeHelper.ToIPEndPoint(System.Net.EndPoint)">
            <summary>
            EndPoint转IPEndPoint
            </summary>
            <param name="endPoint">EndPoint</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Net.ServerSession">
            <summary>
            服务端Session
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.GroupID">
            <summary>
            分组ID
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession.MaxBufferSize">
            <summary>
            最长长度
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession._Handshake">
            <summary>
            握手
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.Handshake">
            <summary>
            握手
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession._NewHandshake">
            <summary>
            新握手
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.NewHandshake">
            <summary>
            新握手
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.OSName">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.ReceivedDataBuffer">
            <summary>
            接收数据
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession.FirstByte">
            <summary>
            第一个字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession.LastByte">
            <summary>
            最后字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession.ServerKey1">
            <summary>
            服务key1
            </summary>
        </member>
        <member name="F:XiaoFeng.Net.ServerSession.ServerKey2">
            <summary>
            服务key2
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.ServerSession.OnNewConnection">
            <summary>
            连接委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.ServerSession.OnMessage">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.ServerSession.OnMessageByte">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.ServerSession.OnDisconnected">
            <summary>
            断开连接委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Net.ServerSession.OnSessionError">
            <summary>
            出错委托
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.SocketAuth">
            <summary>
            连接认证
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.ServerSession.SetSocketType">
            <summary>
            设置是Socket类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.ReceiveSocketData(System.IAsyncResult)">
            <summary>
            处理接受Socket的数据
            </summary>
            <param name="state">state</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.ReceiveWebSocketData(System.IAsyncResult)">
            <summary>
            处理接受WebSocket的数据
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.BuildServerPartialKey(System.Int32,System.String)">
            <summary>
            处理Key
            </summary>
            <param name="keyNum">key</param>
            <param name="clientKey">客户端Key</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.BuildServerFullKey(System.Byte[])">
            <summary>
            处理服务器Key
            </summary>
            <param name="last8Bytes">最后8个字节</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.ManageHandshake(System.IAsyncResult)">
            <summary>
            握手信息
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.ComputeWebSocketHandshakeSecurityHash09(System.String)">
            <summary>
            打包请求连接数据
            </summary>
            <param name="secWebSocketKey">客户请求头信息</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.HandshakeFinished(System.IAsyncResult)">
            <summary>
            握手完成信息
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Net.ServerSession.Close">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="T:XiaoFeng.Net.WebClientHelper">
            <summary>
            请求数据 WebClient
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2018/04/10 09:34:53
            Update Time : 2018/04/10 09:34:53
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.CookieContainer">
            <summary>
            Cookie 容器
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.UserAgent">
            <summary>
            获取或设置 User-agent HTTP 标头的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.Method">
            <summary>
            获取或设置请求的方法
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.ContentType">
            <summary>
            请求内容类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.TimeOut">
            <summary>
            超时时间 毫秒为单位
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.AllowAutoRedirect">
            <summary>
            是否应跟随重定向响应
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.MaximumAutomaticRedirections">
            <summary>
            获取或设置请求将跟随的重定向的最大数目。
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.Referer">
            <summary>
            获取或设置 Referer HTTP 标头的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.PostData">
            <summary>
            Post请求数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.PostDataByte">
            <summary>
            Post请求字节
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.Address">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Net.WebClientHelper.LocalAddress">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.GetWebRequest(System.Uri)">
            <summary>
            返回带有 Cookie 的 HttpWebRequest
            </summary>
            <param name="address">一个 System.Uri ，它标识要请求的资源</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.DownloadStringAsync(System.Uri,System.Net.DownloadStringCompletedEventHandler,System.Object)">
            <summary>
            下载形式指定的资源 System.Uri。 此方法不会阻止调用线程。
            </summary>
            <param name="address">一个 System.Uri 包含要下载的 URI。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.DownloadFileAsync(System.Uri,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            对本地文件，下载将具有指定的 URI 的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要下载的资源的 URI。</param>
            <param name="fileName">要放置在本地计算机上的文件的名称。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.DownloadDataAsync(System.Uri,System.Net.DownloadDataCompletedEventHandler,System.Object)">
            <summary>
            作为资源下载 System.Byte 数组，从异步操作的形式指定的 URI 数组。
            </summary>
            <param name="address">一个 System.Uri 包含要下载的 URI。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadDataAsync(System.Uri,System.Byte[],System.Net.UploadDataCompletedEventHandler)">
            <summary>
            将数据缓冲区上载到通过使用 POST 方法的 URI 标识的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收的数据资源的 URI。</param>
            <param name="data">要向资源发送的数据缓冲区。</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Net.UploadDataCompletedEventHandler,System.Object)">
            <summary>
            将数据缓冲区上载到通过使用 POST 方法的 URI 标识的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收的数据资源的 URI。</param>
            <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
            <param name="data">要向资源发送的数据缓冲区。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadFileAsyncs(System.Uri,System.String,System.String,System.Net.UploadFileCompletedEventHandler,System.Object)">
            <summary>
            将指定的本地文件上载到指定的资源使用 POST 方法。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
            <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
            <param name="fileName">要发送到资源的文件。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadFileAsyncs(System.Uri,System.String,System.Net.UploadFileCompletedEventHandler)">
            <summary>
            将指定的本地文件上载到指定的资源使用 POST 方法。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
            <param name="fileName">要发送到资源的文件。</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadStringAsync(System.Uri,System.String,System.Net.UploadStringCompletedEventHandler)">
            <summary>
            将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
            <param name="data">要上载的字符串。</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadStringAsync(System.Uri,System.String,System.String,System.Net.UploadStringCompletedEventHandler,System.Object)">
            <summary>
            将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
            <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
            <param name="data">要上载的字符串。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Net.UploadValuesCompletedEventHandler,System.Object)">
            <summary>
            将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收该集合资源的 URI。 此 URI 必须标识可以接受使用默认方法发送的请求的资源。 请参阅备注。</param>
            <param name="method">用来将字符串发送到资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
            <param name="data">System.Collections.Specialized.NameValueCollection 将发送到资源。</param>
            <param name="callback">回调方法</param>
            <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
        </member>
        <member name="M:XiaoFeng.Net.WebClientHelper.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection,System.Net.UploadValuesCompletedEventHandler)">
            <summary>
            将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。 此方法不会阻止调用线程。
            </summary>
            <param name="address">要接收该集合资源的 URI。 此 URI 必须标识可以接受使用默认方法发送的请求的资源。 请参阅备注。</param>
            <param name="data">System.Collections.Specialized.NameValueCollection 将发送到资源。</param>
            <param name="callback">回调方法</param>
        </member>
        <member name="T:XiaoFeng.PinYin">
            <summary>
            汉字转拼音类
            </summary>
        </member>
        <member name="M:XiaoFeng.PinYin.GetFirstLetter(System.String)">
            <summary>
            取中文文本的拼音首字母
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <returns>返回中文对应的拼音首字母</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetFirstLetter(System.String,System.Text.Encoding)">
            <summary>
            取中文文本的拼音首字母
            </summary>
            <param name="text">文本</param>
            <param name="encoding">源文本的编码</param>
            <returns>返回encoding编码类型中文对应的拼音首字母</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetPinyin(System.String,System.Boolean)">
            <summary>
            取中文文本的拼音
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <param name="IsFirstUpper">是否首字母大写</param>
            <returns>返回中文文本的拼音</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetPinyin(System.String,System.Text.Encoding)">
            <summary>
            取中文文本的拼音
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <param name="encoding">源文本的编码</param>
            <returns>返回encoding编码类型的中文文本的拼音</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetChineseText(System.String)">
            <summary>
            取和拼音相同的汉字列表
            </summary>
            <param name="pinyin">编码为UTF8的拼音</param>
            <returns>取拼音相同的汉字列表，如拼音“ai”将会返回“唉爱……”等</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetChineseText(System.String,System.Text.Encoding)">
            <summary>
            取和拼音相同的汉字列表，编码同参数encoding
            </summary>
            <param name="pinyin">编码为encoding的拼音</param>
            <param name="encoding">编码</param>
            <returns>返回编码为encoding的拼音为pinyin的汉字列表，如拼音“ai”将会返回“唉爱……”等</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetPinyin(System.Char)">
            <summary>
            返回单个字符的汉字拼音
            </summary>
            <param name="ch">编码为UTF8的中文字符</param>
            <returns>ch对应的拼音</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetPinyin(System.Char,System.Text.Encoding)">
            <summary>
            返回单个字符的汉字拼音
            </summary>
            <param name="ch">编码为encoding的中文字符</param>
            <param name="encoding">编码</param>
            <returns>编码为encoding的ch对应的拼音</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.ConvertEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            转换编码 
            </summary>
            <param name="text">文本</param>
            <param name="srcEncoding">源编码</param>
            <param name="dstEncoding">目标编码</param>
            <returns>目标编码文本</returns>
        </member>
        <member name="M:XiaoFeng.PinYin.GetHashIndex(System.Char)">
            <summary>
            取文本索引值
            </summary>
            <param name="ch">字符</param>
            <returns>文本索引值</returns>
        </member>
        <member name="F:XiaoFeng.PinYin._PhraseSpecial">
            <summary>
            设置或获取包含例外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="P:XiaoFeng.PinYin.PhraseSpecial">
            <summary>
            设置或获取包含例外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="T:XiaoFeng.OS.Platform">
            <summary>
            运行平台参数
            </summary>
        </member>
        <member name="M:XiaoFeng.OS.Platform.GetOSPlatform">
            <summary>
            获取平台操作系统
            </summary>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.OS.Platform.MachineName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.OSDescription">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.OSVersion">
            <summary>
            系统及版本
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.FrameworkDescription">
            <summary>
            系统框架
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.OSArchitecture">
            <summary>
            系统架构
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.ProcessArchitecture">
            <summary>
            进程架构
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.CurrentDirectory">
            <summary>
            当前项目目录
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.SystemDirectory">
            <summary>
            系统目录
            </summary>
        </member>
        <member name="F:XiaoFeng.OS.Platform._IsWebForm">
            <summary>
            是WebForm还是WinForm
            </summary>
        </member>
        <member name="P:XiaoFeng.OS.Platform.IsWebForm">
            <summary>
            是WebForm还是WinForm
            </summary>
        </member>
        <member name="T:XiaoFeng.QueryHelper">
            <summary>
            参数操作类 第一种内核 第二种 ParamHelper
            Version : 1.0.1
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.QueryHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.QueryHelper.#ctor(System.String)">
            <summary>
            初始化数据
            </summary>
            <param name="KeyValue">网址,键值对 如 a=b&amp;c=d 或a:b,c:d</param>
        </member>
        <member name="P:XiaoFeng.QueryHelper.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:XiaoFeng.QueryHelper._path">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:XiaoFeng.QueryHelper.path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XiaoFeng.QueryHelper.query">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XiaoFeng.QueryHelper.url">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:XiaoFeng.QueryHelper.Count">
            <summary>
            键值对数目
            </summary>
        </member>
        <member name="P:XiaoFeng.QueryHelper.Length">
            <summary>
            网址长度
            </summary>
        </member>
        <member name="M:XiaoFeng.QueryHelper.add(System.String,System.String)">
            <summary>
            添加数据
            </summary>
            <param name="key">key值</param>
            <param name="value">键值</param>
        </member>
        <member name="M:XiaoFeng.QueryHelper.add(System.String)">
            <summary>
            添加数据
            </summary>
            <param name="KeyValue">网址,键值对 如 a=b&amp;c=d 或a:b,c:d</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.set(System.String,System.String)">
            <summary>
            设置数据
            </summary>
            <param name="key">key值</param>
            <param name="value">键值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.set(System.String)">
            <summary>
            设置数据
            </summary>
            <param name="keyValue">网址,键值对 如 a=b&amp;c=d 或a:b,c:d</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.RemoveKey(System.String)">
            <summary>
            按Key值移除数据
            </summary>
            <param name="key">key值</param>
        </member>
        <member name="M:XiaoFeng.QueryHelper.RemoveValue(System.String)">
            <summary>
            按value值移除数据
            </summary>
            <param name="value">键值</param>
        </member>
        <member name="M:XiaoFeng.QueryHelper.remove(System.String)">
            <summary>
            按Key值移除数据
            </summary>
            <param name="key">key值</param>
        </member>
        <member name="M:XiaoFeng.QueryHelper.getQuery">
            <summary>
            获取参数字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:XiaoFeng.QueryHelper.getKey(System.String)">
            <summary>
            根据键值查找key
            </summary>
            <param name="value">键值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.getValue(System.String)">
            <summary>
            根据key查找键值
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.get(System.String)">
            <summary>
            根据key查找键值
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.setData(System.String)">
            <summary>
            设置数据
            </summary>
            <param name="keyValue">网址,键值对 如 a=b&amp;c=d 或a:b,c:d</param>
        </member>
        <member name="M:XiaoFeng.QueryHelper.ReplaceStartEnd(System.String)">
            <summary>
            替换首尾"'
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.QueryHelper.Dispose">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="M:XiaoFeng.QueryHelper.Finalize">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="T:XiaoFeng.ParamHelper">
            <summary>
            参数操作类 第二种内核  第一种 QueryHelper
            Version : 1.0.1
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.ParamHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.ParamHelper.#ctor(System.String)">
            <summary>
            设置参数数据
            </summary>
            <param name="queryString">参数</param>
        </member>
        <member name="F:XiaoFeng.ParamHelper.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:XiaoFeng.ParamHelper._path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XiaoFeng.ParamHelper.path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XiaoFeng.ParamHelper.query">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XiaoFeng.ParamHelper.querys">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:XiaoFeng.ParamHelper.url">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:XiaoFeng.ParamHelper.Count">
            <summary>
            参数数目
            </summary>
        </member>
        <member name="P:XiaoFeng.ParamHelper.Length">
            <summary>
            网址长度
            </summary>
        </member>
        <member name="M:XiaoFeng.ParamHelper.add(System.String,System.String)">
            <summary>
            添加参数
            </summary>
            <param name="query">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.add(System.String)">
            <summary>
            批量添加参数
            </summary>
            <param name="queryValue">参数键值对 {a:b,c:d}或a=b&amp;c=d</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.set(System.String,System.String)">
            <summary>
            设置参数
            </summary>
            <param name="query">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.set(System.String)">
            <summary>
            设置参数
            </summary>
            <param name="queryValue">参数键值对</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.remove(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="query">参数名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.get(System.String)">
            <summary>
            获取参数值
            </summary>
            <param name="query">参数名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.getQuery">
            <summary>
            获取参数列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.setData(System.String)">
            <summary>
            设置数据
            </summary>
            <param name="queryValue">网址,键值对 如 a=b&amp;c=d 或a:b,c:d</param>
        </member>
        <member name="M:XiaoFeng.ParamHelper.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:XiaoFeng.ParamHelper.ReplaceStartEnd(System.String)">
            <summary>
            替换首尾"'
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.ParamHelper.Dispose">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="M:XiaoFeng.ParamHelper.Finalize">
            <summary>
            回收资源
            </summary>
        </member>
        <member name="T:XiaoFeng.RandomHelper">
            <summary>
            随机生成字符串
            Verstion : 1.1.0
            Create Time : 2018/01/23 11:01:07
            Update Time : 2018/04/23 10:31:15
            </summary>
        </member>
        <member name="M:XiaoFeng.RandomHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomHelper.SpecialChars">
            <summary>
            特殊字符
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomHelper.LetterChars">
            <summary>
            字母
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomHelper.NumberChars">
            <summary>
            数字
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.RandomType">
            <summary>
            随机类型
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.IsRepeat">
            <summary>
            是否重复
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.Count">
            <summary>
            生成个数
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.Ran">
            <summary>
            随机种子
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomHelper._randomHelper">
            <summary>
            实例化类
            </summary>
        </member>
        <member name="P:XiaoFeng.RandomHelper.randomHelper">
            <summary>
            实例化类
            </summary>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            获取区间数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandomInts(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取一组随机数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="count">数组长度</param>
            <param name="isRepeat">是否重复</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandomString(System.Int32,XiaoFeng.RandomType,System.Boolean)">
            <summary>
            获取字符串
            </summary>
            <param name="length">长度</param>
            <param name="ranType">类型</param>
            <param name="isRepeat">是否重复</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandomStrings(System.Int32,System.Int32,XiaoFeng.RandomType,System.Boolean)">
            <summary>
            获取一组随机字符串
            </summary>
            <param name="count">数组长度</param>
            <param name="length">字符串长度</param>
            <param name="ranType">类型</param>
            <param name="isRepeat">是否重复</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandom(System.Int32,System.Int32)">
            <summary>
            获取区间数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandoms(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取一组随机数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="count">数组长度</param>
            <param name="isRepeat">是否重复</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandom(System.Int32,XiaoFeng.RandomType,System.Boolean)">
            <summary>
            获取字符串
            </summary>
            <param name="length">长度</param>
            <param name="ranType">类型</param>
            <param name="isRepeat">是否重复</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.RandomHelper.GetRandoms(System.Int32,System.Int32,XiaoFeng.RandomType,System.Boolean)">
            <summary>
            获取一组随机字符串
            </summary>
            <param name="count">数组长度</param>
            <param name="length">字符串长度</param>
            <param name="ranType">类型</param>
            <param name="isRepeat">是否重复</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.RandomType">
            <summary>
            生成字符类型
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomType.Letter">
            <summary>
            字母
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomType.Special">
            <summary>
            特殊字符
            </summary>
        </member>
        <member name="F:XiaoFeng.RandomType.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.Command">
            <summary>
            命令请求类
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.Command.#ctor(XiaoFeng.Redis.CommandType,System.Object[])">
            <summary>
            无参构造器
            </summary>
            <param name="commandType">命令类型</param>
            <param name="datas">参数集</param>
        </member>
        <member name="P:XiaoFeng.Redis.Command.Stream">
            <summary>
            网络流
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.Command.CommandType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.Command.Datas">
            <summary>
            命令数据
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.Command.ToString">
            <summary>
            命令行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.Command.ToBytes">
            <summary>
            命令行字节组
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.CommandResult">
            <summary>
            命令响应结果
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.CommandResult.#ctor(XiaoFeng.Redis.CommandType,System.String)">
            <summary>
            设置结果行
            </summary>
            <param name="commandType">命令</param>
            <param name="line">结果行</param>
        </member>
        <member name="P:XiaoFeng.Redis.CommandResult.Line">
            <summary>
            命令
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandResult.CommandType">
            <summary>
            命令
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandResult.OK">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandResult.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandResult.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.CommandResult.#ctor(XiaoFeng.Redis.CommandType,System.Byte[])">
            <summary>
            设置结果行
            </summary>
            <param name="commandType">命令</param>
            <param name="bytes">结果集字节</param>
        </member>
        <member name="M:XiaoFeng.Redis.CommandResult.GetString(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            获取数据
            </summary>
            <param name="str">结果</param>
            <param name="dict">数据</param>
        </member>
        <member name="M:XiaoFeng.Redis.CommandResult.GetString(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            获取数据
            </summary>
            <param name="str">结果</param>
            <param name="list">数据</param>
        </member>
        <member name="T:XiaoFeng.Redis.CommandType">
            <summary>
            执行命令
            *参数个数 CR LF
            $第一个参数字节长度 CR LF
            第一个参数 CR LF
            ...
            $第N个参数字节长度 CR LF
            第N个参数数据 CR LF
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.#ctor(System.String,System.String)">
            <summary>
            设置数据
            </summary>
            <param name="name">名称</param>
            <param name="format">格式</param>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.#ctor(System.String,System.String,System.String[])">
            <summary>
            设置数据
            </summary>
            <param name="name">名称</param>
            <param name="format">格式</param>
            <param name="commands">命令组</param>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.Format">
            <summary>
            格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.Commands">
            <summary>
            命令组
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.DEL">
            <summary>
            该命令用于在 key 存在时删除 key。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.COPY">
            <summary>
            该命令用于在 key 的复制。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.DUMP">
            <summary>
            序列化给定 key ，并返回被序列化的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.EXISTS">
            <summary>
            检查给定 key 是否存在。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.EXPIRE">
            <summary>
            为给定 key 设置过期时间，以秒计。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.EXPIREAT">
            <summary>
            EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PEXPIRE">
            <summary>
            设置 key 的过期时间以毫秒计。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PEXPIREAT">
            <summary>
            设置 key 过期时间的时间戳(unix timestamp) 以毫秒计。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.KEYS">
            <summary>
            查找所有符合给定模式( pattern)的 key 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.MOVE">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PERSIST">
            <summary>
            移除 key 的过期时间，key 将持久保持。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PTTL">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.TTL">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RANDOMKEY">
            <summary>
            从当前数据库中随机返回一个 key 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RENAME">
            <summary>
            修改 key 的名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RENAMENX">
            <summary>
            仅当 newkey 不存在时，将 key 改名为 newkey 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.TYPE">
            <summary>
            返回 key 所储存的值的类型。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SCAN">
            <summary>
            迭代数据库中的数据库键。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SET">
            <summary>
            设置指定 key 的值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GET">
            <summary>
            获取指定 key 的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GETRANGE">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GETSET">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GETDEL">
            <summary>
            获取 key 的值 并移除key的值 6.2.0后可用
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GETBIT">
            <summary>
            对 key 所储存的字符串值，获取指定偏移量上的位(bit)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.MGET">
            <summary>
            获取所有(一个或多个)给定 key 的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SETBIT">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SETEX">
            <summary>
            将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SETNX">
            <summary>
            只有在 key 不存在时设置 key 的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SETRANGE">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.STRLEN">
            <summary>
            返回 key 所储存的字符串值的长度。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.MSET">
            <summary>
            同时设置一个或多个 key-value 对。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.MSETNX">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PSETEX">
            <summary>
            这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.INCR">
            <summary>
            将 key 中储存的数字值增一。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.INCRBY">
            <summary>
            将 key 所储存的值加上给定的增量值（increment） 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.INCRBYFLOAT">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment） 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.DECR">
            <summary>
            将 key 中储存的数字值减一。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.DECRBY">
            <summary>
            key 所储存的值减去给定的减量值（decrement）。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.APPEND">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HDEL">
            <summary>
            删除一个或多个哈希表字段
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HEXISTS">
            <summary>
            查看哈希表 key 中，指定的字段是否存在。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HGET">
            <summary>
            获取存储在哈希表中指定字段的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HGETALL">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HINCRBY">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HINCRBYFLOAT">
            <summary>
            为哈希表 key 中的指定字段的浮点数值加上增量 increment 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HKEYS">
            <summary>
            获取所有哈希表中的字段
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HLEN">
            <summary>
            获取哈希表中字段的数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HMGET">
            <summary>
            获取所有给定字段的值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HMSET">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HSET">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value 。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HSETNX">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HVALS">
            <summary>
            获取哈希表中所有值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.HSCAN">
            <summary>
            迭代哈希表中的键值对。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.BLPOP">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.BRPOP">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.BRPOPLPUSH">
            <summary>
            从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LINDEX">
            <summary>
            通过索引获取列表中的元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LINSERT">
            <summary>
            在列表的元素前或者后插入元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LLEN">
            <summary>
            获取列表长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LPOP">
            <summary>
            移出并获取列表的第一个元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LPUSH">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LPUSHX">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LRANGE">
            <summary>
            获取列表指定范围内的元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LREM">
            <summary>
            移除列表元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LSET">
            <summary>
            通过索引设置列表元素的值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LTRIM">
            <summary>
            对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RPOP">
            <summary>
            移除列表的最后一个元素，返回值为移除的元素。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RPOPLPUSH">
            <summary>
            移除列表的最后一个元素，并将该元素添加到另一个列表并返回
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RPUSH">
            <summary>
            在列表中添加一个或多个值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.RPUSHX">
            <summary>
            为已存在的列表添加值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SADD">
            <summary>
            向集合添加一个或多个成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SCARD">
            <summary>
            获取集合的成员数
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SDIFF">
            <summary>
            返回第一个集合与其他集合之间的差异。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SDIFFSTORE">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SINTER">
            <summary>
            返回给定所有集合的交集
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SINTERSTORE">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SISMEMBER">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SMEMBERS">
            <summary>
            返回集合中的所有成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SPOP">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SRANDMEMBER">
            <summary>
            返回集合中一个或多个随机数
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SREM">
            <summary>
            移除集合中一个或多个成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SUNION">
            <summary>
            返回所有给定集合的并集
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SUNIONSTORE">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SMOVE">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SSCAN">
            <summary>
            迭代集合中的元素
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZADD">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZCARD">
            <summary>
            获取有序集合的成员数
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZCOUNT">
            <summary>
            计算在有序集合中指定区间分数的成员数
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZINCRBY">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZINTERSTORE">
            <summary>
            计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZLEXCOUNT">
            <summary>
            在有序集合中计算指定字典区间内成员数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZRANGE">
            <summary>
            通过索引区间返回有序集合指定区间内的成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZRANGEBYLEX">
            <summary>
            通过字典区间返回有序集合的成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZRANGEBYSCORE">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZRANK">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREM">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREMRANGEBYLEX">
            <summary>
            移除有序集合中给定的字典区间的所有成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREMRANGEBYRANK">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREMRANGEBYSCORE">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREVRANGE">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到低
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREVRANGEBYSCORE">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZREVRANK">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZSCORE">
            <summary>
            返回有序集中，成员的分数值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZUNIONSTORE">
            <summary>
            计算给定的一个或多个有序集的并集，并存储在新的 key 中
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ZSCAN">
            <summary>
            迭代有序集合中的元素（包括元素成员和元素分值
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PFADD">
            <summary>
            添加指定元素到 HyperLogLog 中。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PFCOUNT">
            <summary>
            返回给定 HyperLogLog 的基数估算值。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PFMERGE">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PSUBSCRIBE">
            <summary>
            订阅一个或多个符合给定模式的频道。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PUBSUB">
            <summary>
            查看订阅与发布系统状态。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PUBLISH">
            <summary>
            将信息发送到指定的频道。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PUNSUBSCRIBE">
            <summary>
            退订所有给定模式的频道。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SUBSCRIBE">
            <summary>
            订阅给定的一个或多个频道的信息。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.UNSUBSCRIBE">
            <summary>
            指退订给定的频道。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.DISCARD">
            <summary>
            取消事务，放弃执行事务块内的所有命令。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.EXEC">
            <summary>
            执行所有事务块内的命令。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.MULTI">
            <summary>
            标记一个事务块的开始。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.UNWATCH">
            <summary>
            取消 WATCH 命令对所有 key 的监视。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.WATCH">
            <summary>
            监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEOADD">
            <summary>
            用于存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEOPOS">
            <summary>
            用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEODIST">
            <summary>
            用于返回两个给定位置之间的距离。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEORADIUS">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEORADIUSBYMEMBER">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEOSEARCH">
            <summary>
            搜索以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEOSEARCHSTORE">
            <summary>
            搜索以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素存储到列表中。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.GEOHASH">
            <summary>
            保存地理位置的坐标。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.AUTH">
            <summary>
            验证密码是否正确
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ECHO">
            <summary>
            打印字符串
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.PING">
            <summary>
            查看服务是否运行
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.QUIT">
            <summary>
            关闭当前连接
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SELECT">
            <summary>
            切换到指定的数据库
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XADD">
            <summary>
            使用 XADD 向队列添加消息，如果指定的队列不存在，则创建一个队列
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XTRIM">
            <summary>
            对流进行修剪，限制长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XDEL">
            <summary>
            删除消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XLEN">
            <summary>
            获取流包含的元素数量，即消息长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XRANGE">
            <summary>
            获取消息列表，会自动过滤已经删除的消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XREVRANGE">
            <summary>
            反向获取消息列表，ID 从大到小 会自动过滤已经删除的消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XREAD">
            <summary>
            以阻塞或非阻塞方式获取消息列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XGROUPCREATE">
            <summary>
            创建消费者组
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XREADGROUPGROUP">
            <summary>
            读取消费者组中的消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XACK">
            <summary>
            将消息标记为"已处理"
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XGROUPSETID">
            <summary>
            为消费者组设置新的最后递送消息ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XGROUPDELCONSUMER">
            <summary>
            删除消费者
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XGROUPDESTROY">
            <summary>
            删除消费者组
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XPENDING">
            <summary>
            显示待处理消息的相关信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XCLAIM">
            <summary>
            转移消息的归属权
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XINFO">
            <summary>
            查看流和消费者组的相关信息；
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XINFOGROUPS">
            <summary>
            打印消费者组的信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.XINFOSTREAM">
            <summary>
            打印流信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.BGREWRITEAOF">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SLAVEOF">
            <summary>
            将当前服务器转变为指定服务器的从属服务器(slave server)。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.CLIENT">
            <summary>
            执行客户端命令
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SAVE">
            <summary>
            在后台异步保存当前数据库的数据到磁盘。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.BGSAVE">
            <summary>
            创建当前数据库的备份,该命令在后台执行。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.CONFIG">
            <summary>
            如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SHUTDOWN">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.ROLE">
            <summary>
            查看主从实例所属的角色，角色有master, slave, sentinel。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.DBSIZE">
            <summary>
            返回当前数据库的 key 的数量。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.FLUSHALL">
            <summary>
            删除所有数据库的所有key。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.FLUSHDB">
            <summary>
            删除当前数据库的所有key。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.LASTSAVE">
            <summary>
            LASTSAVE
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.INFO">
            <summary>
            INFO
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.CommandType.SORT">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.Equals(XiaoFeng.Redis.CommandType)">
            <summary>
            是否相等
            </summary>
            <param name="other">请求类型</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.op_Equality(XiaoFeng.Redis.CommandType,XiaoFeng.Redis.CommandType)">
            <summary>
            是否相等
            </summary>
            <param name="left">请求类型</param>
            <param name="right">请求类型</param>
            <returns>summary</returns>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.op_Inequality(XiaoFeng.Redis.CommandType,XiaoFeng.Redis.CommandType)">
            <summary>
            是否不相等
            </summary>
            <param name="left">请求类型</param>
            <param name="right">请求类型</param>
            <returns>是否不相等</returns>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.op_Explicit(XiaoFeng.Redis.CommandType)~System.String">
            <summary>
            显示转换
            </summary>
            <param name="method">请求类型</param>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.op_Implicit(System.String)~XiaoFeng.Redis.CommandType">
            <summary>
            隐式转换
            </summary>
            <param name="method">请求类型</param>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj">请求类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.GetHashCode">
            <summary>
            HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.CommandType.ToString">
            <summary>
            转换命令
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.AggregateType">
            <summary>
            聚合联合类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.AggregateType.SUM">
            <summary>
            元素分数总和
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.AggregateType.MIN">
            <summary>
            元素分数最小
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.AggregateType.MAX">
            <summary>
            元素分数最大
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.GeoSortType">
            <summary>
            查找结果根据距离类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.GeoSortType.ASC">
            <summary>
            从近到远排序
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.GeoSortType.DESC">
            <summary>
            从远到近排序
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.SortType.ASC">
            <summary>
            正序
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.SortType.DESC">
            <summary>
            倒序
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.UnitType">
            <summary>
            单位类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.UnitType.M">
            <summary>
            米
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.UnitType.KM">
            <summary>
            千米
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.UnitType.FT">
            <summary>
            英尺
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.UnitType.MI">
            <summary>
            英里
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.RedisClient">
            <summary>
            GEO
            </summary>
            <summary>
            哈希(Hash)
            </summary>
            <summary>
            HyperLogLog
            </summary>
            <summary>
            KEY 操作
            </summary>
            <summary>
            列表(List)
            </summary>
            <summary>
            Redis 客户端操作类
            v 1.1.0
            修改提取数据用正则改为字符提取 更加精确
            </summary>
            <summary>
            服务器
            </summary>
            <summary>
            集合(Set)
            </summary>
            <summary>
            有序集合(ZSet)
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GeoAdd(System.String,System.Nullable{System.Int32},XiaoFeng.Redis.GeoModel[])">
            <summary>
            存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="geos">经纬度集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GeoAddAsync(System.String,System.Nullable{System.Int32},XiaoFeng.Redis.GeoModel[])">
            <summary>
            存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="geos">经纬度集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GeoAdd(System.String,XiaoFeng.Redis.GeoModel[])">
            <summary>
            存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中
            </summary>
            <param name="key">key</param>
            <param name="geos">经纬度集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GeoAddAsync(System.String,XiaoFeng.Redis.GeoModel[])">
            <summary>
            存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中 异步
            </summary>
            <param name="key">key</param>
            <param name="geos">经纬度集</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoPos(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoPosAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoPos(System.String,System.Object[])">
            <summary>
            用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。
            </summary>
            <param name="key">key</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoPosAsync(System.String,System.Object[])">
            <summary>
            用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。 异步
            </summary>
            <param name="key">key</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoDist(System.String,System.String,System.String,XiaoFeng.Redis.UnitType,System.Nullable{System.Int32})">
            <summary>
            返回两个给定位置之间的距离
            </summary>
            <param name="key">key</param>
            <param name="firstMember">第一个位置</param>
            <param name="secondMember">第二个位置</param>
            <param name="unitType">单位类型</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoDistAsync(System.String,System.String,System.String,XiaoFeng.Redis.UnitType,System.Nullable{System.Int32})">
            <summary>
            返回两个给定位置之间的距离 异步
            </summary>
            <param name="key">key</param>
            <param name="firstMember">第一个位置</param>
            <param name="secondMember">第二个位置</param>
            <param name="unitType">单位类型</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoHash(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取一个或多个位置元素的 geohash 值
            GeoHash 编码长度与精度
            长度  Lat位数   Lng位数   Lat误差           Lng误差               KM误差
              1     2           3      ±23               ±23                 ±2500
              2     5           5      ±2.8              ±5.6                ±630
              3     7           8      ±0.70             ±0.76               ±78
              4     10          10     ±0.087            ±0.18               ±20
              5     12          13     ±0.022            ±0.022              ±2.4
              6     15          15     ±0.0027           ±0.0055             ±0.61
              7     17          18     ±0.00068          ±0.00068            ±0.0761
              8     20          20     ±0.000086         ±0.000172           ±0.01911
              9     22          23     ±0.000021         ±0.000021           ±0.00478
              10    25          25     ±0.00000268       ±0.00000536         ±0.0005971
              11    27          28     ±0.00000067       ±0.00000067         ±0.0001492
              12    30          30     ±0.00000008       ±0.00000017         ±0.0000186
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoHashAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取一个或多个位置元素的 geohash 值 异步
            GeoHash 编码长度与精度
            长度  Lat位数   Lng位数   Lat误差           Lng误差               KM误差
              1     2           3      ±23               ±23                 ±2500
              2     5           5      ±2.8              ±5.6                ±630
              3     7           8      ±0.70             ±0.76               ±78
              4     10          10     ±0.087            ±0.18               ±20
              5     12          13     ±0.022            ±0.022              ±2.4
              6     15          15     ±0.0027           ±0.0055             ±0.61
              7     17          18     ±0.00068          ±0.00068            ±0.0761
              8     20          20     ±0.000086         ±0.000172           ±0.01911
              9     22          23     ±0.000021         ±0.000021           ±0.00478
              10    25          25     ±0.00000268       ±0.00000536         ±0.0005971
              11    27          28     ±0.00000067       ±0.00000067         ±0.0001492
              12    30          30     ±0.00000008       ±0.00000017         ±0.0000186
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoHash(System.String,System.Object[])">
            <summary>
            获取一个或多个位置元素的 geohash 值
            GeoHash 编码长度与精度
            长度  Lat位数   Lng位数   Lat误差           Lng误差               KM误差
              1     2           3      ±23               ±23                 ±2500
              2     5           5      ±2.8              ±5.6                ±630
              3     7           8      ±0.70             ±0.76               ±78
              4     10          10     ±0.087            ±0.18               ±20
              5     12          13     ±0.022            ±0.022              ±2.4
              6     15          15     ±0.0027           ±0.0055             ±0.61
              7     17          18     ±0.00068          ±0.00068            ±0.0761
              8     20          20     ±0.000086         ±0.000172           ±0.01911
              9     22          23     ±0.000021         ±0.000021           ±0.00478
              10    25          25     ±0.00000268       ±0.00000536         ±0.0005971
              11    27          28     ±0.00000067       ±0.00000067         ±0.0001492
              12    30          30     ±0.00000008       ±0.00000017         ±0.0000186
            </summary>
            <param name="key">key</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoHashAsync(System.String,System.Object[])">
            <summary>
            获取一个或多个位置元素的 geohash 值 异步
            GeoHash 编码长度与精度
            长度  Lat位数   Lng位数   Lat误差           Lng误差               KM误差
              1     2           3      ±23               ±23                 ±2500
              2     5           5      ±2.8              ±5.6                ±630
              3     7           8      ±0.70             ±0.76               ±78
              4     10          10     ±0.087            ±0.18               ±20
              5     12          13     ±0.022            ±0.022              ±2.4
              6     15          15     ±0.0027           ±0.0055             ±0.61
              7     17          18     ±0.00068          ±0.00068            ±0.0761
              8     20          20     ±0.000086         ±0.000172           ±0.01911
              9     22          23     ±0.000021         ±0.000021           ±0.00478
              10    25          25     ±0.00000268       ±0.00000536         ±0.0005971
              11    27          28     ±0.00000067       ±0.00000067         ±0.0001492
              12    30          30     ±0.00000008       ±0.00000017         ±0.0000186
            </summary>
            <param name="key">key</param>
            <param name="members">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoRadius(System.String,XiaoFeng.Redis.GeoRadiusOptions,System.Nullable{System.Int32})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">key</param>
            <param name="options">选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoRadiusAsync(System.String,XiaoFeng.Redis.GeoRadiusOptions,System.Nullable{System.Int32})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。 异步
            </summary>
            <param name="key">key</param>
            <param name="options">选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoRadiusByMember(System.String,XiaoFeng.Redis.GeoRadiusOptions,System.Nullable{System.Int32})">
            <summary>
            以给定的位置元素为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">key</param>
            <param name="options">选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetGeoRadiusByMemberAsync(System.String,XiaoFeng.Redis.GeoRadiusOptions,System.Nullable{System.Int32})">
            <summary>
            以给定的位置元素为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。 异步
            </summary>
            <param name="key">key</param>
            <param name="options">选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchGeoRadius(System.String,XiaoFeng.Redis.GeoRadiusSearchOptions,System.Nullable{System.Int32})">
            <summary>
            搜索以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。 6.2版本以后使用
            </summary>
            <param name="key">key</param>
            <param name="options">选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchGeoRadiusAsync(System.String,XiaoFeng.Redis.GeoRadiusSearchOptions,System.Nullable{System.Int32})">
            <summary>
            搜索以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。6.2版本以后使用 异步
            </summary>
            <param name="key">key</param>
            <param name="options">选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHash``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value 
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHashAsync``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHashNoExists``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHashNoExistsAsync``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHash(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            批量设置Hash
            </summary>
            <param name="key">key</param>
            <param name="values">字段值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHashAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            批量设置Hash 异步
            </summary>
            <param name="key">key</param>
            <param name="values">字段值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHash``1(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取Hash值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashAsync``1(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取Hash值 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHash(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取Hash值
            </summary>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="dbNum">库索引</param>
            <returns>Hash值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取Hash值 异步
            </summary>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="dbNum">库索引</param>
            <returns>Hash值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHash(System.String,System.Nullable{System.Int32})">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取在哈希表中指定 key 的所有字段和值 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashKeys(System.String,System.Nullable{System.Int32})">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>所有哈希表中的字段</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashKeysAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取所有哈希表中的字段 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>所有哈希表中的字段</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashValues(System.String,System.Nullable{System.Int32})">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>所有哈希表中的字段</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashValuesAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取所有哈希表中的字段 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>所有哈希表中的字段</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashKeysCount(System.String,System.Nullable{System.Int32})">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>哈希表中字段的数量</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashKeysCountAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取哈希表中字段的数量 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>哈希表中字段的数量</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHash(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取所有给定字段的值
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="fields">字段</param>
            <returns>返回所有给定字段的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取所有给定字段的值 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="fields">字段</param>
            <returns>返回所有给定字段的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHash(System.String,System.Object[])">
            <summary>
            获取所有给定字段的值
            </summary>
            <param name="key">key</param>
            <param name="fields">字段</param>
            <returns>返回字段值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHashAsync(System.String,System.Object[])">
            <summary>
            获取所有给定字段的值 异步
            </summary>
            <param name="key">key</param>
            <param name="fields">字段</param>
            <returns>返回字段值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchHashMember(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找Hash中字段名
            </summary>
            <param name="key">key</param>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns>字段名和值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchHashMemberAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找Hash中字段名 异步
            </summary>
            <param name="key">key</param>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns>字段名和值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelHash(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            删除Hash
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelHashAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            删除Hash 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelHash(System.String,System.Object[])">
            <summary>
            删除Hash
            </summary>
            <param name="key">key</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelHashAsync(System.String,System.Object[])">
            <summary>
            删除Hash 异步
            </summary>
            <param name="key">key</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExistsHash(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            是否存在Hash
            </summary>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExistsHashAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            是否存在Hash 异步
            </summary>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.HashIncrement``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="increment">增量值</param>
            <param name="dbNum">库索引</param>
            <returns>增加后的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.HashIncrementAsync``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="field">字段名</param>
            <param name="increment">增量值</param>
            <param name="dbNum">库索引</param>
            <returns>增加后的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Sort(System.String,XiaoFeng.Redis.SortOptions,System.Nullable{System.Int32})">
            <summary>
            排序
            </summary>
            <param name="key">key</param>
            <param name="options">排序选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SortAsync(System.String,XiaoFeng.Redis.SortOptions,System.Nullable{System.Int32})">
            <summary>
            排序 异步
            </summary>
            <param name="key">key</param>
            <param name="options">排序选项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHyperLogLog(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            添加指定元素到 HyperLogLog 中
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHyperLogLogAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            添加指定元素到 HyperLogLog 中 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHyperLogLog(System.String,System.Object[])">
            <summary>
            添加指定元素到 HyperLogLog 中
            </summary>
            <param name="key">key</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetHyperLogLogAsync(System.String,System.Object[])">
            <summary>
            添加指定元素到 HyperLogLog 中 异步
            </summary>
            <param name="key">key</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHyperLogLog(System.String,System.Nullable{System.Int32})">
            <summary>
            获取基数估算值
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetHyperLogLogAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取基数估算值 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MergeHyperLogLog(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">目的key</param>
            <param name="dbNum">库索引</param>
            <param name="sourceKey">源key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MergeHyperLogLogAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog 异步
            </summary>
            <param name="destKey">目的key</param>
            <param name="dbNum">库索引</param>
            <param name="sourceKey">源key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MergeHyperLogLog(System.String,System.Object[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">目的key</param>
            <param name="sourceKey">源key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MergeHyperLogLogAsync(System.String,System.Object[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog 异步
            </summary>
            <param name="destKey">目的key</param>
            <param name="sourceKey">源key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelKey(System.Nullable{System.Int32},System.String[])">
            <summary>
            删除key
            </summary>
            <param name="dbNum">库索引</param>
            <param name="keys">key集合</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelKey(System.String[])">
            <summary>
            删除key
            </summary>
            <param name="keys">key集合</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelKeyAsync(System.Nullable{System.Int32},System.String[])">
            <summary>
            删除key 异步
            </summary>
            <param name="dbNum">库索引</param>
            <param name="keys">key集合</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelKeyAsync(System.String[])">
            <summary>
            删除key 异步
            </summary>
            <param name="keys">key集合</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetDelKey(System.String,System.Nullable{System.Int32})">
            <summary>
            获取key值 并删除 6.2.0后可用
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>删除key的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetDelKeyAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取key值 并删除 6.2.0后可用 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>删除key的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DumpKey(System.String,System.Nullable{System.Int32})">
            <summary>
            序列化key
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DumpKeyAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            序列化key 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExistsKey(System.String,System.Nullable{System.Int32})">
            <summary>
            是否存在key
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExistsKeyAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            是否存在key 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireSeconds(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置过期时间
            </summary>
            <param name="key">key</param>
            <param name="seconds">过期时长 单位为秒</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireSecondsAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置过期时间 异步
            </summary>
            <param name="key">key</param>
            <param name="seconds">过期时长 单位为秒</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireMilliseconds(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            设置过期时间
            </summary>
            <param name="key">key</param>
            <param name="seconds">过期时长 单位为毫秒</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireMillisecondsAsync(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            设置过期时间 异步
            </summary>
            <param name="key">key</param>
            <param name="seconds">过期时长 单位为毫秒</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireSecondsTimestamp(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置过期时间
            </summary>
            <param name="key">key</param>
            <param name="timestamp">过期时长 秒时间戳</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireSecondsTimestampAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置过期时间 异步
            </summary>
            <param name="key">key</param>
            <param name="timestamp">过期时长 秒时间戳</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireMillisecondsTimestamp(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            设置过期时间
            </summary>
            <param name="key">key</param>
            <param name="timestamp">过期时长 毫秒时间戳</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetKeyExpireMillisecondsTimestampAsync(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            设置过期时间 异步
            </summary>
            <param name="key">key</param>
            <param name="timestamp">过期时长 毫秒时间戳</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ReNameKey(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            重命名key
            </summary>
            <param name="key">key</param>
            <param name="newKey">新key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ReNameKeyAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            重命名key 异步
            </summary>
            <param name="key">key</param>
            <param name="newKey">新key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ReNameKeyNoExists(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            重命名key 当新key不存在时
            </summary>
            <param name="key">key</param>
            <param name="newKey">新key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ReNameKeyNoExistsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            重命名key 当新key不存在时 异步
            </summary>
            <param name="key">key</param>
            <param name="newKey">新key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MoveKey(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">key</param>
            <param name="destDbNum">目标库索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MoveKeyAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中 异步
            </summary>
            <param name="key">key</param>
            <param name="destDbNum">目标库索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.RemoveKeyExpire(System.String,System.Nullable{System.Int32})">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.RemoveKeyExpireAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            移除 key 的过期时间，key 将持久保持 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyExpireSeconds(System.String,System.Nullable{System.Int32})">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyExpireSecondsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyExpireMilliseconds(System.String,System.Nullable{System.Int32})">
            <summary>
            以毫秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyExpireMillisecondsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            以毫秒为单位，返回给定 key 的剩余生存时间 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyRandom(System.Nullable{System.Int32})">
            <summary>
            从当前数据库中随机返回一个 key
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyRandomAsync(System.Nullable{System.Int32})">
            <summary>
            从当前数据库中随机返回一个 key
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyType(System.String,System.Nullable{System.Int32})">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeyTypeAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeys(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找数据库中的数据库键
            </summary>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">返回条数</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetKeysAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找数据库中的数据库键 异步
            </summary>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchKeys(System.String,System.Nullable{System.Int32})">
            <summary>
            查找所有符合给定模式( pattern)的 key
            </summary>
            <param name="pattern">模式 支持*和?</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchKeysAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            查找所有符合给定模式( pattern)的 key 异步
            </summary>
            <param name="pattern">模式 支持*和?</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetString``1(System.String,``0,System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            设置字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="timeSpan">过期时间</param>
            <param name="dbNum">数据库</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringAsync``1(System.String,``0,System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            设置字符串 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="timeSpan">过期时间</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetString(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            批量设置值
            </summary>
            <param name="values">key值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            批量设置值 异步
            </summary>
            <param name="values">key值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringNoExists``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            设置字符串 key不存在时
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringNoExistsAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            设置字符串 key不存在时 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringNoExists(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            批量设置值 key不存在时
            </summary>
            <param name="values">key值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringNoExistsAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            批量设置值 key不存在时 异步
            </summary>
            <param name="values">key值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetString(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置字符串 覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="offset">偏移量</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetStringAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置字符串 覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始 异步
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="offset">偏移量</param>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.AppendString(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            给指定的key值附加到原来值的尾部
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.AppendStringAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            给指定的key值附加到原来值的尾部 异步
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetString``1(System.String,System.Nullable{System.Int32})">
            <summary>
            获取字符串
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>key的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetString(System.String,System.Nullable{System.Int32})">
            <summary>
            获取字符串
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>key的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringAsync``1(System.String,System.Nullable{System.Int32})">
            <summary>
            获取字符串 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>key的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取字符串 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>key的值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetString(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取字符串
            </summary>
            <param name="key">key</param>
            <param name="start">起始位置</param>
            <param name="end">终止位置</param>
            <param name="dbNum">库索引</param>
            <returns>key的值的子字符串</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取字符串 异步
            </summary>
            <param name="key">key</param>
            <param name="start">起始位置</param>
            <param name="end">终止位置</param>
            <param name="dbNum">库索引</param>
            <returns>key的值的子字符串</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringLength(System.String,System.Nullable{System.Int32})">
            <summary>
            获取 key 值的长度
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringLengthAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取 key 值的长度 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetString``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            设置key的新值并返回key旧值
            </summary>
            <param name="key">key</param>
            <param name="value">key的新值</param>
            <param name="dbNum">库索引</param>
            <returns>key的旧值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetStringAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            设置key的新值并返回key旧值 异步
            </summary>
            <param name="key">key</param>
            <param name="value">key的新值</param>
            <param name="dbNum">库索引</param>
            <returns>key的旧值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetString(System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取所有(一个或多个)给定key的值
            </summary>
            <param name="dbNum">库索引</param>
            <param name="args">key</param>
            <returns>按顺序返回key值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringAsync(System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取所有(一个或多个)给定key的值 异步
            </summary>
            <param name="dbNum">库索引</param>
            <param name="args">key</param>
            <returns>按顺序返回key值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetString(System.Object[])">
            <summary>
            获取所有(一个或多个)给定key的值
            </summary>
            <param name="args">key</param>
            <returns>按顺序返回key值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetStringAsync(System.Object[])">
            <summary>
            获取所有(一个或多个)给定key的值 异步
            </summary>
            <param name="args">key</param>
            <returns>按顺序返回key值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringIncrement``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="increment">增量值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringIncrementAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将 key 所储存的值加上给定的增量值（increment） 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="increment">增量值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringIncrement(System.String,System.Nullable{System.Int32})">
            <summary>
            将 key 中储存的数字值增一
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringIncrementAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            将 key 中储存的数字值增一 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringDecrement``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            key 所储存的值减去给定的减量值（decrement）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="decrement">减量值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringDecrementAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            key 所储存的值减去给定的减量值（decrement） 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="decrement">减量值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringDecrement(System.String,System.Nullable{System.Int32})">
            <summary>
            将 key 中储存的数字值减一
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.StringDecrementAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            将 key 中储存的数字值减一 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.CopyKey(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            复制 Key 6.2.0版本
            </summary>
            <param name="key">源 key</param>
            <param name="destKey">目标 key</param>
            <param name="isReplace">存在是否替换</param>
            <param name="destDbNum">目标库索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.CopyKeyAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            复制 Key 异步 6.2.0版本
            </summary>
            <param name="key">源 key</param>
            <param name="destKey">目标 key</param>
            <param name="isReplace">存在是否替换</param>
            <param name="destDbNum">目标库索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItem``1(System.String,System.Int32,``0,System.Nullable{System.Int32})">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemAsync``1(System.String,System.Int32,``0,System.Nullable{System.Int32})">
            <summary>
            通过索引设置列表元素的值 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItem(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemAsync(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            通过索引设置列表元素的值 异步
            </summary>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBefore(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBeforeAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            将一个或多个值插入到列表头部 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBefore(System.String,System.Object[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBeforeAsync(System.String,System.Object[])">
            <summary>
            将一个或多个值插入到列表头部 异步
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItem(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            在列表中添加一个或多个值 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItem(System.String,System.Object[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemAsync(System.String,System.Object[])">
            <summary>
            在列表中添加一个或多个值 异步
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemBefore``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            在列表的元素前插入元素
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemBeforeAsync``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            在列表的元素前插入元素 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemBefore(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            在列表的元素前插入元素
            </summary>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemBeforeAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            在列表的元素前插入元素 异步
            </summary>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemAfter``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            在列表的元素后插入元素
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemAfterAsync``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            在列表的元素后插入元素 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemAfter(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            在列表的元素后插入元素
            </summary>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.InsertListItemAfterAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            在列表的元素后插入元素 异步
            </summary>
            <param name="key">列表key</param>
            <param name="item">元素</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns>是否插入成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListCount(System.String,System.Nullable{System.Int32})">
            <summary>
            获取列表长度
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListCountAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取列表长度 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBeforeExists``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBeforeExistsAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将一个值插入到已存在的列表头部 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBeforeExists(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemBeforeExistsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            将一个值插入到已存在的列表头部 异步
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemExists``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            为已存在的列表添加值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemExistsAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            为已存在的列表添加值 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemExists(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetListItemExistsAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            为已存在的列表添加值 异步
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItem(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="dbNum">库索引</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItemAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="dbNum">库索引</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItem(System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItemAsync(System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItem(System.Object[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="keys">key</param>
            <returns>列表的第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItemAsync(System.Object[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="keys">key</param>
            <returns>列表的第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItem(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="dbNum">库索引</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="dbNum">库索引</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItem(System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemAsync(System.Nullable{System.Int32},System.Object[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="keys">key</param>
            <returns>列表的最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItem(System.Object[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="keys">key</param>
            <returns>列表的最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemAsync(System.Object[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="keys">key</param>
            <returns>列表的最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemToOtherListFirst``1(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">源列表key</param>
            <param name="otherKey">目标列表key</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemToOtherListFirstAsync``1(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">源列表key</param>
            <param name="otherKey">目标列表key</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemToOtherListFirst(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            </summary>
            <param name="key">源列表key</param>
            <param name="otherKey">目标列表key</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemToOtherListFirstAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 异步
            </summary>
            <param name="key">源列表key</param>
            <param name="otherKey">目标列表key</param>
            <param name="timeout">超时时间 单位为秒 0一直等待</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListItem``1(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="dbNum">库索引</param>
            <returns>列表中的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListItemAsync``1(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过索引获取列表中的元素 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="dbNum">库索引</param>
            <returns>列表中的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListItem(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="dbNum">库索引</param>
            <returns>列表中的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListItemAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过索引获取列表中的元素 异步
            </summary>
            <param name="key">key</param>
            <param name="index">索引</param>
            <param name="dbNum">库索引</param>
            <returns>列表中的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItem``1(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItemAsync``1(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的第一个元素 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItem(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListFirstItemAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的第一个元素 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>第一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItem``1(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的最后一个元素
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemAsync``1(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的最后一个元素 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItem(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的最后一个元素
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListLastItemAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            移出并获取列表的最后一个元素 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListItems(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取列表中指定区间内的元素
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引 可以用负数 如 -1代表最后一个</param>
            <param name="stop">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetListItemsAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取列表中指定区间内的元素 异步
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引 可以用负数 如 -1代表最后一个</param>
            <param name="stop">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelListItem(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="count">移除数量 取绝对值 负数从表头开始向表尾搜索，正数从表尾开始向表头搜索 0移除所有</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelListItemAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素 异步
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="count">移除数量 取绝对值 负数从表头开始向表尾搜索，正数从表尾开始向表头搜索 0移除所有</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelListItem(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            删除不在区间内的元素
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引</param>
            <param name="stop">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelListItemAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            删除不在区间内的元素 异步
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引</param>
            <param name="stop">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.#ctor(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            设置连接串
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <param name="password">密码</param>
            <param name="MaxPool">应用池数量</param>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.#ctor(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            设置连接串
            </summary>
            <param name="host">主机</param>
            <param name="password">密码</param>
            <param name="port">端口</param>
            <param name="MaxPool">应用池数量</param>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.#ctor(System.String)">
            <summary>
            设置连接串
            </summary>
            <param name="connectionString">连接串</param>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置配置
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.#ctor(XiaoFeng.Redis.RedisConfig)">
            <summary>
            设置配置
            </summary>
            <param name="config">Redis配置</param>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.ConnConfig">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.IsConnected">
            <summary>
            是否连接
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.AddressFamily">
            <summary>
            寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.SocketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.ProtocolType">
            <summary>
            支持协议
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.SendTimeout">
            <summary>
            发送超时
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.ReceiveTimeout">
            <summary>
            接收超时
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.MemorySize">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.Stream">
            <summary>
            网络流
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient.SocketClient">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:XiaoFeng.Redis.RedisClient.RedisPool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisClient._Pool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.CreateConn">
            <summary>
            创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.CreateConnAsync">
            <summary>
            创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetCommandResult(XiaoFeng.Redis.CommandType)">
            <summary>
            获取响应
            </summary>
            <param name="commandType">命令</param>
            <returns>响应结果</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Execute``1(XiaoFeng.Redis.CommandType,System.Nullable{System.Int32},System.Func{XiaoFeng.Redis.CommandResult,``0},System.Object[])">
            <summary>
            执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="commandType">命令类型</param>
            <param name="dbNum">库索引</param>
            <param name="func">回调方法</param>
            <param name="args">参数集</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExecuteAsync``1(XiaoFeng.Redis.CommandType,System.Nullable{System.Int32},System.Func{XiaoFeng.Redis.CommandResult,System.Threading.Tasks.Task{``0}},System.Object[])">
            <summary>
            执行 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="commandType">命令类型</param>
            <param name="dbNum">库索引</param>
            <param name="func">回调方法</param>
            <param name="args">参数集</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Auth(System.String)">
            <summary>
            验证密码
            </summary>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.AuthAsync(System.String)">
            <summary>
            验证密码 异步
            </summary>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Ping">
            <summary>
            PING
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.PingAsync">
            <summary>
            PING 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Echo(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="echoStr">要打印的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.EchoAsync(System.String)">
            <summary>
            打印字符串 异步
            </summary>
            <param name="echoStr">要打印的字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Quit">
            <summary>
            退出
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.QuitAsync">
            <summary>
            退出 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Select(System.Int32)">
            <summary>
            选择数据库
            </summary>
            <param name="dbNum">库索引</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SelectAsync(System.Int32)">
            <summary>
            选择数据库 异步
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetValue``1(``0,System.Boolean@)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">值</param>
            <param name="isValue">是否是值类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetValue``1(``0)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetValues(System.Object[])">
            <summary>
            获取值
            </summary>
            <param name="values">数据集合</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetValue``1(System.Object)">
            <summary>
            设置值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.BackgroundRewriteAOF">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作。
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.BackgroundSave(System.Nullable{System.Int32})">
            <summary>
            后台异步保存当前数据库的数据到磁盘。
            </summary>
            <param name="dbNum">库索引</param>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Client``1(System.String,System.Object[])">
            <summary>
            客户端命令
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientAsync``1(System.String,System.Object[])">
            <summary>
            客户端命令 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientKill(System.String,System.Int32)">
            <summary>
            杀死客户端
            </summary>
            <param name="host">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientKillAsync(System.String,System.Int32)">
            <summary>
            杀死客户端 异步
            </summary>
            <param name="host">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientPause(System.Int64)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">时间 单位为毫秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientPauseAsync(System.Int64)">
            <summary>
            在指定时间内终止运行来自客户端的命令 异步
            </summary>
            <param name="timeout">时间 单位为毫秒</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientList">
            <summary>
            客户端列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientListAsync">
            <summary>
            客户端列表 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientSetName(System.String)">
            <summary>
            设置客户端名称
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientSetNameAsync(System.String)">
            <summary>
            设置客户端名称 异步
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientGetName">
            <summary>
            获取客户端名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ClientGetNameAsync">
            <summary>
            获取客户端名称 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SlavEOF(System.String,System.Int32)">
            <summary>
            将当前服务器转变为指定服务器的从属服务器(slave server)
            </summary>
            <param name="host">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SlavEOFAsync(System.String,System.Int32)">
            <summary>
            将当前服务器转变为指定服务器的从属服务器(slave server) 异步
            </summary>
            <param name="host">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ShutDown(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ShutDownAsync(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器 异步
            </summary>
            <param name="isSave">是否保存数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Save">
            <summary>
            一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SaveAsync">
            <summary>
            一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Role">
            <summary>
            查看主从实例所属的角色，角色有master, slave, sentinel。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.RoleAsync">
            <summary>
            查看主从实例所属的角色，角色有master, slave, sentinel。 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetDbKeySize(System.Nullable{System.Int32})">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetDbKeySizeAsync(System.Nullable{System.Int32})">
            <summary>
            返回当前数据库的 key 的数量 异步
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelDbKeys(System.Nullable{System.Int32})">
            <summary>
            删除当前数据库的所有key
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelDbKeysAsync(System.Nullable{System.Int32})">
            <summary>
            删除当前数据库的所有key 异步
            </summary>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelAllKeys">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelAllKeysAsync">
            <summary>
            删除所有数据库的所有key 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.Config``1(System.String,System.Object[])">
            <summary>
            服务器配置命令
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ConfigAsync``1(System.String,System.Object[])">
            <summary>
            服务器配置命令 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetConfig(System.String)">
            <summary>
            获取配置
            </summary>
            <param name="key">配置名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetConfigAsync(System.String)">
            <summary>
            获取配置 异步
            </summary>
            <param name="key">配置名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetConfig(System.String,System.String)">
            <summary>
            设置配置
            </summary>
            <param name="key">配置名称</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetConfigAsync(System.String,System.String)">
            <summary>
            设置配置 异步
            </summary>
            <param name="key">配置名称</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ConfigRewrite">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ConfigRewriteAsync">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写 异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSetMember(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSetMemberAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            向集合添加一个或多个成员 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSetMember(System.String,System.Object[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSetMemberAsync(System.String,System.Object[])">
            <summary>
            向集合添加一个或多个成员 异步
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MoveSetMember``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">源key</param>
            <param name="destKey">目标key</param>
            <param name="value">元素</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.MoveSetMemberAsync``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">源key</param>
            <param name="destKey">目标key</param>
            <param name="value">元素</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSetMember(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSetMemberAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            移除集合中一个或多个成员 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSetMember(System.String,System.Object[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSetMemberAsync(System.String,System.Object[])">
            <summary>
            移除集合中一个或多个成员 异步
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetCount(System.String,System.Nullable{System.Int32})">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetCountAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取集合的成员数 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiff(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的差异
            </summary>
            <param name="key">第一个集合</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiff(System.String,System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的差异
            </summary>
            <param name="key">第一个集合</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiffAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的差异 异步
            </summary>
            <param name="key">第一个集合</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiffAsync(System.String,System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的差异 异步
            </summary>
            <param name="key">第一个集合</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiffStore(System.String,System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiffStore(System.String,System.String,System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiffStoreAsync(System.String,System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中 异步
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetDiffStoreAsync(System.String,System.String,System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中 异步
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInter(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的交集
            </summary>
            <param name="key">第一个集合</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的交集</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInter(System.String,System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的交集
            </summary>
            <param name="key">第一个集合</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的交集</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInterAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的交集 异步
            </summary>
            <param name="key">第一个集合</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的交集</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInterAsync(System.String,System.Object[])">
            <summary>
            获取第一个集合与其他集合之间的交集 异步
            </summary>
            <param name="key">第一个集合</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的交集</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInterStore(System.String,System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回差异数量</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInterStore(System.String,System.String,System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回差异数量</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInterStoreAsync(System.String,System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中 异步
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回差异数量</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetInterStoreAsync(System.String,System.String,System.Object[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中 异步
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回差异数量</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnion(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            所有给定集合的并集
            </summary>
            <param name="key">第一个集合</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnion(System.String,System.Object[])">
            <summary>
            所有给定集合的并集
            </summary>
            <param name="key">第一个集合</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnionAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            所有给定集合的并集 异步
            </summary>
            <param name="key">第一个集合</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnionAsync(System.String,System.Object[])">
            <summary>
            所有给定集合的并集 异步
            </summary>
            <param name="key">第一个集合</param>
            <param name="otherKey">其他集合</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnionStore(System.String,System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            返回所有给定集合的并集并存储在 destination 中
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnionStore(System.String,System.String,System.Object[])">
            <summary>
            返回所有给定集合的并集并存储在 destination 中
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnionStoreAsync(System.String,System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            返回所有给定集合的并集并存储在 destination 中 异步
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="dbNum">库索引</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetUnionStoreAsync(System.String,System.String,System.Object[])">
            <summary>
            返回所有给定集合的并集并存储在 destination 中 异步
            </summary>
            <param name="key">第一个集合key</param>
            <param name="storeKey">存储集合key</param>
            <param name="otherKey">其他集合key</param>
            <returns>返回第一个集合与其他集合之间的差异</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExistsSetMember``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            判断成员元素是否是集合的成员
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">元素</param>
            <param name="dbNum">库索引</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.ExistsSetMemberAsync``1(System.String,``0,System.Nullable{System.Int32})">
            <summary>
            判断成员元素是否是集合的成员 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">key</param>
            <param name="value">元素</param>
            <param name="dbNum">库索引</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetMemberList(System.String,System.Nullable{System.Int32})">
            <summary>
            获取集合中的所有成员
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>集合中的所有成员</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetMemberListAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取集合中的所有成员 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>集合中的所有成员</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetPop(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">key</param>
            <param name="count">移除位数</param>
            <param name="dbNum">库索引</param>
            <returns>移除的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetPopAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            移除并返回集合中的一个或多个随机元素 异步
            </summary>
            <param name="key">key</param>
            <param name="count">移除位数</param>
            <param name="dbNum">库索引</param>
            <returns>移除的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetRandomMember(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取集合中一个或多个随机数
            </summary>
            <param name="key">key</param>
            <param name="count">随机位数</param>
            <param name="dbNum">库索引</param>
            <returns>随机的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSetRandomMemberAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取集合中一个或多个随机数 异步
            </summary>
            <param name="key">key</param>
            <param name="count">随机位数</param>
            <param name="dbNum">库索引</param>
            <returns>随机的元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchSetMember(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找Set中的元素
            </summary>
            <param name="key">key</param>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns>元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchSetMemberAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找Set中的元素 异步
            </summary>
            <param name="key">key</param>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns>元素</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSortedSetMember(System.String,System.Collections.Generic.Dictionary{System.Object,System.Single},System.Nullable{System.Int32})">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSortedSetMemberAsync(System.String,System.Collections.Generic.Dictionary{System.Object,System.Single},System.Nullable{System.Int32})">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数 异步
            </summary>
            <param name="key">key</param>
            <param name="values">值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetCount(System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集合的成员数
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>有序集合的成员数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetCountAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集合的成员数 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <returns>有序集合的成员数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetCount(System.String,System.Object,System.Object,System.Nullable{System.Int32})">
            <summary>
            获取有序集合指定区间分数的成员数
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>有序集合的成员数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetCountAsync(System.String,System.Object,System.Object,System.Nullable{System.Int32})">
            <summary>
            获取有序集合指定区间分数的成员数 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>有序集合的成员数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetInterStore(System.String,XiaoFeng.Redis.SortedSetOptions,System.Nullable{System.Int32})">
            <summary>
            计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destKey">存储key</param>
            <param name="options">计算项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetInterStoreAsync(System.String,XiaoFeng.Redis.SortedSetOptions,System.Nullable{System.Int32})">
            <summary>
            计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中 异步
            </summary>
            <param name="destKey">存储key</param>
            <param name="options">计算项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetUnionStore(System.String,XiaoFeng.Redis.SortedSetOptions,System.Nullable{System.Int32})">
            <summary>
            计算给定的一个或多个有序集的并集并将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destKey">存储key</param>
            <param name="options">计算项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetUnionStoreAsync(System.String,XiaoFeng.Redis.SortedSetOptions,System.Nullable{System.Int32})">
            <summary>
            计算给定的一个或多个有序集的并集并将结果集存储在新的有序集合 destination 中 异步
            </summary>
            <param name="destKey">存储key</param>
            <param name="options">计算项</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRange(System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            通过索引区间返回有序集合指定区间内的成员 分数递增排序
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引</param>
            <param name="stop">结束索引</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRangeAsync(System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            通过索引区间返回有序集合指定区间内的成员 分数递增排序 异步
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引</param>
            <param name="stop">结束索引</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRevRange(System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            通过索引区间返回有序集合指定区间内的成员 分数递减排序
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引</param>
            <param name="stop">结束索引</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRevRangeAsync(System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            通过索引区间返回有序集合指定区间内的成员 分数递减排序 异步
            </summary>
            <param name="key">key</param>
            <param name="start">开始索引</param>
            <param name="stop">结束索引</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRangeByLex(System.String,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过字典区间返回有序集合的成员
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRangeByLexAsync(System.String,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过字典区间返回有序集合的成员 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRangeByScore(System.String,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过分数区间返回有序集合的成员
            </summary>
            <param name="key">key</param>
            <param name="min">最小分数</param>
            <param name="max">最大分数</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRangeByScoreAsync(System.String,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过分数区间返回有序集合的成员 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小分数</param>
            <param name="max">最大分数</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRank(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集合中指定成员的索引
            </summary>
            <param name="key">key</param>
            <param name="member">成员</param>
            <param name="dbNum">库索引</param>
            <returns>成员索引</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRankAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集合中指定成员的索引 异步
            </summary>
            <param name="key">key</param>
            <param name="member">成员</param>
            <param name="dbNum">库索引</param>
            <returns>成员索引</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRevRank(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">key</param>
            <param name="member">成员</param>
            <param name="dbNum">库索引</param>
            <returns>成员索引</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRevRankAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序 异步
            </summary>
            <param name="key">key</param>
            <param name="member">成员</param>
            <param name="dbNum">库索引</param>
            <returns>成员索引</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRevRangeByScore(System.String,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">key</param>
            <param name="max">最大分数</param>
            <param name="min">最小分数</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetRevRangeByScoreAsync(System.String,System.Single,System.Single,System.Boolean,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            通过有序集中指定分数区间内的成员，分数从高到低排序 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小分数</param>
            <param name="max">最大分数</param>
            <param name="isWithScores">是否带上分数值</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetScore(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集中，成员的分数值
            </summary>
            <param name="key">key</param>
            <param name="member">成员</param>
            <param name="dbNum">库索引</param>
            <returns>成员索引</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.GetSortedSetScoreAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取有序集中，成员的分数值 异步
            </summary>
            <param name="key">key</param>
            <param name="member">成员</param>
            <param name="dbNum">库索引</param>
            <returns>成员索引</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchSortedSetMember(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找Hash中字段名
            </summary>
            <param name="key">key</param>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns>字段名和值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SearchSortedSetMemberAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            查找Hash中字段名 异步
            </summary>
            <param name="key">key</param>
            <param name="pattern">模式 支持*和?</param>
            <param name="start">开始位置</param>
            <param name="count">遍历条数</param>
            <param name="dbNum">库索引</param>
            <returns>字段名和值</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSortedSetIncrement(System.String,System.Object,System.Int32,System.Nullable{System.Int32})">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">key</param>
            <param name="value">元素</param>
            <param name="increment">递增量</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.SetSortedSetIncrementAsync(System.String,System.Object,System.Int32,System.Nullable{System.Int32})">
            <summary>
            有序集合中对指定成员的分数加上增量 increment 异步
            </summary>
            <param name="key">key</param>
            <param name="value">元素</param>
            <param name="increment">递增量</param>
            <param name="dbNum">库索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMember(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="members">成员</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberAsync(System.String,System.Nullable{System.Int32},System.Object[])">
            <summary>
            移除有序集合中的一个或多个成员 异步
            </summary>
            <param name="key">key</param>
            <param name="dbNum">库索引</param>
            <param name="members">成员</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMember(System.String,System.Object[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">key</param>
            <param name="members">成员</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberAsync(System.String,System.Object[])">
            <summary>
            移除有序集合中的一个或多个成员 异步
            </summary>
            <param name="key">key</param>
            <param name="members">成员</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberByLex(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            移除有序集合中给定的字典区间的所有成员
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            移除有序集合中给定的字典区间的所有成员 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberByScore(System.String,System.Single,System.Single,System.Nullable{System.Int32})">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberByScoreAsync(System.String,System.Single,System.Single,System.Nullable{System.Int32})">
            <summary>
            移除有序集合中给定的分数区间的所有成员 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberByRank(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisClient.DelSortedSetMemberByRankAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            移除有序集合中给定的排名区间的所有成员 异步
            </summary>
            <param name="key">key</param>
            <param name="min">最小</param>
            <param name="max">最大</param>
            <param name="dbNum">库索引</param>
            <returns>成功移除个数</returns>
        </member>
        <member name="T:XiaoFeng.Redis.ClientInfo">
            <summary>
            ClientInfo 类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.ClientInfo.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.addr">
            <summary>
            客户端的地址和端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.fd">
            <summary>
             套接字所使用的文件描述符
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.age">
            <summary>
             以秒计算的已连接时长
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.idle">
            <summary>
             以秒计算的空闲时长
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.flags">
            <summary>
             客户端 flag
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.db">
            <summary>
             该客户端正在使用的数据库 ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.sub">
            <summary>
             已订阅频道的数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.psub">
            <summary>
             已订阅模式的数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.multi">
            <summary>
             在事务中被执行的命令数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.qbuf">
            <summary>
             查询缓冲区的长度（字节为单位， 0 表示没有分配查询缓冲区）
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.qbuffree">
            <summary>
             查询缓冲区剩余空间的长度（字节为单位， 0 表示没有剩余空间）
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.obl">
            <summary>
             输出缓冲区的长度（字节为单位， 0 表示没有分配输出缓冲区）
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.oll">
            <summary>
              输出列表包含的对象数量（当输出缓冲区没有剩余空间时，命令回复会以字符串对象的形式被入队到这个队列里）
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.omem">
            <summary>
             输出缓冲区的长度（字节为单位， 0 表示没有分配输出缓冲区）
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.events">
            <summary>
             文件描述符事件
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.ClientInfo.cmd">
            <summary>
             最近一次执行的命令
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.GeoModel">
            <summary>
            GEO 模型
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.GeoModel.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoModel.Address">
            <summary>
            位置名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoModel.Longitude">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoModel.Latitude">
            <summary>
            纬度
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.GeoRadiusModel">
            <summary>
            GeoRadiusModel 类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.GeoRadiusModel.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusModel.Dist">
            <summary>
            距离
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusModel.Hash">
            <summary>
            Hash值
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.GeoRadiusOptions">
            <summary>
            位置半径选项
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.GeoRadiusOptions.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.Radius">
            <summary>
            半径长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.UnitType">
            <summary>
            单位类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.IsWithdist">
            <summary>
            在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.IsWithCoord">
            <summary>
            将位置元素的经度和维度也一并返回。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.IsWithHash">
            <summary>
            以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.Count">
            <summary>
            返回的记录数。
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.SortType">
            <summary>
            查找结果根据距离类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.StoreKey">
            <summary>
            存储key
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusOptions.StoreDistKey">
            <summary>
            存储距离 key
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.GeoRadiusOptions.ToArgments(XiaoFeng.Redis.CommandType)">
            <summary>
            转换成参数
            </summary>
            <param name="commandType">类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.GeoRadiusSearchOptions">
            <summary>
            GeoRadiusSearchOptions 类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.GeoRadiusSearchOptions.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusSearchOptions.Box">
            <summary>
            搜索区域
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.GeoRadiusSearchOptions.ToArgments">
            <summary>
            转换参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.GeoRadiusSearchBox">
            <summary>
            搜索区域
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusSearchBox.Width">
            <summary>
            宽
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusSearchBox.Height">
            <summary>
            高
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.GeoRadiusSearchBox.UnitType">
            <summary>
            单位
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.Limit">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.Limit.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.Limit.#ctor(System.Int32,System.Int32)">
            <summary>
            设置索引
            </summary>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
        </member>
        <member name="P:XiaoFeng.Redis.Limit.Start">
            <summary>
            开始索引
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.Limit.End">
            <summary>
            结束索引
            </summary>
        </member>
        <member name="T:XiaoFeng.Redis.SortedSetOptions">
            <summary>
            有序集合合并选项
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortedSetOptions.KeyAndWeights">
            <summary>
            有序集合key和权重
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortedSetOptions.Aggregate">
            <summary>
            聚合联合类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.SortedSetOptions.ToArgments">
            <summary>
            生成参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.SortOptions">
            <summary>
            排序操作类
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortOptions.Sort">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortOptions.ALPHA">
            <summary>
            是否按字典排序
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortOptions.Limit">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortOptions.OutKey">
            <summary>
            外部键
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortOptions.GetKeys">
            <summary>
            引用对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.SortOptions.Store">
            <summary>
            存储位置
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.SortOptions.ToArgments">
            <summary>
            转换成参数集
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.PrototypeHelper">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.PrototypeHelper.ToDictionary``2(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            字典类型转换
            </summary>
            <typeparam name="TKey">key类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="d">数据</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.RedisConfig">
            <summary>
            Redis 连接配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisConfig.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisConfig.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            配置数据库连接串
            </summary>
            <param name="config">配置</param>
        </member>
        <member name="M:XiaoFeng.Redis.RedisConfig.#ctor(System.String)">
            <summary>
            配置数据库连接串 redis://7092734@127.0.0.1:6379/0?配置
            </summary>
            <param name="connectionString">数据库连接串</param>
        </member>
        <member name="P:XiaoFeng.Redis.RedisConfig.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisConfig.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisConfig.DbNum">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisConfig.ConnectionTimeout">
            <summary>
            连接超时时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisConfig.ReadTimeout">
            <summary>
            读取数据超时时间
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisConfig.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisConfig.ToStringX">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisConfig.ToConnetionConfig">
            <summary>
            转换公共连接串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Redis.RedisPool">
            <summary>
            RedisPool 类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.AddressFamily">
            <summary>
            寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.SocketType">
            <summary>
            套接字类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.ProtocolType">
            <summary>
            支持协议
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.SendTimeout">
            <summary>
            发送超时
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.ReceiveTimeout">
            <summary>
            接收超时
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.MemorySize">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.Host">
            <summary>
            通讯地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.Port">
            <summary>
            通讯端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Redis.RedisPool.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.OnCreate">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.Get">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.OnGet(XiaoFeng.Collections.PoolItem{System.Net.Sockets.Socket})">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.OnPut(XiaoFeng.Collections.PoolItem{System.Net.Sockets.Socket})">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.Close(System.Net.Sockets.Socket)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.OnDispose(System.Net.Sockets.Socket)">
            <inheritdoc/>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.Execute``1(XiaoFeng.Redis.CommandType,System.Nullable{System.Int32},System.Func{XiaoFeng.Redis.CommandResult,``0},System.Object[])">
            <summary>
            执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="commandType">命令类型</param>
            <param name="dbNum">库索引</param>
            <param name="func">回调方法</param>
            <param name="args">参数集</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.ExecuteAsync``1(XiaoFeng.Redis.CommandType,System.Nullable{System.Int32},System.Func{XiaoFeng.Redis.CommandResult,System.Threading.Tasks.Task{``0}},System.Object[])">
            <summary>
            执行 异步
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="commandType">命令类型</param>
            <param name="dbNum">库索引</param>
            <param name="func">回调方法</param>
            <param name="args">参数集</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:XiaoFeng.Redis.RedisPool.GetCommandResult(System.Net.Sockets.NetworkStream,XiaoFeng.Redis.CommandType)">
            <summary>
            获取响应
            </summary>
            <param name="Stream">网络流</param>
            <param name="commandType">命令</param>
            <returns>响应结果</returns>
        </member>
        <member name="T:XiaoFeng.StopWatch">
            <summary>
            执行时间类
            </summary>
        </member>
        <member name="M:XiaoFeng.StopWatch.GetTime(System.Action)">
            <summary>
            获取运行时长
            </summary>
            <param name="action">方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.StopWatch.GetTime(System.Action{System.Object},System.Object)">
            <summary>
            获取运行时长
            </summary>
            <param name="action">方法</param>
            <param name="o">参数</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Test">
            <summary>
            检查C#中语法属性操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Test.GetProperties``1(``0)">
            <summary>
            获取实例类中的所有属性及值
            </summary>
            <typeparam name="T">泛类型</typeparam>
            <param name="model">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Test.GetDataStructure(System.Data.DataTable)">
            <summary>
            获取DataTable 数据结构
            </summary>
            <param name="dt">DataTable 数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Test.GetDataStructure(System.Data.Common.DbDataReader)">
            <summary>
            获取DataReader数据结构
            </summary>
            <param name="sdr">DataReader 数据</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.BankInfo">
            <summary>
            验证银行卡
            </summary>
        </member>
        <member name="M:XiaoFeng.BankInfo.CheckBankCardNO(System.String)">
            <summary>
            验证银行卡号是否正确
            </summary>
            <param name="no">银行卡号</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.RegexPattern">
            <summary>
            正则格式
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/8/11 17:22:57
            Update Time : 2017/8/11 17:22:57
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.BasePath">
            <summary>
            物理路径
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Chinese">
            <summary>
            汉字格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Letter">
            <summary>
            字母格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Ftp">
            <summary>
            FTP格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Site">
            <summary>
            网址格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.guid">
            <summary>
            GUID格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Email">
            <summary>
            Email格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Numberic">
            <summary>
            数字格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Float">
            <summary>
            浮点格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Tel">
            <summary>
            固话格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Phone">
            <summary>
            手机格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Date">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Time">
            <summary>
            时间格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.DateTime">
            <summary>
            完整日期时间格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.DateOrTime">
            <summary>
            日期格式 日期或日期+时间
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.IP">
            <summary>
            IP格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Boolean">
            <summary>
            Boolean格式
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Query">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="F:XiaoFeng.RegexPattern.Indexer">
            <summary>
            this索引器
            </summary>
        </member>
        <member name="T:XiaoFeng.Resources.ResourceHelper">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="F:XiaoFeng.Resources.ResourceHelper.Data">
            <summary>
            所有的资源
            </summary>
        </member>
        <member name="F:XiaoFeng.Resources.ResourceHelper.LoadData">
            <summary>
            已加载过的dll资源
            </summary>
        </member>
        <member name="M:XiaoFeng.Resources.ResourceHelper.Load">
            <summary>
            加载资源[注入到应用入口位置]
            </summary>
        </member>
        <member name="M:XiaoFeng.Resources.ResourceHelper.Get(System.String)">
            <summary>
            获取资源
            </summary>
            <param name="Name">名称</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Resources.Resource">
            <summary>
            资源对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Resources.Resource.Name">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Resources.Resource.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Resources.Resource.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Resources.Resource.Suffix">
            <summary>
            后缀
            </summary>
        </member>
        <member name="T:XiaoFeng.Resources.ResourceType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Resources.ResourceType.Byte">
            <summary>
            文件流
            </summary>
        </member>
        <member name="F:XiaoFeng.Resources.ResourceType.Dll">
            <summary>
            dll
            </summary>
        </member>
        <member name="F:XiaoFeng.Resources.ResourceType.File">
            <summary>
            文本文件
            </summary>
        </member>
        <member name="F:XiaoFeng.Resources.ResourceType.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="T:XiaoFeng.SnowFlake">
            <summary>  
            动态生产有规律的ID  
            雪花算法
            Author : Jacky
            Email : Jacky@zhuovi.com
            Create Date : 2018-05-31
            </summary>  
        </member>
        <member name="F:XiaoFeng.SnowFlake.MachineID">
            <summary>
            机器ID
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.DatacenterID">
            <summary>
            数据ID
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.Sequence">
            <summary>
            计数从零开始
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.Twepoch">
            <summary>
            唯一时间随机量
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.MachineIdBits">
            <summary>
            机器码字节数
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.DatacenterIdBits">
            <summary>
            数据字节数
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.MaxMachineID">
            <summary>
            最大机器ID
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.MaxDatacenterID">
            <summary>
            最大数据ID
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.SequenceBits">
            <summary>
            计数器字节数，12个字节用来保存计数码
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.MachineIdShift">
            <summary>
            机器码数据左移位数，就是后面计数器占用的位数
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.DatacenterIdShift">
            <summary>
            
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.TimestampLeftShift">
            <summary>
            时间戳左移动位数就是机器码+计数器总字节数+数据字节数
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.SequenceMask">
            <summary>
            一微秒内可以产生计数，如果达到该值则等到下一微妙在进行生成
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.LastTimestamp">
            <summary>
            最后时间戳
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.SyncRoot">
            <summary>
            加锁对象
            </summary>
        </member>
        <member name="F:XiaoFeng.SnowFlake.Snowflake">
            <summary>
            静态方法
            </summary>
        </member>
        <member name="M:XiaoFeng.SnowFlake.Instance">
            <summary>
            实例化一个静态方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.SnowFlake.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.SnowFlake.#ctor(System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="machineId">机器码</param>
        </member>
        <member name="M:XiaoFeng.SnowFlake.#ctor(System.Int64,System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="machineId">机器码</param>
            <param name="datacenterId">数据字节数</param>
        </member>
        <member name="M:XiaoFeng.SnowFlake.SnowFlakes(System.Int64,System.Int64)">
            <summary>
            生成数据ID
            </summary>
            <param name="machineId">机器码</param>
            <param name="datacenterId">数据字节数</param>
        </member>
        <member name="M:XiaoFeng.SnowFlake.GetTimestamp">
            <summary>  
            生成当前时间戳  
            </summary>  
            <returns>毫秒</returns>  
        </member>
        <member name="M:XiaoFeng.SnowFlake.GetNextTimestamp(System.Int64)">
            <summary>  
            获取下一微秒时间戳  
            </summary>  
            <param name="lastTimestamp">最后时间戳</param>  
            <returns></returns>  
        </member>
        <member name="M:XiaoFeng.SnowFlake.GetID">
            <summary>  
            获取长整形的ID  
            </summary>  
            <returns></returns>  
        </member>
        <member name="T:XiaoFeng.Sockets.ClientSocketConnection">
            <summary>
            客户端连接类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.ClientSocketConnection.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.WsType">
            <summary>
            WS类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.Host">
            <summary>
            网址或IP
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.IPAddress">
            <summary>
            连接服务器地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.Header">
            <summary>
            Header头信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketConnection.Headers">
            <summary>
            Header头信息
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.ClientSocketData">
            <summary>
            客户端连接存储对象
            Verstion : 1.0.0
            Create Time : 2018/2/5 11:57:59
            Update Time : 2018/2/5 11:57:59
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.ClientSocketData.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketData.ClientSocket">
            <summary>
            连接
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketData.EndPoint">
            <summary>
            网络接点
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketData.IsWebSocket">
            <summary>
            是否是WebSocket
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketData.ConnectTime">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.ClientSocketData.Buffer">
            <summary>
            接收的数据
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.DataFrame">
            <summary>
            数据帧头,就是包头结构
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrame._Header">
            <summary>
            帧头
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrame._Extend">
            <summary>
            标识
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrame._Mask">
            <summary>
            0或4个字节，客户端发送给服务端的数据，都是通过内嵌的一个32位值作为掩码的；掩码键只有在掩码位设置为1的时候存在。
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrame._Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrame.DataType">
            <summary>
            Socket 数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrame.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrame.#ctor(System.Byte[])">
            <summary>
            设置消息
            </summary>
            <param name="buffer">字节</param>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrame.#ctor(System.String)">
            <summary>
            设置消息
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrame.GetBytes">
            <summary>
            获取消息数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrame.Text">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrame.Mask(System.Byte[],System.Byte[])">
            <summary>
            0或4个字节，客户端发送给服务端的数据，都是通过内嵌的一个32位值作为掩码的；掩码键只有在掩码位设置为1的时候存在。
            </summary>
            <param name="data">数据</param>
            <param name="mask">数组</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Sockets.DataFrameHeader">
            <summary>
            帧头操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrameHeader.#ctor(System.Byte[])">
            <summary>
            设置数据
            </summary>
            <param name="buffer">字节</param>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrameHeader.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.SByte,System.Boolean,System.Int32)">
            <summary>
            发送封装数据
            </summary>
            <param name="fin">0表示不是当前消息的最后一帧，后面还有消息,1表示这是当前消息的最后一帧</param>
            <param name="rsv1">1位，若没有自定义协议,必须为0,否则必须断开</param>
            <param name="rsv2">1位，若没有自定义协议,必须为0,否则必须断开.</param>
            <param name="rsv3">1位，若没有自定义协议,必须为0,否则必须断开</param>
            <param name="opcode">4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.</param>
            <param name="hasmask">1位，定义传输的数据是否有加掩码,如果有掩码则存放在MaskingKey</param>
            <param name="length">传输数据的长度</param>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._fin">
            <summary>
            0表示不是当前消息的最后一帧，后面还有消息,1表示这是当前消息的最后一帧
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._rsv1">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._rsv2">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开.
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._rsv3">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._opcode">
            <summary>
            4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._maskcode">
            <summary>
            1位，定义传输的数据是否有加掩码,如果有掩码则存放在MaskingKey
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.DataFrameHeader._payloadlength">
            <summary>
            传输数据的长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.FIN">
            <summary>
            0表示不是当前消息的最后一帧，后面还有消息,1表示这是当前消息的最后一帧
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.RSV1">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.RSV2">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开.
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.RSV3">
            <summary>
            1位，若没有自定义协议,必须为0,否则必须断开
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.OpCode">
            <summary>
            4位操作码，定义有效负载数据，如果收到了一个未知的操作码，连接必须断开.
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.HasMask">
            <summary>
            1位，定义传输的数据是否有加掩码,如果有掩码则存放在MaskingKey
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.DataFrameHeader.Length">
            <summary>
            传输数据的长度
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.DataFrameHeader.GetBytes">
            <summary>
            返回帧头字节
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Sockets.NewConnectionEventHandler">
            <summary>
            新连接委托
            </summary>
            <param name="sender">对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Sockets.MessageEventHandler">
            <summary>
            接收消息委托
            </summary>
            <param name="sender">对象</param>
            <param name="message">消息</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Sockets.MessageByteEventHandler">
            <summary>
            接收消息委托
            </summary>
            <param name="sender">对象</param>
            <param name="message">消息</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Sockets.DisconnectedEventHandler">
            <summary>
            断开连接委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:XiaoFeng.Sockets.CloseEventHandler">
            <summary>
            关闭服务委托
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Sockets.ErrorEventHandler">
            <summary>
            错误信息委托
            </summary>
            <param name="sender">对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Sockets.OpenEventHandler">
            <summary>
            启动委托
            </summary>
            <param name="sender">服务对象</param>
            <param name="e">事件</param>
        </member>
        <member name="T:XiaoFeng.Sockets.SocketClient">
            <summary>
            Socket客户端帮助类
            Verstion : 1.0.2
            Create Time : 2018/2/5 13:42:40
            Update Time : 2018/06/13 09:31:39
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.#ctor(System.String,System.Int32)">
            <summary>
            设置IP和端口
            </summary>
            <param name="IP">IP</param>
            <param name="Port">端口</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            设置IP和端口
            </summary>
            <param name="IP">IP</param>
            <param name="Port">端口</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            设置IP和端口
            </summary>
            <param name="IpPort">IP和端口</param>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.Cookie">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.UserAgent">
            <summary>
            浏览器信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.Origin">
            <summary>
            Origin
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient._SocketClient">
            <summary>
            与客户端通信的套接字
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.AddressFamily">
            <summary>
            使用的寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.SocketType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketClient.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketClient.ClientSocketConnection">
            <summary>
            客户端连接数据
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketClient.OnMessage">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketClient.OnMessageByte">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketClient.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketClient.OnError">
            <summary>
            出错事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketClient.OnOpen">
            <summary>
            服务器启动事件
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.Receives(System.Net.Sockets.Socket)">
            <summary>
            处理连接
            </summary>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.Send(System.String)">
            <summary>
            发送信息
            </summary>
            <param name="msg">信息</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.Send(System.Byte[])">
            <summary>
            发送信息
            </summary>
            <param name="bytes">信息字节</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.GetBytes(System.String)">
            <summary>
            获取字节组
            </summary>
            <param name="content">数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.IsConnected">
            <summary>
            是否连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.CreateHeader">
            <summary>
            创建头信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketClient.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.SocketConnection">
            <summary>
            Socket连接对象
            Verstion : 1.0.3
            Create Time : 2018/2/10 15:38:14
            Update Time : 2018/06/13 09:31:39
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.ID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.GroupID">
            <summary>
            分组ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.IsDataMasked">
            <summary>
            是否打包
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.EndPoint">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.Data">
            <summary>
            其它数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.ConnectionSocket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection.MaxBufferSize">
            <summary>
            最长长度
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection._Handshake">
            <summary>
            握手
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.Handshake">
            <summary>
            握手
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.NewHandshake">
            <summary>
            新握手
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.OSName">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.ReceivedDataBuffer">
            <summary>
            接收数据
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection.FirstByte">
            <summary>
            第一个字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection.LastByte">
            <summary>
            最后字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection.ServerKey1">
            <summary>
            服务key1
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection.ServerKey2">
            <summary>
            服务key2
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.SocketType">
            <summary>
            是否是WebSocket
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.AddDate">
            <summary>
            连接时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.PingTimeStamp">
            <summary>
            ping时间戳
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.RequestHeader">
            <summary>
            请求头信息
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketConnection.OnConnection">
            <summary>
            连接委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketConnection.OnMessage">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketConnection.OnMessageByte">
            <summary>
            消息委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketConnection.OnDisconnected">
            <summary>
            断开连接委托
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketConnection.OnError">
            <summary>
            出错委托
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketConnection.SocketAuth">
            <summary>
            连接认证
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketConnection.SetSocketType">
            <summary>
            设置是Socket类型
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.ReceiveSocketData(System.IAsyncResult)">
            <summary>
            处理接受Socket的数据
            </summary>
            <param name="socket">Socket</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            判断连接状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.ReceiveWebSocketData(System.IAsyncResult)">
            <summary>
            处理接受WebSocket的数据
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.BuildServerPartialKey(System.Int32,System.String)">
            <summary>
            处理Key
            </summary>
            <param name="keyNum">key</param>
            <param name="clientKey">客户端Key</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.BuildServerFullKey(System.Byte[])">
            <summary>
            处理服务器Key
            </summary>
            <param name="last8Bytes">最后8个字节</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.ManageHandshake(System.IAsyncResult)">
            <summary>
            握手信息
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.ComputeWebSocketHandshakeSecurityHash09(System.String)">
            <summary>
            打包请求连接数据
            </summary>
            <param name="secWebSocketKey">客户请求头信息</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.HandshakeFinished(System.IAsyncResult)">
            <summary>
            握手完成信息
            </summary>
            <param name="status">状态</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketConnection.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.SocketServer">
            <summary>
            Socket服务器帮助类
            Version : 1.0.4
            Create Time : 2018/2/10 15:38:14
            Update Time : 2018/06/13 09:31:39
            Description :
            version 1.0.3   2018-07-19
            1.增加SocketAuth 和WebSocketAuth
            version 1.0.4   2018-07-25
            1.更新关闭Socket服务时socket出错
            2.更新在线列表
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.#ctor(System.String,System.Int32)">
            <summary>
            设置服务器IP和端口
            </summary>
            <param name="ip">IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.#ctor(System.Int32)">
            <summary>
            设置端口
            </summary>
            <param name="port">端口</param>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.DataType">
            <summary>
            Socket数据类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.IsNewLine">
            <summary>
            消息后是否加回车
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.SocketState">
            <summary>
            Socket状态
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.IsPing">
            <summary>
            是否启动心跳
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.PingTimer">
            <summary>
            ping 间隔时长 单位 毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.PingCount">
            <summary>
            几次不回应断开
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.IP">
            <summary>
            侦听网络IP
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.Port">
            <summary>
            侦听网络端口
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.AddressFamily">
            <summary>
            使用的寻址方案
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.SocketType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.ProtocolType">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.ListenCount">
            <summary>
            连接请求数
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.CancelToken">
            <summary>
            取消通知
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.SocketAuth">
            <summary>
            验证Socket请求的合法性
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.IpBlackList">
            <summary>
            黑名单列表
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.RWLock">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.AlreadyDisposed">
            <summary>
            准备释放
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.ServerSocket">
            <summary>
            服务监听
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.MaxBufferSize">
            <summary>
            最大接收数
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.FirstByte">
            <summary>
            开始字节
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketServer.LastByte">
            <summary>
            结尾字节
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.ConnectionSocketList">
            <summary>
            连接列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Sockets.SocketServer.ServerLocation">
            <summary>
            WS地址
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnNewConnection">
            <summary>
            新的连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnMessage">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnMessageByte">
            <summary>
            接收消息事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnDisconnected">
            <summary>
            断开连接事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnClose">
            <summary>
            关闭服务事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnError">
            <summary>
            出错事件
            </summary>
        </member>
        <member name="E:XiaoFeng.Sockets.SocketServer.OnOpen">
            <summary>
            服务器启动事件
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.GetLocalmachineIPAddress">
            <summary>
            获取地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.SendFile(System.String,XiaoFeng.Sockets.SocketConnection)">
            <summary>
            发送文件
            </summary>
            <param name="fileName">文件路径</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Send(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Send(System.String,System.Net.Sockets.Socket)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Send(System.String,XiaoFeng.Sockets.SocketConnection)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Send(System.Byte[])">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Send(System.Byte[],System.Net.Sockets.Socket)">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Send(System.Byte[],XiaoFeng.Sockets.SocketConnection)">
            <summary>
            发送消息
            </summary>
            <param name="bytes">消息</param>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.GetBytes(System.String)">
            <summary>
            获取字节组
            </summary>
            <param name="content">数据</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.AddQueue(XiaoFeng.Sockets.SocketConnection)">
            <summary>
            加入队列
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.RemoveQueue(System.Net.EndPoint)">
            <summary>
            移除队列
            </summary>
            <param name="endPoint">网络地址</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.RemoveQueue(XiaoFeng.Sockets.SocketConnection)">
            <summary>
            移除队列
            </summary>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.RemoveQueue(System.Net.Sockets.Socket)">
            <summary>
            移除队列
            </summary>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.ClearQueue">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.GetQueue(System.Net.Sockets.Socket)">
            <summary>
            获取连接对象
            </summary>
            <param name="socket">连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.GetQueue(System.Func{XiaoFeng.Sockets.SocketConnection,System.Boolean})">
            <summary>
            获取在线列表中的客户端
            </summary>
            <param name="func">满足条件的函数</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.CountQueue">
            <summary>
            获取队列数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.UpdateQueue(XiaoFeng.Sockets.SocketConnection)">
            <summary>
            更新队列[不用调用更新队列直接可以更改]
            </summary>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.GetData">
            <summary>
            复制出一个在线列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.BulkAddIpBlack(System.Collections.Generic.List{System.String})">
            <summary>
            批量加入黑名单
            </summary>
            <param name="list">列表</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.AddIpBlack(System.String)">
            <summary>
            加入黑名单
            </summary>
            <param name="ip">ip</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.RemoveIpBlack(System.String)">
            <summary>
            移除黑名单
            </summary>
            <param name="ip">ip</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.ClearIpBlack">
            <summary>
            清空黑名单
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.IsBlackIP(System.String)">
            <summary>
            是否在黑名单
            </summary>
            <param name="ip">ip</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Finalize">
            <summary>
            析构器
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Close(System.Func{XiaoFeng.Sockets.SocketConnection,System.Boolean})">
            <summary>
            关闭在线列表中的客户端
            </summary>
            <param name="func">满足条件的函数</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Close(XiaoFeng.Sockets.SocketConnection)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="socket">连接</param>
        </member>
        <member name="M:XiaoFeng.Sockets.SocketServer.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.SocketState">
            <summary>
            Socket状态
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketState.Idle">
            <summary>
            空闲
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketState.Runing">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketState.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.SocketTypes">
            <summary>
            Socket类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketTypes.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketTypes.WebSocket">
            WebSocket
        </member>
        <member name="T:XiaoFeng.Sockets.WebSocketClient">
            <summary>
            WebSocket客户端连接操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Sockets.WebSocketClient.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            设置连接数据
            </summary>
            <param name="Host">Host</param>
            <param name="Port">端口</param>
        </member>
        <member name="T:XiaoFeng.Sockets.WsType">
            <summary>
            WebSocket类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.WsType.Null">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.WsType.WS">
            <summary>
            WS类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.WsType.WSS">
            <summary>
            WSS类型
            </summary>
        </member>
        <member name="T:XiaoFeng.Sockets.SocketDataType">
            <summary>
            Socket 数据类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketDataType.String">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Sockets.SocketDataType.HexString">
            <summary>
            16进制类型 一般用于串口传输
            </summary>
        </member>
        <member name="T:XiaoFeng.Table.BaseTable">
            <summary>
            基础表
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.BaseTable.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.BaseTable.GetTableAttribute(System.Type,System.String,System.String,System.Int32)">
            <summary>
            获取表配置属性
            </summary>
            <param name="type">类型</param>
            <param name="tableName">表名</param>
            <param name="connName">连接串</param>
            <param name="connIndex">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Table.BaseTable.GetField(XiaoFeng.Model.Core.ColumnAttribute,XiaoFeng.Data.DbProviderType)">
            <summary>
            获取字段定义
            </summary>
            <param name="column">字段配置</param>
            <param name="providerType">驱动类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Table.BaseTable.GetDefaultValue(System.String,XiaoFeng.Data.DbProviderType)">
            <summary>
            获取默认值
            </summary>
            <param name="defaultValue">默认值</param>
            <param name="providerType">驱动类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Table.ITable">
            <summary>
            创建表接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.ITable.Create``1(System.String,System.String,System.Int32)">
            <summary>
            创建表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="tableName">表名</param>
            <param name="connName">连接串名</param>
            <param name="connIndex">连接串索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Table.ITable.Create(System.Type,System.String,System.String,System.Int32)">
            <summary>
            创建表
            </summary>
            <param name="modelType">类型</param>
            <param name="tableName">表名</param>
            <param name="connName">连接串名</param>
            <param name="connIndex">连接串索引</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Table.MakeTable">
            <summary>
            通过Model创建表
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2019/03/18 16:32:26
            Update Time : 2019/03/18 16:32:26
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.MakeTable.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.MakeTable.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库配置
            </summary>
            <param name="config">数据库配置</param>
        </member>
        <member name="P:XiaoFeng.Table.MakeTable.Config">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.MakeTable.Create``1(System.String,System.String,System.Int32)">
            <summary>
            创建表
            </summary>
            <typeparam name="T">Model类型</typeparam>
            <param name="tableName">表名</param>
            <param name="connName">连接串</param>
            <param name="connIndex">第几个连接</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Table.MakeTable.Create(System.Type,System.String,System.String,System.Int32)">
            <summary>
            创建表
            </summary>
            <param name="modelType">Model类型</param>
            <param name="tableName">表名</param>
            <param name="connName">连接串</param>
            <param name="connIndex">第几个连接</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Table.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.SqlServer.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.SqlServer.#ctor(XiaoFeng.Data.ConnectionConfig)">
            <summary>
            设置数据库连接
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:XiaoFeng.Table.SqlServer.Config">
            <summary>
            数据库连接配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Table.SqlServer.Create(System.Type,System.String,System.String,System.Int32)">
            <summary>
            创建表
            </summary>
            <param name="modelType">表类型</param>
            <param name="tableName">表名</param>
            <param name="connName">连接串</param>
            <param name="connIndex">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Table.SqlServer.Create``1(System.String,System.String,System.Int32)">
            <summary>
            创建表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="tableName">表名</param>
            <param name="connName">连接串</param>
            <param name="connIndex">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Table.SqlServer.GetField(XiaoFeng.Model.Core.ColumnAttribute)">
            <summary>
            获取字段定义
            </summary>
            <param name="column">字段配置</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Threading.BackgroundTaskQueue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.BackgroundTaskQueue.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.BackgroundTaskQueue.#ctor(System.String)">
            <summary>
            设置队列名称
            </summary>
            <param name="name">队列名称</param>
        </member>
        <member name="P:XiaoFeng.Threading.BackgroundTaskQueue.QueueName">
            <summary>
            队列名称
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.BackgroundTaskQueue.WorkItems">
            <summary>
            任务集
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.BackgroundTaskQueue.Manual">
            <summary>
            线程同步信号
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.BackgroundTaskQueue.CancelToken">
            <summary>
            取消事件
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.BackgroundTaskQueue.ConsumeState">
            <summary>
            消费运行状态
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.BackgroundTaskQueue.AddWorkItem(System.Action)">
            <summary>
            加入任务
            </summary>
            <param name="action">事件</param>
        </member>
        <member name="M:XiaoFeng.Threading.BackgroundTaskQueue.AddWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            加入任务
            </summary>
            <param name="workItem">任务</param>
        </member>
        <member name="M:XiaoFeng.Threading.BackgroundTaskQueue.ConsumeTask">
            <summary>
            消费任务线程
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.BackgroundTaskQueue.Stop">
            <summary>
            停止消费任务
            </summary>
        </member>
        <member name="T:XiaoFeng.Threading.TimerType">
            <summary>
            定时器类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Once">
            <summary>
            一次
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Hour">
            <summary>
            每时
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Day">
            <summary>
            每天
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Week">
            <summary>
            每周
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Month">
            <summary>
            每月
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Year">
            <summary>
            每年
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.TimerType.Interval">
            <summary>
            间隔
            </summary>
        </member>
        <member name="T:XiaoFeng.Threading.IBackgroundTaskQueue">
            <summary>
            队列任务 接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.IBackgroundTaskQueue.AddWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            添加任务
            </summary>
            <param name="workItem">任务</param>
        </member>
        <member name="M:XiaoFeng.Threading.IBackgroundTaskQueue.AddWorkItem(System.Action)">
            <summary>
            加入任务
            </summary>
            <param name="action">事件</param>
        </member>
        <member name="M:XiaoFeng.Threading.IBackgroundTaskQueue.Stop">
            <summary>
            停止消费任务
            </summary>
        </member>
        <member name="T:XiaoFeng.Threading.IJob">
            <summary>
            作业接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Scheduler">
            <summary>
            当前调度
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Status">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.State">
            <summary>
            作业数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Async">
            <summary>
            是否是异步
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.SuccessCount">
            <summary>
            已成功运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.FailureCount">
            <summary>
            失败运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Message">
            <summary>
            运行日志
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.CancelToken">
            <summary>
            取消信号
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.ID">
            <summary>
            作业ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Name">
            <summary>
            作业名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Count">
            <summary>
            运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.SuccessCallBack">
            <summary>
            成功回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.CompleteCallBack">
            <summary>
            当前任务执行完成后再进入计时队列 此方法最后一定要设置job的状态等待
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.FailureCallBack">
            <summary>
            失败回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.StopCallBack">
            <summary>
            停止作业回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.LastTime">
            <summary>
            最后一次运行时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.NextTime">
            <summary>
            下次运行时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.StartTime">
            <summary>
            启动时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.MaxCount">
            <summary>
            最大运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.ExpireTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.IsDestroy">
            <summary>
            运行完是否销毁
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.TimerType">
            <summary>
            定时器类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.Period">
            <summary>
            间隔 单位毫秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.IJob.DayOrWeekOrHour">
            <summary>
            是几号还是周几
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.IJob.Start">
            <summary>
            启动作业
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.IJob.Start(XiaoFeng.Threading.IJobScheduler)">
            <summary>
            启动作业
            </summary>
            <param name="scheduler">调度</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJob.Stop">
            <summary>
            停止作业
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.IJob.Stop(XiaoFeng.Threading.IJobScheduler)">
            <summary>
            停止作业
            </summary>
            <param name="scheduler">调度</param>
        </member>
        <member name="T:XiaoFeng.Threading.IJobScheduler">
            <summary>
            作业调度中心接口
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Add(XiaoFeng.Threading.IJob[])">
            <summary>
            添加多个作业
            </summary>
            <param name="jobs">作业集</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Add(XiaoFeng.Threading.IJob)">
            <summary>
            添加作业
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.AddRange(System.Collections.Generic.IEnumerable{XiaoFeng.Threading.IJob})">
            <summary>
            批量添加作业
            </summary>
            <param name="jobs">作业集</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Remove(System.String)">
            <summary>
            移除作业
            </summary>
            <param name="name">作业名称</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Remove(System.Guid)">
            <summary>
            移除作业
            </summary>
            <param name="ID">ID</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Remove(XiaoFeng.Threading.IJob)">
            <summary>
            移除作业
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Wake">
            <summary>唤醒处理</summary>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.Stop">
            <summary>
            停止调度器
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.IJobScheduler.GetJobs">
            <summary>
            作业列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Threading.Job">
            <summary>
            作业操作类
            Version : 1.1
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Job.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Job.#ctor(XiaoFeng.Threading.IJobScheduler)">
            <summary>
            设置调度
            </summary>
            <param name="scheduler">调度</param>
        </member>
        <member name="F:XiaoFeng.Threading.Job._Scheduler">
            <summary>
            当前调度
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Scheduler">
            <summary>
            当前调度
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.CancelToken">
            <summary>
            取消信号
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.State">
            <summary>
            作业数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Async">
            <summary>
            是否是异步
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Count">
            <summary>
            运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.SuccessCount">
            <summary>
            已成功运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.FailureCount">
            <summary>
            失败运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Message">
            <summary>
            运行日志
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.ID">
            <summary>
            作业ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Name">
            <summary>
            作业名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.SuccessCallBack">
            <summary>
            成功回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.CompleteCallBack">
            <summary>
            当前任务执行完成后再进入计时队列 此方法最后一定要设置job的状态等待
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.FailureCallBack">
            <summary>
            失败回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.StopCallBack">
            <summary>
            停止作业回调
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.LastTime">
            <summary>
            最后一次运行时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.NextTime">
            <summary>
            下次运行时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Status">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.StartTime">
            <summary>
            启动时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.MaxCount">
            <summary>
            最大运行次数
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.ExpireTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.IsDestroy">
            <summary>
            运行完是否销毁
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.TimerType">
            <summary>
            定时器类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.Job._DayOrWeekOrHour">
            <summary>
            是几号还是周几
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.DayOrWeekOrHour">
            <summary>
            是几号还是周几
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Job.Period">
            <summary>
            间隔 单位毫秒
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Job.Start">
            <summary>
            启动作业
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Job.Start(XiaoFeng.Threading.IJobScheduler)">
            <summary>
            启动作业
            </summary>
            <param name="scheduler">调度</param>
        </member>
        <member name="M:XiaoFeng.Threading.Job.Stop">
            <summary>
            停止作业
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Job.Stop(XiaoFeng.Threading.IJobScheduler)">
            <summary>
            停止作业
            </summary>
            <param name="scheduler">调度</param>
        </member>
        <member name="M:XiaoFeng.Threading.Job.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Job.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:XiaoFeng.Threading.JobScheduler">
            <summary>
            作业调度器
            Version : 1.0
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.#ctor(System.String)">
            <summary>
            设置带名称的调度
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="F:XiaoFeng.Threading.JobScheduler.Schedulers">
            <summary>
            调度器集合
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.JobScheduler.Name">
            <summary>
            调度名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.JobScheduler.Period">
            <summary>
            间隔时长 单位为毫秒
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.JobScheduler.SchedulerJobs">
            <summary>
            调度作业列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.JobScheduler.ConsumeState">
            <summary>
            消费运行状态
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.JobScheduler.CancelToken">
            <summary>
            取消信号
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.JobScheduler.Manual">
            <summary>
            线程同步信号
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.JobScheduler.Default">
            <summary>默认调度器</summary>
        </member>
        <member name="F:XiaoFeng.Threading.JobScheduler._Current">
            <summary>
            当前调度器
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.JobScheduler.Current">
            <summary>当前调度器</summary>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.CreateScheduler(System.String)">
            <summary>
            创建调度
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Add(XiaoFeng.Threading.IJob[])">
            <summary>
            添加多个作业
            </summary>
            <param name="jobs">作业集</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Add(XiaoFeng.Threading.IJob)">
            <summary>
            添加作业
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.AddRange(System.Collections.Generic.IEnumerable{XiaoFeng.Threading.IJob})">
            <summary>
            批量添加作业
            </summary>
            <param name="jobs">作业集</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Remove(System.String)">
            <summary>
            移除作业
            </summary>
            <param name="name">作业名称</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Remove(System.Guid)">
            <summary>
            移除作业
            </summary>
            <param name="ID">ID</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Remove(XiaoFeng.Threading.IJob)">
            <summary>
            移除作业
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Wake">
            <summary>唤醒处理</summary>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Process">
            <summary>
            入口
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Execute(System.Object)">
            <summary>
            执行作业
            </summary>
            <param name="state">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Success(XiaoFeng.Threading.IJob)">
            <summary>
            执行成功后执行
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Failure(XiaoFeng.Threading.IJob)">
            <summary>
            执行失败后执行
            </summary>
            <param name="job">作业</param>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.CheckTime(XiaoFeng.Threading.IJob,System.DateTime,System.Int32@)">
            <summary>检查定时器是否到期</summary>
            <param name="job"></param>
            <param name="now"></param>
            <param name="period">返回间隔</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.GetIndex(System.Int32[],System.Int32)">
            <summary>
            获取离当前值最接近的索引
            </summary>
            <param name="arr">数组</param>
            <param name="val">值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.Stop">
            <summary>
            停止调度器
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.JobScheduler.GetJobs">
            <summary>
            作业列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Threading.JobStatus">
            <summary>
            作业状态
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.JobStatus.Wait">
            <summary>
            等待
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.JobStatus.Runing">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.JobStatus.Stoping">
            <summary>
            停止中
            </summary>
        </member>
        <member name="T:XiaoFeng.Threading.StopWatch">
            <summary>
            执行时间类
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.StopWatch.GetTime(System.Action)">
            <summary>
            获取运行时长
            </summary>
            <param name="action">方法</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.StopWatch.GetTimeAsync(System.Action)">
            <summary>
            异步获取运行时长
            </summary>
            <param name="action">方法</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Threading.Synchronized">
            <summary>
            同步类
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Synchronized.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.Synchronized.Mutex">
            <summary>
            排它锁
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Synchronized.Run(System.Action)">
            <summary>
            执行方法
            </summary>
            <param name="action">方法</param>
        </member>
        <member name="M:XiaoFeng.Threading.Synchronized.Run``1(System.Func{``0})">
            <summary>
            同步执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="func">方法</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Threading.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Time.#ctor">
            <summary>
            设置时间
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Time.#ctor(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="timeString">时间串 格式必须为 1:2:3或01:02:03</param>
        </member>
        <member name="M:XiaoFeng.Threading.Time.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间
            </summary>
            <param name="hour">小时</param>
            <param name="minute">分钟</param>
            <param name="second">秒</param>
        </member>
        <member name="M:XiaoFeng.Threading.Time.#ctor(System.DateTime)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">全时间</param>
        </member>
        <member name="M:XiaoFeng.Threading.Time.#ctor(XiaoFeng.Threading.Time)">
            <summary>
            设置时间
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="F:XiaoFeng.Threading.Time._Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Time.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.Time._Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Time.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:XiaoFeng.Threading.Time._Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Time.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="P:XiaoFeng.Threading.Time.TotalSeconds">
            <summary>
            总秒数
            </summary>
        </member>
        <member name="M:XiaoFeng.Threading.Time.CompareTo(System.Object)">
            <summary>
            比较大小
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.CompareTo(XiaoFeng.Threading.Time)">
            <summary>
            比较大小
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.Equals(XiaoFeng.Threading.Time,XiaoFeng.Threading.Time)">
            <summary>
            比较两个值
            </summary>
            <param name="x">第一个时间</param>
            <param name="y">第二个时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.Equals(XiaoFeng.Threading.Time)">
            <summary>
            比较两个值
            </summary>
            <param name="time">第二个时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.GetHashCode(XiaoFeng.Threading.Time)">
            <summary>
            当前实例的哈希代码
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.ToString">
            <summary>
            转换字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.ToString(System.String,System.IFormatProvider)">
            <summary>
            转换字符串
            </summary>
            <param name="format">格式</param>
            <param name="formatProvider">格式驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Threading.Time.AddHours(System.Int32)">
            <summary>
            添加小时
            </summary>
            <param name="Hours">几小时</param>
        </member>
        <member name="M:XiaoFeng.Threading.Time.AddMinutes(System.Int32)">
            <summary>
            添加分钟
            </summary>
            <param name="Minutes">几分</param>
        </member>
        <member name="M:XiaoFeng.Threading.Time.AddSeconds(System.Int32)">
            <summary>
            添加秒
            </summary>
            <param name="Seconds">几秒</param>
        </member>
        <member name="T:XiaoFeng.Validator.BetweenValue">
            <summary>
            区间结构
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.BetweenValue.#ctor(System.Double,System.Double)">
            <summary>
            设置最大最小值
            </summary>
            <param name="MinValue">最小值</param>
            <param name="MaxValue">最大值</param>
        </member>
        <member name="P:XiaoFeng.Validator.BetweenValue.MaxValue">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.BetweenValue.MinValue">
            <summary>
            最小值
            </summary>
        </member>
        <member name="T:XiaoFeng.Validator.ConditionValidator">
            <summary>
            验证操作类
            Version : 1.0.2
            Author : jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            Description:
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.#ctor(System.String,System.Object,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            设置参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="format">规则</param>
        </member>
        <member name="P:XiaoFeng.Validator.ConditionValidator.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ConditionValidator.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ConditionValidator.Result">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ConditionValidator.IsValid">
            <summary>
            是否验证
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ConditionValidator.IsMust">
            <summary>
            是否必填 true为必填  false为非必填
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.ValidateFormat(XiaoFeng.Validator.ValidateFormat)">
            <summary>
            验证规则
            </summary>
            <param name="format">格式</param>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.Requires(System.String,System.Object)">
            <summary>
            验证参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsNullOrEmpty">
            <summary>
            验证参数是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsNotNullOrEmpty">
            <summary>
            验证参数是否不为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsNullOrWhiteSpace">
            <summary>
            验证参数是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsNotNullOrWhiteSpace">
            <summary>
            验证参数是否不为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsPattern(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证规则
            </summary>
            <param name="pattern">正则表达式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsEqualsTo(System.Object)">
            <summary>
            验证是否相等
            </summary>
            <param name="_">对比值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsNotEqualsTo(System.Object)">
            <summary>
            验证是否不相等
            </summary>
            <param name="_">对比值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsBetween(System.Double,System.Double)">
            <summary>
            验证是否在某个区间
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsLessThan(System.Double)">
            <summary>
            验证是否少于
            </summary>
            <param name="min">最小值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsMoreThan(System.Double)">
            <summary>
            验证是否大于
            </summary>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.StartsWith(System.String)">
            <summary>
            是否开始存在某个字符
            </summary>
            <param name="_">字符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.EndsWith(System.String)">
            <summary>
            是否结束存在某个字符
            </summary>
            <param name="_">字符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.HasLength(System.Int32)">
            <summary>
            验证长度
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.HasNotLength(System.Int32)">
            <summary>
            验证长度
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsShorter(System.Int32)">
            <summary>
            验证长度是否短于
            </summary>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsLonger(System.Int32)">
            <summary>
            验证长度是否长于
            </summary>
            <param name="minLength">最短长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.Contains(System.String)">
            <summary>
            是否包含
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.NotContains(System.String)">
            <summary>
            是否不包含
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsNumberic">
            <summary>
            验证是否是数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsFloat">
            <summary>
            验证是否是数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsPhone">
            <summary>
            验证是否是手机号格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsTel">
            <summary>
            验证是否是座机号码格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsSite">
            <summary>
            验证是否是网址格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsEmail">
            <summary>
            验证是否是Email格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsDate">
            <summary>
            验证是否是日期格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsTime">
            <summary>
            验证是否是时间格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsDateTime">
            <summary>
            验证是否是全日期时间格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsDateOrTime">
            <summary>
            验证是否是全日期时间格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsGuid">
            <summary>
            验证是否是Guid格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsIp">
            <summary>
            验证是否是IP格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ConditionValidator.IsBoolean">
            <summary>
            验证是否是布尔格式
            </summary>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Validator.Condition">
            <summary>
            验证参数
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.Condition.Result">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.Condition.IsValid">
            <summary>
            是否验证
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.Condition.Requires(System.String,System.Object,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            验证参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="format">规则</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.Condition.Requires(System.String,System.Object,System.Linq.Expressions.Expression{System.Func{XiaoFeng.Validator.ValidatorFormat,System.Boolean}})">
            <summary>
            验证参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Validator.ValidateFormat">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ValidateFormat.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsMust">
            <summary>
            是否必填
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsNull">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsNullOrWhiteSpace">
            <summary>
            是否为空或空格组成
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.MinLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.HasLength">
            <summary>
            是否指定长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.HasNotLength">
            <summary>
            是否不是指定长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.Contains">
            <summary>
            是否包含
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.NotContains">
            <summary>
            是否不包含
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsPattern">
            <summary>
            是否匹配规则
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.StartsWith">
            <summary>
            开始包含
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.EndsWith">
            <summary>
            结尾包含
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.EqualsTo">
            <summary>
            是否等于
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.NotEqualsTo">
            <summary>
            是否不等于
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.Between">
            <summary>
            是否在指定区间
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsNumberic">
            <summary>
            是否是数字
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsFloat">
            <summary>
            是否是浮点
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsPhone">
            <summary>
            是否是手机
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsTel">
            <summary>
            是否是固话
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsSite">
            <summary>
            是否是网址
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsEmail">
            <summary>
            是否是Email
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsDate">
            <summary>
            是否是日期
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsTime">
            <summary>
            是否是时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsDateTime">
            <summary>
            是否是全日期
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsDateOrTime">
            <summary>
            是否是日期
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsGuid">
            <summary>
            是否是Guid
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsIp">
            <summary>
            是否是IP
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidateFormat.IsBoolean">
            <summary>
            是否是Boolean
            </summary>
        </member>
        <member name="T:XiaoFeng.Validator.ValidatorFormat">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorFormat.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsNull">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsNullOrWhiteSpace">
            <summary>
            是否为空或空格组成
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.MinLength">
            <summary>
            最小长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.HasLength">
            <summary>
            是否指定长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.HasNotLength">
            <summary>
            是否不是指定长度
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsNumberic">
            <summary>
            是否是数字
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsFloat">
            <summary>
            是否是浮点
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsPhone">
            <summary>
            是否是手机
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsTel">
            <summary>
            是否是固话
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsSite">
            <summary>
            是否是网址
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsEmail">
            <summary>
            是否是Email
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsDate">
            <summary>
            是否是日期
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsTime">
            <summary>
            是否是时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsDateTime">
            <summary>
            是否是全日期
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsDateOrTime">
            <summary>
            是否是日期
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsGuid">
            <summary>
            是否是Guid
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsIp">
            <summary>
            是否是IP
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorFormat.IsBoolean">
            <summary>
            是否是Boolean
            </summary>
        </member>
        <member name="T:XiaoFeng.Validator.ValidatorHelper">
            <summary>
            验证操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.#ctor(System.String,System.Object)">
            <summary>
            设置参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorHelper.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorHelper.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorHelper.Result">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:XiaoFeng.Validator.ValidatorHelper.IsValid">
            <summary>
            是否验证
            </summary>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.Requires(System.String,System.Object)">
            <summary>
            验证参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsNullOrEmpty">
            <summary>
            验证参数是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsNotNullOrEmpty">
            <summary>
            验证参数是否不为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsNullOrWhiteSpace">
            <summary>
            验证参数是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsNotNullOrWhiteSpace">
            <summary>
            验证参数是否不为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsPattern(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证规则
            </summary>
            <param name="pattern">正则表达式</param>
            <param name="options">表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsEquals(System.Object)">
            <summary>
            验证是否相等
            </summary>
            <param name="_">对比值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsBetween(System.Int32,System.Int32)">
            <summary>
            验证是否在某个区间
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsBetween(System.Int64,System.Int64)">
            <summary>
            验证是否在某个区间
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsBetween(System.Single,System.Single)">
            <summary>
            验证是否在某个区间
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsBetween(System.Double,System.Double)">
            <summary>
            验证是否在某个区间
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.StartsWith(System.String)">
            <summary>
            是否开始存在某个字符
            </summary>
            <param name="_">字符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.EndsWith(System.String)">
            <summary>
            是否结束存在某个字符
            </summary>
            <param name="_">字符</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.HasLength(System.Int32)">
            <summary>
            验证长度
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.HasNotLength(System.Int32)">
            <summary>
            验证长度
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsShorter(System.Int32)">
            <summary>
            验证长度是否短于
            </summary>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.IsLonger(System.Int32)">
            <summary>
            验证长度是否长于
            </summary>
            <param name="minLength">最短长度</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.Contains(System.String)">
            <summary>
            是否包含
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Validator.ValidatorHelper.NotContains(System.String)">
            <summary>
            是否不包含
            </summary>
            <param name="_">字符串</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Web.HttpContext">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.HttpContext.App">
            <summary>
            应用程式建立器
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.HttpContext._contextAccessor">
            <summary>
            访问器
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.HttpContext.Current">
            <summary>
            当前上下文
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.HttpContext.Configure(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            配置当前HttpContext
            </summary>
            <param name="contextAccessor">访问器</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpContext.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置当前应用程式建立器
            </summary>
            <param name="app">应用程式建立器</param>
        </member>
        <member name="T:XiaoFeng.Web.HttpContextX">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.HttpContextX.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            依赖注入
            </summary>
            <param name="accessor">访问器</param>
        </member>
        <member name="F:XiaoFeng.Web.HttpContextX._contextAccessor">
            <summary>
            访问器
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.HttpContextX.HttpContextAccessor">
            <summary>
            访问器
            </summary>
        </member>
        <member name="T:XiaoFeng.Web.HttpCookie">
            <summary>
            HttpCookie
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.String,XiaoFeng.Web.CookieOption)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="options">配置</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="domain">域名</param>
            <param name="path">路径</param>
            <param name="encrypt">是否加密</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
            <param name="encrypt">是否加密</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.String,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="encrypt">是否加密 true加密false不加密</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.Collections.Generic.Dictionary{System.String,System.String},XiaoFeng.Web.CookieOption)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="data">值</param>
            <param name="options">配置</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="data">值</param>
            <param name="domain">域名</param>
            <param name="path">路径</param>
            <param name="encrypt">是否加密</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.DateTime,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="data">值</param>
            <param name="expire">过期时间</param>
            <param name="encrypt">是否加密</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Set(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="data">值</param>
            <param name="encrypt">是否加密 true加密false不加密</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Get(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="name">cookie名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Gets(System.String)">
            <summary>
            获取cookie
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Gets(System.String,System.String)">
            <summary>
            获取cookie集中的值
            </summary>
            <param name="names">集名</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Remove(System.String)">
            <summary>
            移除Cookie
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:XiaoFeng.Web.HttpCookie.Clear">
            <summary>
            移除所有Cookie
            </summary>
        </member>
        <member name="T:XiaoFeng.Web.CookieOption">
            <summary>
            Cookie配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.CookieOption.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.Path">
            <summary>
            生效目录
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.Domain">
            <summary>
            域名
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.Expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.HttpOnly">
            <summary>
            是否允许客户端脚本访问
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.IsEncrypt">
            <summary>
            是否加密
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.IsEssential">
            <summary>
            Cookie是否是必须的
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.SameSite">
            <summary>
            SameSite
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.CookieOption.Secure">
            <summary>
            安全
            </summary>
        </member>
        <member name="T:XiaoFeng.Web.IUploadFiles">
            <summary>
            上传接口
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.OnMessage">
            <summary>
            上传完一个文件事件
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.OnComplete">
            <summary>
            上传完所有文件事件
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.Config">
            <summary>
            上传配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.ErrorList">
            <summary>
            失败列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.SuccessList">
            <summary>
            成功列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.Result">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.IsValidateMime">
            <summary>
            是否验证文件类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.HttpFiles">
            <summary>
            上传文件集合
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.Token">
            <summary>
            取消标识
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.Format">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.FileType">
            <summary>
            允许上传文件类型 多个用,隔开
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.PathFormat">
            <summary>
            路径格式 日期格式 yyyy MM dd HH mm ss ffff
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.IUploadFiles.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.IUploadFiles.IsMime(System.String,System.String)">
            <summary>
            验证文件MIME
            </summary>
            <param name="fType">当前文件类型</param>
            <param name="fMime">当前文件MIME</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.IUploadFiles.IsMuMa(System.IO.Stream)">
            <summary>
            是否含有木马
            </summary>
            <param name="stream">文件流</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.IUploadFiles.IsMuMa(System.String)">
            <summary>
            是否有木马
            </summary>
            <param name="fileContent">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.IUploadFiles.UploadAsync(System.Threading.CancellationToken)">
            <summary>
            异步上传
            </summary>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.IUploadFiles.UploadBase64Async(System.String,System.Threading.CancellationToken)">
            <summary>
            上传base64
            </summary>
            <param name="base64String">base64字符串</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Web.UpLoadFile">
            <summary>
            上传文件操作类
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FileFormat">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.Config">
            <summary>
            上传配置
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._MaxSize">
            <summary>
            最大上传文件大小 单位为B
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.MaxSize">
            <summary>
            最大上传文件大小 单位为B
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._FileType">
            <summary>
            允许上传文件类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FileType">
            <summary> 
            允许上传文件类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._IsDelTempFile">
            <summary>
            是否删除临时文件
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.IsDelTempFile">
            <summary>
            是否删除临时文件
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._IsWater">
            <summary>
            是否打水印
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.IsWater">
            <summary>
            是否打水印
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._WaterText">
            <summary>
            文字水印信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.WaterText">
            <summary>
            文字水印信息
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._WaterImage">
            <summary>
            图片水印路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.WaterImage">
            <summary>
            图片水印路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._FontWeight">
            <summary>
            文字大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FontWeigth">
            <summary>
            文字大小
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._FontColor">
            <summary>
            文字颜色
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FontColor">
            <summary>
            文字颜色
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._FontFamily">
            <summary>
            文字字体
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FontFamily">
            <summary>
            文字字体
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._IsWaterTextOrImage">
            <summary>
            是文字水印还是图片水平 true是文字水印 false是图片文印
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.IsWaterTextOrImage">
            <summary>
            是文字水印还是图片水平 true是文字水印 false是图片文印
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._TextAlign">
            <summary>
            打水印位置 0:正中间 1:左上角 2:右上角 3:左下角 4:右下角 
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.TextAlign">
            <summary>
            打水印位置 0:正中间 1:左上角 2:右上角 3:左下角 4:右下角 
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._HttpFiles">
            <summary>
            客户端上传文件集
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.HttpFiles">
            <summary>
            客户端上传文件集
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._FileCount">
            <summary>
            文件数量
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FileCount">
            <summary>
            文件数量
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._Message">
            <summary>
            上传信息
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.Message">
            <summary>
            上传信息
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._SourcePath">
            <summary>
            上传到服务器端的保存文件路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.SourcePath">
            <summary>
            上传到服务器端的保存文件路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._BasePath">
            <summary>
            上传到服务器端的相对文件路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.BasePath">
            <summary>
            上传到服务器端的相对文件路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._WaterPath">
            <summary>
            上传到服务器端打水印后的文件路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.WaterPath">
            <summary>
            上传到服务器端打水印后的文件路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._ThumbnailPath">
            <summary>
            上传到服务器端缩略图后的文件路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.ThumbnailPath">
            <summary>
            上传到服务器端缩略图后的文件路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._SavePath">
            <summary>
            文件保存路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.SavePath">
            <summary>
            文件保存路径
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._PathFormat">
            <summary>
            路径格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.PathFormat">
            <summary>
            路径格式
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._SuccessFileCount">
            <summary>
            上传成功文件个数
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.SuccessFileCount">
            <summary>
            上传成功文件个数
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._IsThumbnail">
            <summary>
            是否生成缩略图
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.IsThumbnail">
            <summary>
            是否生成缩略图
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._TWidth">
            <summary>
            缩略图宽度
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.TWidth">
            <summary>
            缩略图宽度
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._THeight">
            <summary>
            缩略图高度
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.THeight">
            <summary>
            缩略图高度
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._TPosX">
            <summary>
            X坐标（zoom为1时）
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.TPosX">
            <summary>
            X坐标（zoom为1时）
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._TPosY">
            <summary>
            Y坐标（zoom为1时）
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.TPosY">
            <summary>
            Y坐标（zoom为1时）
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._TModeType">
            <summary>
            生成缩略图模式 指定字符串"WH"指定宽高缩放（可能变形）,"W"指定宽缩放,"H"指定高缩放,"Cut"指定高宽裁减（不变形）,"EQ" 指定宽高等比例缩放(不变形)
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.TModeType">
            <summary>
            生成缩略图模式 指定字符串"WH"指定宽高缩放（可能变形）,"W"指定宽缩放,"H"指定高缩放,"Cut"指定高宽裁减（不变形）,"EQ" 指定宽高等比例缩放(不变形)
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._TMode">
            <summary>
            生成缩略图方式 0为直接生成 1为切割后生成
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.TMode">
            <summary>
            生成缩略图方式 0为直接生成 1为切割后生成
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._IsValidateMIME">
            <summary>
            是否验证文件头类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.IsValidateMIME">
            <summary>
            是否验证文件头类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UpLoadFile._Prefix">
            <summary>
            文件名前缀
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.Prefix">
            <summary>
            文件名前缀
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UpLoadFile.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.UpLoad">
            <summary>
            上传入口
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.UpLoad(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            上传入口
            </summary>
            <param name="postedFile">输入文件</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.UpLoad(System.String,System.String)">
            <summary>
            Base64上传
            </summary>
            <param name="base64File">附件base64</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.IsMuMa(System.IO.Stream)">
            <summary>
            是否含有木马
            </summary>
            <param name="stream">文件流</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.IsMuMa(System.String)">
            <summary>
            是否有木马
            </summary>
            <param name="fileContent">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UpLoadFile.IsMime(System.String,System.String)">
            <summary>
            验证文件MIME
            </summary>
            <param name="fType">当前文件类型</param>
            <param name="fMime">当前文件MIME</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Web.UploadMessageEventHandler">
            <summary>
            上传一个文件事件
            </summary>
            <param name="message">文件信息</param>
            <param name="args">消息</param>
        </member>
        <member name="T:XiaoFeng.Web.UploadCompleteEventHandler">
            <summary>
            上传完成委托
            </summary>
            <param name="list">列表</param>
            <param name="args">消息</param>
        </member>
        <member name="T:XiaoFeng.Web.UploadFiles">
            <summary>
            类说明
            Version : 1.0.0
            CrateTime : 2021-02-02 下午 08:30:56
            Author : Jacky
            更新说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.Config">
            <summary>
            上传配置
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.SuccessList">
            <summary>
            成功列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.ErrorList">
            <summary>
            失败列表
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.IsValidateMime">
            <summary>
            是否验证文件类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.HttpFiles">
            <summary>
            上传文件集合
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.Token">
            <summary>
            取消标识
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.Format">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.FileType">
            <summary>
            允许上传文件类型 多个用,隔开
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.PathFormat">
            <summary>
            路径格式 日期格式 yyyy MM dd HH mm ss ffff
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.IsDatePath">
            <summary>
            是否是日期路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.OnMessage">
            <summary>
            上传完一个文件事件
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.UploadFiles.OnComplete">
            <summary>
            上传完所有文件事件
            </summary>
        </member>
        <member name="F:XiaoFeng.Web.UploadFiles.StreamLock">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.Upload">
            <summary>
            上传
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.UploadAsync(System.Threading.CancellationToken)">
            <summary>
            异步上传
            </summary>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.UploadBase64(System.String)">
            <summary>
            上传base64
            </summary>
            <param name="base64String">base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.UploadBase64Async(System.String,System.Threading.CancellationToken)">
            <summary>
            上传base64
            </summary>
            <param name="base64String">base64字符串</param>
            <param name="token">取消标识</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.IsMuMa(System.IO.Stream)">
            <summary>
            是否含有木马
            </summary>
            <param name="stream">文件流</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.IsMuMa(System.String)">
            <summary>
            是否有木马
            </summary>
            <param name="fileContent">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Web.UploadFiles.IsMime(System.String,System.String)">
            <summary>
            验证文件MIME
            </summary>
            <param name="fType">当前文件类型</param>
            <param name="fMime">当前文件MIME</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Web.FileMessage">
            <summary>
            上传文件模型
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.Extension">
            <summary>
            文件后缀名
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.LocalPath">
            <summary>
            客户端地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.RemotePath">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.Length">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XiaoFeng.Web.FileMessage.State">
            <summary>
            状态 true是成功 false 失败
            </summary>
        </member>
        <member name="T:XiaoFeng.TokenX">
            <summary>
            获取请求数据
            Verstion : 1.0.7
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/12/22 15:11:05
            Update Time : 2018/06/16 02:26:13
            </summary>
        </member>
        <member name="P:XiaoFeng.TokenX.Request">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="M:XiaoFeng.TokenX.Get(System.String,System.String)">
            <summary>
            获取参数值
            </summary>
            <param name="queryName">参数名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Get``1(System.String,``0)">
            <summary>
            获取参数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="queryName">参数名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Post(System.String,System.String)">
            <summary>
            获取表单值
            </summary>
            <param name="postName">表单名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Post``1(System.String,``0)">
            <summary>
            获取表单值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="postName">表单名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Header(System.String,System.String)">
            <summary>
            获取Header值
            </summary>
            <param name="headerName">Header名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Header``1(System.String,``0)">
            <summary>
            获取Header值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="headerName">Header名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Cookie(System.String,System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="cookieName">Cookie名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Cookie``1(System.String,``0)">
            <summary>
            获取Cookie
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="cookieName">Cookie名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Value(System.String,System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.TokenX.Value``1(System.String,``0)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.XToken">
            <summary>
            请求数据
            Verstion : 1.0.6
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2018/08/31 11:30:05
            Update Time : 2018/09/03 18:00:16
            </summary>
        </member>
        <member name="M:XiaoFeng.XToken.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.XToken.Files">
            <summary>
            上传文件集
            </summary>
        </member>
        <member name="P:XiaoFeng.XToken.IsValid">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="P:XiaoFeng.XToken.Result">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="F:XiaoFeng.XToken.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:XiaoFeng.XToken.UseData">
            <summary>
            用过的数据
            </summary>
        </member>
        <member name="P:XiaoFeng.XToken.Item(System.String)">
            <summary>
            获取值 不过滤SQL注入
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Value``1(System.String,``0)">
            <summary>
            获取数据 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Value(System.String)">
            <summary>
            获取数据  过滤SQL注入
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Value``1(System.String,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            获取数据并验证有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="format">验证格式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Value``1(System.String,System.Linq.Expressions.Expression{System.Func{XiaoFeng.Validator.ValidatorFormat,System.Boolean}})">
            <summary>
            获取数据并验证有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.get(System.String)">
            <summary>
            获取参数值 原始值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Get(System.String)">
            <summary>
            获取参数值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Get``1(System.String,``0)">
            <summary>
            获取参数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Get``1(System.String,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            获取参数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="format">验证规则</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{XiaoFeng.Validator.ValidatorFormat,System.Boolean}})">
            <summary>
            获取参数值 验证数据有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.post(System.String)">
            <summary>
            获取表单值 原始值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Post(System.String)">
            <summary>
            获取表单值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Post``1(System.String,``0)">
            <summary>
            获取表单值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Post``1(System.String,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            获取表单值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="format">验证规则</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Post``1(System.String,System.Linq.Expressions.Expression{System.Func{XiaoFeng.Validator.ValidatorFormat,System.Boolean}})">
            <summary>
            获取表单值 验证数据有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.header(System.String)">
            <summary>
            获取Header值 原始值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Header(System.String)">
            <summary>
            获取表单值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Header``1(System.String,``0)">
            <summary>
            获取Header值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Header``1(System.String,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            获取Header值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="format">验证规则</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Header``1(System.String,System.Linq.Expressions.Expression{System.Func{XiaoFeng.Validator.ValidatorFormat,System.Boolean}})">
            <summary>
            获取Header值 验证数据有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Cookie``1(System.String)">
            <summary>
            获取Cookie
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken.Cookies(System.String)">
            <summary>
            获取Cookie集
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken._Value``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}},System.String,``0)">
            <summary>
            获取数据并验证有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="nameValue">数据集</param>
            <param name="name">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken._Value``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}},System.String,XiaoFeng.Validator.ValidateFormat)">
            <summary>
            获取数据并验证有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="nameValue">数据集</param>
            <param name="name">名称</param>
            <param name="format">验证规则</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken._Value``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}},System.String,System.Linq.Expressions.Expression{System.Func{XiaoFeng.Validator.ValidatorFormat,System.Boolean}})">
            <summary>
            获取数据并验证有效性 过滤SQL注入
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="nameValue">数据集</param>
            <param name="name">名称</param>
            <param name="func">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XToken._value(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}},System.String)">
            <summary>
            获取原始值
            </summary>
            <param name="nameValue">数据集</param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.CData">
            <summary>
            CData扩展
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.CData._Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.CData.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.CData.#ctor(System.String)">
            <summary>
            设置值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:XiaoFeng.Xml.CData.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.CData.HasValue">
            <summary>
            是否有值
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.CData.ReadXml(System.Xml.XmlReader)">
            <summary>
            读数据
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:XiaoFeng.Xml.CData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            写数据
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:XiaoFeng.Xml.CData.GetSchema">
            <summary>
            获取Schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.CData.ToString">
            <summary>
            重写转字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.CData.op_Implicit(XiaoFeng.Xml.CData)~System.String">
            <summary>
            强转字符串
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XiaoFeng.Xml.CData.op_Implicit(XiaoFeng.Xml.CData)~System.Int32">
            <summary>
            强转 int
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XiaoFeng.Xml.CData.op_Implicit(XiaoFeng.Xml.CData)~System.Int64">
            <summary>
            强转 long
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XiaoFeng.Xml.CData.op_Implicit(XiaoFeng.Xml.CData)~System.Guid">
            <summary>
            强转 long
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XiaoFeng.Xml.CData.op_Implicit(System.String)~XiaoFeng.Xml.CData">
            <summary>
            强转CDATA
            </summary>
            <param name="val">字符串</param>
        </member>
        <member name="T:XiaoFeng.Xml.DescriptionConverter">
            <summary>
            属性值
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.DescriptionConverter.#ctor">
            <summary>
            初始化属性值
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.StringEnumConverter">
            <summary>
            枚举字符
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.StringEnumConverter.#ctor">
            <summary>
            初始化属性值
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XmlCDataAttribute">
            <summary>
            CData
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlCDataAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XmlConverter">
            <summary>
            转换类
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlConverter.#ctor">
            <summary>
            初始化属性
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlConverter.CanRead">
            <summary>
            能读
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlConverter.CanWrite">
            <summary>
            能写
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XmlConverterAttribute">
            <summary>
            Json属性类
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlConverterAttribute.#ctor(System.Type)">
            <summary>
            设置转换类型
            </summary>
            <param name="converterType">转换类型</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            设置属性配置
            </summary>
            <param name="converterType">转换类型</param>
            <param name="converterParameters">属性</param>
        </member>
        <member name="P:XiaoFeng.Xml.XmlConverterAttribute.ConverterType">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlConverterAttribute.ConverterParameters">
            <summary>
            属性配置
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XMLDocument">
            <summary>
            Xml管理
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XMLDocument.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XMLDocument.Load(System.String)">
            <summary>
            加载XML文档
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:XiaoFeng.Xml.XMLDocument.SelectSingleNode(System.String,System.String,System.String)">
            <summary>
            根据xpath获取节点
            </summary>
            <param name="xpath">xpath</param>
            <param name="attrName">属性名</param>
            <param name="attrValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XMLDocument.CreateAttribute(System.String,System.Object)">
            <summary>
            创建属性
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XMLDocument.CreateElement(System.String,System.Object)">
            <summary>
            创建结点
            </summary>
            <param name="name">名称</param>
            <param name="text">内容</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.XmlElementPathAttribute">
            <summary>
            节点路径属性
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlElementPathAttribute.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlElementPathAttribute.#ctor(System.String)">
            <summary>
            设置路径
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="P:XiaoFeng.Xml.XmlElementPathAttribute.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlElementPathAttribute.Paths">
            <summary>
            路径集合
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XmlParser">
            <summary>
            转化
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlParser.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="xml">xml</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.XmlReaderX">
            <summary>
            类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.#ctor(System.String,System.Type)">
            <summary>
            设置数据
            </summary>
            <param name="xml">数据</param>
            <param name="type">类型</param>
        </member>
        <member name="P:XiaoFeng.Xml.XmlReaderX.Xml">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlReaderX.ObjectType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlReaderX.SerializerSetting">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.DecodeString(System.String)">
            <summary>
            字符串解码
            </summary>
            <param name="str">编码字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.ParseXml">
            <summary>
            读取XML
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.ParseValues(System.Xml.XmlReader,XiaoFeng.Xml.XmlValue)">
            <summary>
            转换XML
            </summary>
            <param name="reader">读取器</param>
            <param name="parentElement">父节点</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.ParseValue(System.Xml.XmlReader,XiaoFeng.Xml.XmlValue)">
            <summary>
            转换XML
            </summary>
            <param name="reader">读取器</param>
            <param name="parentElement">父节点</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.Read(System.Type)">
            <summary>
            转换对象
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlReaderX.Read``1">
            <summary>
            转换对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.XmlSerializer">
            <summary>
            类说明
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializer.SerializerSetting">
            <summary>
            序列化配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlSerializer.Serializer(System.Object,System.Text.Encoding,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="o">对象</param>
            <param name="encoding">编码</param>
            <param name="OmitXmlDeclaration">是否忽略头部声明</param>
            <param name="OmitEmptyNode">是否忽略空节点</param>
            <param name="OmitNamespace">是否忽略命名空间</param>
            <param name="OmitComment">是否忽略注释</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xml">xml内容</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlSerializer.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="xml">xml内容</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.XmlSerializerSetting">
            <summary>
            序列化设置
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlSerializerSetting.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.GuidFormat">
            <summary>
            Guid格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.DateTimeFormat">
            <summary>
            日期格式
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.Indented">
            <summary>
            是否格式化
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.EnumValueType">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.MaxDepth">
            <summary>
            解析最大深度
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.OmitComment">
            <summary>
            是否写注释
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.IgnoreCase">
            <summary>
            忽略大小写 key值统一变为小写
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.DefaultRootName">
            <summary>
            默认根目录节点名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.DefaultEncoding">
            <summary>
            默认编码
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.NamespaceHandling">
            <summary>
            获取或设置一个值，该值指示是否 System.Xml.XmlWriter 编写 XML 内容时应移除重复的命名空间声明。 写入器的默认行为是输出写入器的命名空间解析程序中存在的所有命名空间声明。
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.OmitXmlDeclaration">
            <summary>
            是否忽略输出XML声明
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.NewLineChars">
            <summary>
            获取或设置要用于换行符的字符串。要用于换行符的字符串。 它可以设置为任何字符串值。 但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。 默认值是\r\n （回车符、 换行符）。
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.OmitArrayItemName">
            <summary>
            是否忽略数组项未指定KEY的项用节点名称代替
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.OmitEmptyNode">
            <summary>
            是否忽略空节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlSerializerSetting.OmitNamespace">
            <summary>
            是否忽略命名空间
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XmlType">
            <summary>
            XML节点类型
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.None">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Element">
            <summary>
            元素 (例如， item )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Attribute">
            <summary>
            属性 (例如， id='123' )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Text">
            <summary>
            节点的文本内容
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.CDATA">
            <summary>
             CDATA 节 (例如， &lt;![CDATA[my escaped text]]&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.EntityReference">
            <summary>
            对实体的引用
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Entity">
            <summary>
            实体声明 (例如， &lt;!ENTITY...&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.ProcessingInstruction">
            <summary>
            处理指令 (例如， &lt;?pi test?&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Comment">
            <summary>
            注释 (例如， &lt;!-- my comment --&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Document">
            <summary>
            文档提供的对象，作为文档树的根访问整个 XML 文档
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.DocumentType">
            <summary>
            文档类型声明中，由以下标记 (例如， &lt;!DOCTYPE...&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.DocumentFragment">
            <summary>
            将文档片段
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Notation">
            <summary>
            在文档类型声明中的表示法 (例如， &lt;!NOTATION...&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Whitespace">
            <summary>
            标记之间的空白区域
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.SignificantWhitespace">
            <summary>
            在混合内容模型或内的空格中标记之间空白区域 xml:space="preserve" 作用域
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.EndElement">
            <summary>
            结束元素标记 (例如， &lt;/item&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.EndEntity">
            <summary>
            返回当 XmlReader 到达实体替换为调用的结果末尾 System.Xml.XmlReader.ResolveEntity
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.XmlDeclaration">
            <summary>
            XML 声明 (例如，&lt;?xml version='1.0'?&gt; )
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:XiaoFeng.Xml.XmlType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="T:XiaoFeng.Xml.XmlValue">
            <summary>
            Xml值对象
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.ElementType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.Attributes">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.ChildNodes">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.ParentElement">
            <summary>
            父节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.HasAttributes">
            <summary>
            是否有属性
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.HasChildNodes">
            <summary>
            是否有子节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.IsEmpty">
            <summary>
            是否是空
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.Item(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValue.Item(System.Int32)">
            <summary>
            获取对象
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.GetValue(System.Type)">
            <summary>
            获取值
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.GetAttribute(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.GetElement(System.String)">
            <summary>
            获取节点
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.GetElements(System.String)">
            <summary>
            获取节点
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.Append(XiaoFeng.Xml.XmlValue)">
            <summary>
            添加子节点
            </summary>
            <param name="value">子节点</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToObject(System.Type,System.Object)">
            <summary>
            转换对象
            </summary>
            <param name="type">类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ParseObject(XiaoFeng.Xml.XmlValue,System.Type,System.Object)">
            <summary>
            转成对象
            </summary>
            <param name="xmlValue">Xml对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ParseArray(XiaoFeng.Xml.XmlValue,System.Type,System.Object)">
            <summary>
            转数组
            </summary>
            <param name="xmlValue">数据</param>
            <param name="type">类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ParseList(XiaoFeng.Xml.XmlValue,System.Type,System.Object)">
            <summary>
            转列表
            </summary>
            <param name="xmlValue">数据</param>
            <param name="type">类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.CompareTo(XiaoFeng.Xml.XmlValue)">
            <summary>
            比较
            </summary>
            <param name="other">其它对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.Equals(XiaoFeng.Xml.XmlValue)">
            <summary>
            是否相等
            </summary>
            <param name="other">其它对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.CompareTo(System.Object)">
            <summary>
            比较
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.String">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            转字符串
            </summary>
            <param name="format">格式</param>
            <param name="formatProvider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.GetTypeCode">
            <summary>
            类型编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Boolean">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToBoolean(System.IFormatProvider)">
            <summary>
            转boolean
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Char">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToChar(System.IFormatProvider)">
            <summary>
            转字符
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.SByte">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToSByte(System.IFormatProvider)">
            <summary>
            转无符号字节
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Byte">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToByte(System.IFormatProvider)">
            <summary>
            转有符号字节
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Int16">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToInt16(System.IFormatProvider)">
            <summary>
            转Int16
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.UInt16">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToUInt16(System.IFormatProvider)">
            <summary>
            转无符号Int16
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Int32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToInt32(System.IFormatProvider)">
            <summary>
            转int
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.UInt32">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToUInt32(System.IFormatProvider)">
            <summary>
            转UInt32
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Int64">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToInt64(System.IFormatProvider)">
            <summary>
            转有符号长整型
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.UInt64">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToUInt64(System.IFormatProvider)">
            <summary>
            转无符号长整型
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Single">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToSingle(System.IFormatProvider)">
            <summary>
            转单精度浮点型
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Double">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToDouble(System.IFormatProvider)">
            <summary>
            转双精度浮点型
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.Decimal">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToDecimal(System.IFormatProvider)">
            <summary>
            转十进制浮点型
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Explicit(XiaoFeng.Xml.XmlValue)~System.DateTime">
            <summary>
            强制转换
            </summary>
            <param name="v">值</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToDateTime(System.IFormatProvider)">
            <summary>
            转时间
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToString(System.IFormatProvider)">
            <summary>
            转字符串
            </summary>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            转类型
            </summary>
            <param name="conversionType">转换类型</param>
            <param name="provider">驱动</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Equality(XiaoFeng.Xml.XmlValue,XiaoFeng.Xml.XmlValue)">
            <summary>
            两类型相等
            </summary>
            <param name="a">第一个对象</param>
            <param name="b">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.op_Inequality(XiaoFeng.Xml.XmlValue,XiaoFeng.Xml.XmlValue)">
            <summary>
            两类型不相等
            </summary>
            <param name="a">第一个对象</param>
            <param name="b">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.GetHashCode">
            <summary>
            HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValue.Equals(System.Object)">
            <summary>
            相等
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.XmlValueX">
            <summary>
            类说明
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.#ctor(System.Xml.XmlNode)">
            <summary>
            设置值
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.#ctor(System.Xml.XmlElement)">
            <summary>
            设置值
            </summary>
            <param name="element">节点</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.#ctor(System.Xml.XmlAttribute)">
            <summary>
            设置属性
            </summary>
            <param name="attribute">属性</param>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.Element">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.Attribute">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.ChildNodes">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.HasChildNodes">
            <summary>
            是否有子节点
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlValueX.ParentElement">
            <summary>
            父节点
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.GetElement(System.String)">
            <summary>
            获取节点数据
            </summary>
            <param name="name">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.GetAttribute(System.String)">
            <summary>
            获取节点属性
            </summary>
            <param name="name">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.ParserValue(System.Type,System.Object)">
            <summary>
            转换
            </summary>
            <param name="type">类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.ParseObject(XiaoFeng.Xml.XmlValueX,System.Type,System.Object)">
            <summary>
            转成对象
            </summary>
            <param name="xmlValue">Xml对象</param>
            <param name="type">模板类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.ParseArray(XiaoFeng.Xml.XmlValueX,System.Type,System.Object)">
            <summary>
            转数组
            </summary>
            <param name="xmlValue">数据</param>
            <param name="type">类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlValueX.ParseList(XiaoFeng.Xml.XmlValueX,System.Type,System.Object)">
            <summary>
            转列表
            </summary>
            <param name="xmlValue">数据</param>
            <param name="type">类型</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Xml.XmlWriterX">
            <summary>
            XML写入器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlWriterX.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlWriterX.#ctor(System.Object)">
            <summary>
            写对象
            </summary>
            <param name="o">对象</param>
        </member>
        <member name="P:XiaoFeng.Xml.XmlWriterX.ObjectType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlWriterX.Data">
            <summary>
            对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlWriterX.XmlWriter">
            <summary>
            写对象
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlWriterX.Bytes">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XiaoFeng.Xml.XmlWriterX.SerializerSetting">
            <summary>
            序列化配置
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlWriterX.WriteTo(System.IO.MemoryStream)">
            <summary>
            写入到流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:XiaoFeng.Xml.XmlWriterX.EncodeString(System.String)">
            <summary>
            字符串编码
            </summary>
            <param name="str">字符串</param>
            <returns>字符串编码</returns>
        </member>
        <member name="M:XiaoFeng.Xml.XmlWriterX.Write">
            <summary>
            写XML
            </summary>
        </member>
        <member name="M:XiaoFeng.Xml.XmlWriterX.WriteValue(System.Object,System.Boolean,System.String)">
            <summary>
            写数据
            </summary>
        </member>
        <member name="T:XiaoFeng.XmlConvert">
            <summary>
            XML操作类
            Version : v 1.0
            Author : Jacky
            Site : www.zhuovi.com
            QQ : 7092734
            Email : jacky@zhuovi.com
            </summary>
        </member>
        <member name="M:XiaoFeng.XmlConvert.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:XiaoFeng.XmlConvert.#ctor(System.String)">
            <summary>
            设置数据路径
            </summary>
            <param name="xmlPath">XML 路径</param>
        </member>
        <member name="M:XiaoFeng.XmlConvert.#ctor(System.Xml.XmlDocument)">
            <summary>
            设置数据对象
            </summary>
            <param name="XML">XML 对象</param>
        </member>
        <member name="F:XiaoFeng.XmlConvert._Xml">
            <summary>
            XML 对象
            </summary>
        </member>
        <member name="P:XiaoFeng.XmlConvert.Xml">
            <summary>
            XML 对象
            </summary>
        </member>
        <member name="F:XiaoFeng.XmlConvert._XmlPath">
            <summary>
            XML 路径
            </summary>
        </member>
        <member name="P:XiaoFeng.XmlConvert.XmlPath">
            <summary>
            XML 路径
            </summary>
        </member>
        <member name="F:XiaoFeng.XmlConvert._Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XiaoFeng.XmlConvert.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:XiaoFeng.XmlConvert.GetDom(System.String)">
            <summary>
            获取 XML 对象
            </summary>
            <param name="xmlPath">XML 路径</param>
        </member>
        <member name="M:XiaoFeng.XmlConvert.ReadValue(System.String,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="nodePath">结点路径 比如：
            <para>@"/Root/Node"</para>
            <para>@"/Root/Node[ChildNodeName='ChildNodeValue']</para>
            <para>@"/Root/Node[@ChildNodeName='ChildNodeValue']</para>
            <para>@"/Root/Node[ChildNodeName='ChildNodeValue']/node</para>
            <para>@"/Root/Node[ChildNodeName='ChildNodeValue']/node/@ID</para>
            </param>
            <param name="valueType">结点类型 0 InnerText 1 InnerXml 2 Value</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XmlConvert.SerializerObject``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="model">对象</param>
            <param name="encode">编码</param>
            <param name="removeNamespaces">是否移除命名空间</param>
            <param name="removeXmlDeclaration">是否移除XML声明</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XmlConvert.DeserializeObject``1(System.String,System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="xml">XML数据</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XmlConvert.DeserializeObject(System.Type,System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type">类型</param>
            <param name="xml">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.XmlConvert.DeserializeObject(System.Type,System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="stream">数据流</param>
            <returns></returns>
        </member>
        <member name="T:XiaoFeng.Zip.ZipHelper">
            <summary>
            压缩操作类
            Verstion : 1.0.0
            Author : jacky
            Email : jacky@zhuovi.com
            QQ : 7092734
            Site : www.zhuovi.com
            Create Time : 2017/10/11 16:13:17
            Update Time : 2017/10/11 16:13:17
            </summary>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="P:XiaoFeng.Zip.ZipHelper.Instance">
            <summary>
            静态方法
            </summary>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.UNZip(System.String,System.String,System.Text.Encoding)">
            <summary>
            解压文件
            </summary>
            <param name="ZipPath">压缩包路径</param>
            <param name="rootPath">解压的目录</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.GetList(System.String,System.Text.Encoding)">
            <summary>
            获取压缩包内文件
            </summary>
            <param name="zipPath">压缩包路径</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Create(System.String,System.String)">
            <summary>
            创建压缩包
            </summary>
            <param name="ZipPath">压缩包路径</param>
            <param name="rootPath">目录地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Create(System.String,System.String,System.IO.Compression.CompressionLevel)">
            <summary>
            创建压缩包
            </summary>
            <param name="ZipPath">压缩包路径</param>
            <param name="rootPath">目录地址</param>
            <param name="compressionLevel">压缩级别</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Create(System.String,System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding)">
            <summary>
            创建压缩包
            </summary>
            <param name="ZipPath">压缩包路径</param>
            <param name="rootPath">目录地址</param>
            <param name="compressionLevel">压缩级别</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Create(System.String,System.String[])">
            <summary>
            创建压缩包
            </summary>
            <param name="zipPath">压缩包路径</param>
            <param name="filePath">文件地址</param>
            <returns></returns>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XiaoFeng.Zip.ZipHelper.Finalize">
            <summary>
            析构器
            </summary>
        </member>
    </members>
</doc>
