using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace XiaoFeng
{
    /// <summary>
    /// 程序集扩展类
    /// </summary>
    public static partial class PrototypeHelper
    {
        #region 是否是系统程序集
        /// <summary>
        /// 是否是系统程序集
        /// </summary>
        /// <param name="assembly">程序集</param>
        /// <returns></returns>
        public static bool IsSystemAssembly(this Assembly assembly)
        {
            if (assembly == null) return false;
            var name = assembly.FullName;
            return name.IsMatch(@"PublicKeyToken\s*=\s*(b77a5c561934e089|b03f5f7f11d50a3a|89845dcd8080cc91|31bf3856ad364e35)$");
        }
        #endregion

        #region 获取当前类的所有子类
        /// <summary>
        /// 获取当前类的所有子类
        /// </summary>
        /// <param name="baseType">基类</param>
        /// <returns></returns>
        public static IEnumerable<Type> GetChildrenClass(this Type baseType)
        {
            return AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes().Where(t => baseType.Name == t.BaseType?.Name));
        }
        #endregion

        #region 判断属性是否是索引
        /// <summary>
        /// 判断属性是否是索引 this[]
        /// </summary>
        /// <param name="property">属性</param>
        /// <returns></returns>
        public static Boolean IsIndexer(this PropertyInfo property)
        {
            return property.GetIndexParameters().Length > 0 || property.ToString().IsIndexer();
        }
        #endregion

        #region 获取类型属性及字段
        /// <summary>
        /// 获取类型属性及字段
        /// </summary>
        /// <param name="type">类型</param>
        /// <param name="func">委托</param>
        /// <returns>类型的属性及字段</returns>
        public static IEnumerable<MemberInfo> GetPropertiesAndFields(this Type type, Func<MemberInfo, Boolean> func)
        {
            if (type.IsNullOrEmpty()) return null;
            var Fields = type.GetMembers(BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase).Where(a => a.MemberType == MemberTypes.Field || a.MemberType == MemberTypes.Property);
            return (func != null && Fields.Count() > 0) ? Fields.Each(func) : Fields;
        }
        /// <summary>
        /// 获取类型属性及字段
        /// </summary>
        /// <param name="type">类型</param>
        /// <param name="action">委托</param>
        /// <returns>类型的属性及字段</returns>
        public static IEnumerable<MemberInfo> GetPropertiesAndFields(this Type type, Action<MemberInfo> action = null)
        {
            if (type.IsNullOrEmpty()) return null;
            var Fields = type.GetMembers(BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase).Where(a => !a.IsDefined(typeof(FieldIgnoreAttribute)) && (a.MemberType == MemberTypes.Field || a.MemberType == MemberTypes.Property)).ToList();
           var fList = Fields.GroupBy(a => a.Name).Where(a => a.Count() > 1);
            if (fList.Any())
            {
                fList.Each(f =>
                {
                    Fields.Where(a => a.Name == f.Key).ToList().Each(a =>
                    {
                        if (a.DeclaringType != type) Fields.Remove(a);
                    });
                });
            }
            return action != null && Fields.Count > 0 ? Fields.Each(action) : Fields;
        }
        #endregion
    }
}