using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Security;
using System.Collections.Concurrent;
namespace XiaoFeng.Threading
{
    /// <summary>
    /// 作业调度器
    /// Version : 1.0
    /// </summary>
    public class JobScheduler : Disposable, IJobScheduler
    {
        #region 构造器
        /// <summary>
        /// 无参构造器
        /// </summary>
        public JobScheduler()
        {
            this.WaitForTimer = new AutoResetEvent(true);
        }
        /// <summary>
        /// 设置带名称的调度
        /// </summary>
        /// <param name="name">名称</param>
        public JobScheduler(string name) : this()
        {
            this.Name = name;
        }
        #endregion

        #region 属性
        /// <summary>
        /// 锁
        /// </summary>
        private static readonly object obj = new object();
        /// <summary>
        /// 调度器集合
        /// </summary>
        private static readonly ConcurrentDictionary<string, JobScheduler> Schedulers = new ConcurrentDictionary<string, JobScheduler>();
        /// <summary>
        /// 调度名称
        /// </summary>
        public string Name { get; set; } = "Default";
        /// <summary>
        /// 间隔时长 单位为毫秒
        /// </summary>
        private int Period { get; set; } = 1 * 60 * 60 * 1000;
        /// <summary>
        /// 作业列表
        /// </summary>
        public List<IJob> JobList { get; set; } = new List<IJob>();
        /// <summary>
        /// 唤醒器
        /// </summary>
        private AutoResetEvent WaitForTimer;
        /// <summary>
        /// 主线程
        /// </summary>
        private Thread MainThread;
        /// <summary>默认调度器</summary>
        public static IJobScheduler Default { get; } = CreateScheduler("Default");
        /// <summary>
        /// 当前调度器
        /// </summary>
        [ThreadStatic]
        private IJobScheduler _Current = null;
        /// <summary>当前调度器</summary>
        public IJobScheduler Current { get { return _Current ?? CreateScheduler(); } private set { _Current = value; } }
        #endregion

        #region 方法

        #region 创建调度
        /// <summary>
        /// 创建调度
        /// </summary>
        /// <param name="name">名称</param>
        /// <returns></returns>
        public static JobScheduler CreateScheduler(string name = "Default")
        {
            if (Schedulers.TryGetValue(name, out var ts)) return ts;
            lock (obj)
            {
                ts = new JobScheduler(name);
                //Schedulers[name] = ts;
                Schedulers.TryAdd(name, ts);
                LogHelper.Record("启动调度器:" + name);
                return ts;
            }
        }
        #endregion

        #region 添加作业
        /// <summary>
        /// 添加多个作业
        /// </summary>
        /// <param name="jobs">作业集</param>
        public void Add(params IJob[] jobs)
        {
            this.AddRange(jobs);
        }
        /// <summary>
        /// 添加作业
        /// </summary>
        /// <param name="job">作业</param>
        public void Add(IJob job)
        {
            if (job == null || this.JobList.Contains(job)) return;
            if (job.StartTime.HasValue)
            {
                Task.Factory.StartNew(async j =>
                {
                    var startTime = job.StartTime.Value;
                    var _job = j as IJob;
                    _job.StartTime = null;
                    if ((startTime - DateTime.Now).TotalMilliseconds > 0)
                       await Task.Delay(startTime - DateTime.Now).ConfigureAwait(false);
                    lock (obj)
                    {
                        this.JobList.Add(_job);
                    }
                    this.Wake();
                }, job).ConfigureAwait(false);
            }
            else
            {
                lock (obj)
                {
                    this.JobList.Add(job);
                }
            }
            if (this.MainThread == null)
            {
                this.MainThread = new Thread(Process)
                {
                    Name = Name == "Default" ? "T" : Name,
                    IsBackground = true
                };
                this.MainThread.Start();
            }
            this.Wake();
        }
        /// <summary>
        /// 批量添加作业
        /// </summary>
        /// <param name="jobs">作业集</param>
        public void AddRange(IEnumerable<IJob> jobs)
        {
            if (jobs.Count() == 0) return;
            jobs.Each(j =>
            {
                this.Add(j);
            });
        }
        #endregion

        #region 移除作业
        /// <summary>
        /// 移除作业
        /// </summary>
        /// <param name="name">作业名称</param>
        public void Remove(string name)
        {
            if (name.IsNullOrEmpty()) return;
            IJob job = this.JobList.Find(a => a.Name == name);
            if (job == null) return;
            job.TryDispose();
            lock (obj)
            {
                this.JobList.Remove(job);
            }
            this.Wake();
        }
        /// <summary>
        /// 移除作业
        /// </summary>
        /// <param name="ID">ID</param>
        public void Remove(Guid ID)
        {
            if (ID == Guid.Empty) return;
            IJob job = this.JobList.Find(a => a.ID == ID);
            if (job == null) return;
            job.TryDispose();
            lock (obj)
            {
                this.JobList.Remove(job);
            }
            this.Wake();
        }
        /// <summary>
        /// 移除作业
        /// </summary>
        /// <param name="job">作业</param>
        public void Remove(IJob job)
        {
            if (job == null && !this.JobList.Contains(job)) return;
            lock (obj)
            {
                this.JobList.Remove(job);
            }
            this.Wake();
        }
        #endregion

        #region 唤醒处理
        /// <summary>唤醒处理</summary>
        [SecuritySafeCritical]
        public void Wake()
        {
            if (this.MainThread == null)
            {
                this.MainThread = new Thread(Process)
                {
                    Name = Name == "Default" ? "T" : Name,
                    IsBackground = true
                };
                this.MainThread.Start();
                LogHelper.Info("启动调度器:" + this.MainThread.Name);
            }
            var e = this.WaitForTimer;
            if (e != null)
            {
                var swh = e.SafeWaitHandle;
                if (swh != null && !swh.IsClosed) e.Set();
            }
        }
        #endregion

        #region 入口
        /// <summary>
        /// 入口
        /// </summary>
        public void Process()
        {
            Current = this;
            while (true)
            {
                if (this.JobList.Count == 0)
                {
                    if (this.MainThread != null)
                    {
                        var th = this.MainThread;
                        this.MainThread = null;
                        //th.Abort();
                        LogHelper.Info("终止调度器:" + th.Name);
                        break;
                    }
                }
                var now = DateTime.Now;
                for (int i = 0; i < this.JobList.Count; i++)
                {
                    var job = this.JobList[i];
                    int period = 0;
                    if (!job.Calling && this.CheckTime(job, now, out period))
                    {
                        this.Period = Math.Min(this.Period, job.Period);
                        job.Calling = true;
                        job.LastTime = now;
                        if (!job.Async)
                            Execute(job);
                        else
                            ThreadPool.QueueUserWorkItem(Execute, job);
                    }
                    if (job.TimerType == TimerType.Interval && period > 0)
                        this.Period = Math.Min(this.Period, period);
                }
                if (this.WaitForTimer == null) this.WaitForTimer = new AutoResetEvent(true);
                this.WaitForTimer.WaitOne(this.Period, false);
            }
        }
        #endregion

        #region 执行作业
        /// <summary>
        /// 执行作业
        /// </summary>
        /// <param name="state">作业</param>
        [SecuritySafeCritical]
        private void Execute(object state)
        {
            var job = state as IJob;
            try
            {
                if (job.SuccessCallBack == null)
                {
                    job.TryDispose();
                    this.Remove(job);
                    return;
                }
                job.SuccessCallBack?.Invoke(job);
                this.Success(job);
            }
            catch (ThreadAbortException ex) {
                LogHelper.Error(ex, "任务终止");
                job.FailureCallBack?.Invoke(job, ex);
                this.Failure(job);
            }
            catch (ThreadInterruptedException ex) {
                LogHelper.Error(ex, "任务中断");
                job.FailureCallBack?.Invoke(job, ex);
                this.Failure(job);
            }
            catch (Exception ex)
            {
                LogHelper.Error(ex);
                job.FailureCallBack?.Invoke(job, ex);
                this.Failure(job);
            }
            finally
            {
                job.Calling = false;
            }
        }
        #endregion

        #region 执行成功后执行
        /// <summary>
        /// 执行成功后执行
        /// </summary>
        /// <param name="job">作业</param>
        private void Success(IJob job)
        {
            job.Message.Add("执行作业[{0}]成功.[{1}]".format(job.Name, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")));
            job.SuccessCount++;
            if (job.TimerType == TimerType.Once || job.IsDestroy || (job.MaxCount.HasValue && job.SuccessCount + job.FailureCount >= job.MaxCount))
            {
                job.TryDispose();
                this.JobList.Remove(job);
                return;
            }
        }
        #endregion

        #region 执行失败后执行
        /// <summary>
        /// 执行失败后执行
        /// </summary>
        /// <param name="job">作业</param>
        private void Failure(IJob job)
        {
            job.Message.Add("执行作业[{0}]失败.[{1}]".format(job.Name, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")));
            job.FailureCount++;
            if (job.TimerType == TimerType.Once || job.IsDestroy || (job.MaxCount.HasValue && job.SuccessCount + job.FailureCount >= job.MaxCount))
            {
                job.TryDispose();
                this.JobList.Remove(job);
                return;
            }
        }
        #endregion

        #region 检查定时器是否到期
        /// <summary>检查定时器是否到期</summary>
        /// <param name="job"></param>
        /// <param name="now"></param>
        /// <param name="period">返回间隔</param>
        /// <returns></returns>
        private Boolean CheckTime(IJob job, DateTime now, out int period)
        {
            period = -1;
            if (job.Calling) return false;
            if ((job.MaxCount.HasValue &&  job.Count >= job.MaxCount) ||
            (job.ExpireTime.HasValue && job.ExpireTime < now))
            {
                this.JobList.Remove(job);
                job.TryDispose();
                return false;
            }
            if (job.TimerType == TimerType.Interval)
            {
                if (job.NextTime.HasValue)
                {
                    if (job.NextTime <= now)
                    {
                        job.NextTime = now.AddMilliseconds(job.Period);
                        return true;
                    }
                    period = (int)(job.NextTime.Value - now).TotalMilliseconds;
                    return false;
                }
                else
                {
                    job.Period = job.Period > 0 ? job.Period : job.Time.TotalSeconds * 1000;
                    job.NextTime = now.AddMilliseconds(job.Period);
                    return true;
                }
            }
            else if (job.TimerType == TimerType.Once)
            {
                if (!job.NextTime.HasValue)
                {
                    var _now = new Time(now);
                    if (job.Time == null)
                    {
                        this.JobList.Remove(job);
                        job.TryDispose();
                        return false;
                    }
                    job.Period = job.Time.TotalSeconds - _now.TotalSeconds;
                    if (job.Period <= 0)
                    {
                        this.JobList.Remove(job);
                        job.TryDispose();
                        return false;
                    }
                    else if (job.Period <= 30)
                    {
                        job.LastTime = now;
                        job.IsDestroy = true;
                        return true;
                    }
                    else
                        return false;
                }
                else
                {
                    this.JobList.Remove(job);
                    job.TryDispose();
                    return false;
                }
            }
            else if (job.TimerType == TimerType.Hour)
            {
                var _now = new Time(now);
                var TimeStamp = job.Time.TotalSeconds - _now.TotalSeconds;
                if (TimeStamp < 0)
                {
                    TimeStamp += 1 * 60 * 60;
                }
                else if (TimeStamp <= 3)
                {
                    job.NextTime = "{0} {1}".format(now.ToString("yyyy-MM-dd"), job.Time.ToString()).ToCast<DateTime>().AddHours(1);
                    job.Period = 1 * 60 * 60 * 1000;
                    return true;
                }
                job.Period = TimeStamp * 1000;
                job.NextTime = now.AddMilliseconds(job.Period);
                return false;
            }
            else if (job.TimerType == TimerType.Day)
            {
                var _now = new Time(now);
                if (job.DayOrWeekOrHour == null || job.DayOrWeekOrHour.Length == 0)
                {
                    var TimeStamp = job.Time.TotalSeconds - _now.TotalSeconds;
                    if (TimeStamp < 0)
                    {
                        TimeStamp += 24 * 60 * 60;
                    }
                    else if (TimeStamp <= 3)
                    {
                        job.NextTime = "{0} {1}".format(now.ToString("yyyy-MM-dd"), job.Time.ToString()).ToCast<DateTime>().AddDays(1);
                        job.Period = 24 * 60 * 60 * 1000;
                        return true;
                    }
                    job.Period = TimeStamp * 1000;
                    job.NextTime = now.AddMilliseconds(job.Period);
                    return false;
                }
                else
                {
                    var index = this.GetIndex(job.DayOrWeekOrHour, _now.Hour);
                    if (index >= 0)
                    {
                        var Hour = job.DayOrWeekOrHour[index];
                        var TimeStamp = new Time(job.Time) { Hour = Hour }.TotalSeconds - _now.TotalSeconds;
                        if (TimeStamp < 0)
                        {
                            TimeStamp += 24 * 60 * 60;
                        }
                        else if (TimeStamp <= 3)
                        {
                            if (index < job.DayOrWeekOrHour.Length - 1)
                                index++;
                            else
                            {
                                index = 0;
                                now = now.AddDays(1);
                            }
                            job.NextTime = "{0} {1}".format(now.ToString("yyyy-MM-dd"), new Time(job.Time) { Hour = job.DayOrWeekOrHour[index] }.ToString()).ToCast<DateTime>();
                            job.Period = (int)(job.NextTime.Value - now).TotalMilliseconds;
                            return true;
                        }
                        job.Period = TimeStamp * 1000;
                        job.NextTime = now.AddMilliseconds(job.Period);
                        return false;
                    }
                    else
                    {
                        job.TryDispose();
                        this.JobList.Remove(job);
                        return false;
                    }
                }
            }
            else if (job.TimerType == TimerType.Week)
            {
                var CurrentWeek = (int)now.DayOfWeek;
                if (job.DayOrWeekOrHour == null || job.DayOrWeekOrHour.Length == 0)
                {
                    job.TryDispose();
                    this.JobList.Remove(job);
                    return false;
                }
                else
                {
                    var index = this.GetIndex(job.DayOrWeekOrHour, CurrentWeek);
                    if (index >= 0)
                    {
                        var Week = job.DayOrWeekOrHour[index];
                        var WeekStamp = Week - CurrentWeek;
                        /*if (WeekStamp < 0)
                        {
                            WeekStamp += 7;
                        }
                        else */if (WeekStamp >= 0 && WeekStamp <= 6)
                        {
                            if (index < job.DayOrWeekOrHour.Length - 1)
                                index++;
                            else
                            {
                                index = 0;
                                now = now.AddDays(7 - job.DayOrWeekOrHour[index]);
                            }
                            job.NextTime = "{0} {1}".format(now.ToString("yyyy-MM-dd"), new Time(job.Time) { Hour = job.DayOrWeekOrHour[index] }.ToString()).ToCast<DateTime>();
                            job.Period = (int)(job.NextTime.Value - now).TotalMilliseconds;
                            return true;
                        }
                        job.NextTime = now.AddMilliseconds(job.Period);
                        return false;
                    }
                    else
                    {
                        job.TryDispose();
                        this.JobList.Remove(job);
                        return false;
                    }
                }
            }
            else if (job.TimerType == TimerType.Month)
            {
                var _now = new Time(now);
                if (job.DayOrWeekOrHour == null || job.DayOrWeekOrHour.Length == 0)
                {
                    var TimeStamp = job.Time.TotalSeconds - _now.TotalSeconds;
                    if (TimeStamp < 0)
                    {
                        TimeStamp += 24 * 60 * 60;
                    }
                    else if (TimeStamp <= 3)
                    {
                        job.NextTime = "{0} {1}".format(now.ToString("yyyy-MM-dd"), job.Time.ToString()).ToCast<DateTime>().AddDays(1);
                        job.Period = 24 * 60 * 60 * 1000;
                        return true;
                    }
                    job.Period = TimeStamp * 1000;
                    job.NextTime = now.AddMilliseconds(job.Period);
                    return false;
                }
                else
                {
                    var index = this.GetIndex(job.DayOrWeekOrHour, now.Day);
                    if (index >= 0)
                    {
                        //var Hour = job.DayOrWeekOrHour[index];
                        var TimeStamp = (int)(now.AddDays(index - now.Day) - "{0} {1}".format(now.ToString("yyyy-MM-dd"), job.Time.ToString()).ToCast<DateTime>()).TotalSeconds;
                        if (TimeStamp < 0)
                        {
                            TimeStamp += 24 * 60 * 60;
                        }
                        else if (TimeStamp <= DateTime.DaysInMonth(now.Year, now.Month))
                        {
                            if (index < job.DayOrWeekOrHour.Length - 1)
                                index++;
                            else
                            {
                                index = 0;
                                now = now.AddMonths(1);
                            }
                            var day = job.DayOrWeekOrHour[index];
                            if (day == 0) day = 1;
                            else if (day == -1) day = DateTime.DaysInMonth(now.Year, now.Month);
                            job.NextTime = "{0}{1} {2}".format(now.ToString("yyyy-MM-"), day, job.Time.ToString()).ToCast<DateTime>();
                            job.Period = (int)(job.NextTime.Value - now).TotalMilliseconds;
                            return true;
                        }
                        job.Period = TimeStamp * 1000;
                        job.NextTime = now.AddMilliseconds(job.Period);
                        return false;
                    }
                    else
                    {
                        job.TryDispose();
                        this.JobList.Remove(job);
                        return false;
                    }
                }
            }
            return false;
        }
        #endregion

        #region 获取离当前值最接近的索引
        /// <summary>
        /// 获取离当前值最接近的索引
        /// </summary>
        /// <param name="arr">数组</param>
        /// <param name="val">值</param>
        /// <returns></returns>
        private int GetIndex(int[] arr, int val)
        {
            int Index = -1, Val = -1;
            if (arr == null || arr.Length == 0) return Index;
            for (int i = 0; i < arr.Length; i++)
            {
                var v = arr[i] - val;
                if (v >= 0 && v <= Val)
                {
                    Index = i; Val = v;
                }
            }
            return Index == -1 ? 0 : Index;
        }
        #endregion

        #endregion
    }
}